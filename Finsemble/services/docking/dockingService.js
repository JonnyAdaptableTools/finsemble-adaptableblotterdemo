/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "http://localhost:3375/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 169);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 1 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/*!
* Copyright 2017 by ChartIQ, Inc.
* All rights reserved.
*/



const LOCAL_ONLY_DEFAULT = false; // if true all logging will default to local console; will be overwritten by LoggerService's registration response
const ALWAY_ADD_STACKTRACE = false; // if true always add stacktrace data to all log messages (e.g. debug and verbose, not just errors, warning)

// capture everything at startup; will be filtered later as needed when LoggerService's registration response provides settings; overhead here is not too high
var DEFAULT_LOG_SETTING = { Error: true, Warn: true, Info: true, Log: true, Debug: true, Verbose: true, LocalOnly: LOCAL_ONLY_DEFAULT }; // if true captured for logger
var CONSOLE_DEFAULT_LOG_SETTING = { Error: true, Warn: true, Info: true, Log: true, Debug: true }; // if true then goes to console and captured for logger
const MAX_LOG_MESSAGE_SIZE = 10000;
const OVER_LOG_SIZE_LIMIT_MESSAGE = `Log argument greater than ${MAX_LOG_MESSAGE_SIZE / 1000}KB. Check local Console to see output of the object.`;
const MAX_QUEUE_SIZE = 10 * 1000; // maximum logger queue size; plenty of space although shouldn't need much since continuely sending to logger if working correctly;
const throttle = __webpack_require__(43);
var RouterClient; // wait till start to fill in
/**
 * @introduction
 *
 * <h2>Logger Client</h2>
 *
 * The Logger Client supports very efficent and configurable run-time logging to the <a href=tutorial-CentralLogger.html>Central Logger</a>. 
 * Logging has a small performance overhead, so developers can liberally instrument their code with log messages for debugging and diagnostics. 
 * By default, only error and warning messages are captured by the Logger, with the other message types (e.g., log, info, debug) disabled. 
 * Which message types are enabled or disabled is fully controlled from the <a href=tutorial-CentralLogger.html>Central Logger</a>&mdash;this means developers can fully instrument their code once and dynamically enable and disable logging later, as needed, for debugging or field support.
 *
 * The Finsemble team uses the Central Logger to <a href=tutorial-capturingLogData.html>capture log message for field support</a>. 
 * Finsemble customers, building their own Finsemble applications, have the option to do the same.
 *
 * **Note:** The Logger Client **wraps** all console logging (e.g., `console.error`, `console.log`) so these message can also be captured and viewed in the Central Logger, but console logging is never disabled locally. For better performance, we recommend most of your code's instrumentation be based on the Logger Client (e.g., `FSBL.Clients.Logger.debug(...)` instead of the `console.debug(...)`).
 *
 * Using the Logger is similar to using the browser's console for logging (e.g., `console.error` or `console.log`), although the Logger Client is accessed through the FSBL object as shown in the examples below.
 *
 *```javascript
 * 			FSBL.Clients.Logger.error("an error message", anErrorOject);
 * 			FSBL.Clients.Logger.warn("a warning message", object1, object2, object3);
 * 			FSBL.Clients.Logger.log("logging message");
 * 			FSBL.Clients.Logger.info("logging message");
 * 			FSBL.Clients.Logger.log("log message");
 * 			FSBL.Clients.Logger.debug("debug message");
 *```
 * The Logger Client also supports system logging (e.g., `Logger.system.log`) for Finsemble's internal logging. All Finsemble client APIs are in the process of being instrumented to log their entry-point calls and parameters, as shown below.
 * 
 *```javascript
 * 			Logger.system.info("RouterClient.transmit", "TO CHANNEL", toChannel, "EVENT", event);
 *```
 * Developers can view all system logging in the Central Logger, although only `Logger.system.info` messages (recording API interactions) are intended for use outside the Finsemble development team.
 *
 *<strong>Note:</strong> Any service can also use the Logger by directing requiring the client. The Logger can immediately be used, but log message will not be transmitted to the Central Logger until `Logger.start()` is invoked (as shown below).
 *```javascript
 *
 * 			var Logger = require("../../clients/logger");
 * 			Logger.log("Service Ready");
 * 			Logger.start();
 *```
 * @hideConstructor true
 * @shouldBePublished true
 * @constructor
 */
var Logger = function () {
	var self = this;
	var isRegistering = false; // if registering start
	var isRegistered = false; // if registering complete
	var loggerConsole = self;
	var updatedLogState;
	var calibratedTimeStampOffset = 0;
	var newCalibratedTimeStampOffset;
	var filteredMessagesCounter = 0;
	this.startupTime = 0;
	var loggerQueue = [];
	var warningIssued = false; // used to limit warning messages
	if (typeof window === "undefined") return;
	var loggerClientName = fin.desktop.Window.getCurrent().name.replace(/\./, "-");
	if (window.top !== window) {
		// amend name if iFrame
		loggerClientName += ".Frame";
	}
	var clientChannel = "finsemble.logger.client." + loggerClientName;

	//const CATEGORIES = ["console", "dev", "system", "perf"];

	var initialLogState = {}; // will be updated on registration with Central Logger, but capture everything until then
	initialLogState.console = CONSOLE_DEFAULT_LOG_SETTING;
	initialLogState.dev = DEFAULT_LOG_SETTING;
	initialLogState.system = DEFAULT_LOG_SETTING;
	initialLogState.perf = DEFAULT_LOG_SETTING;

	var currentLogState = initialLogState;
	function LoggerMessage(category, type, data) {
		this.category = category;
		this.logClientName = loggerClientName;
		this.logType = type;
		this.logData = data;
		this.logTimestamp = window.performance.timing.navigationStart + window.performance.now() + calibratedTimeStampOffset;
	}

	function addToQueue(message) {
		if (loggerQueue.length < MAX_QUEUE_SIZE) {
			loggerQueue.push(message);
		} else {
			if (!warningIssued) {
				console.warn("Logging Queue Overflowed!", loggerQueue.length);
				warningIssued = true;
			}
		}
	}

	// if log state changes then update queue based on that data (e.g. if no longer logging debug messages, then remove them from the queue)
	function updateQueueBasedOnState(calibrateTimeFlag) {
		loggerConsole.system.debug("Logger updateQueueBasedOnState", calibrateTimeFlag, calibratedTimeStampOffset, "QUEUE LENGTH", loggerQueue.length, currentLogState);
		var newQueue = [];
		for (var i = 0, length = loggerQueue.length; i < length; i++) {
			if (currentLogState[loggerQueue[i].category][loggerQueue[i].logType] && !currentLogState[loggerQueue[i].category].LocalOnly) {
				if (calibrateTimeFlag) {
					loggerQueue[i].logTimestamp += calibratedTimeStampOffset; // if flag set then timestamp hasn't been adjusted yet by calibrated offset time
				}
				newQueue.push(loggerQueue[i]);
			} else {
				// only now know LocalOnly for messages, so print those queued out otherwise they will be lost
				if (currentLogState[loggerQueue[i].category][loggerQueue[i].logType] && currentLogState[loggerQueue[i].category].LocalOnly) {
					let msg = loggerQueue[i];
					console.log(msg.category, msg.logType, msg.logTimestamp - window.performance.timing.navigationStart, msg.logData, "(Previously queued!)");
				}
			}
		}
		loggerQueue = newQueue;
	}

	this.setClientName = function (name) {
		loggerClientName = name;
	};

	this.getClientName = function (name) {
		return loggerClientName;
	};

	this.clearMessageList = function () {
		loggerQueue = [];
	};

	function setLogState(state, calibrateTimeFlag) {
		currentLogState = state;
		updateQueueBasedOnState(calibrateTimeFlag);
	}

	function traceString() {
		function getPosition(string, subString, index) {
			return string.split(subString, index).join(subString).length;
		}

		function getErrorObject() {
			try {
				throw Error("");
			} catch (err) {
				return err;
			}
		}
		var stack = getErrorObject().stack;
		var position = getPosition(stack, "\n", 4);
		var tString = stack.substring(position); // strip off irrelevant part of stack
		var final = "Log Stack: \n" + tString.substr(1); // insert description
		return final;
	}

	// save original console functions since going to wrap/redefine each
	var orignalConsoleError = console.error;
	var orignalConsoleWarn = console.warn;
	var orignalConsoleInfo = console.info;
	var orignalConsoleLog = console.log;
	var orignalConsoleDebug = console.debug;

	function getRoughSizeOfObject(object) {
		var objectList = [];
		var stack = [object];
		var bytes = 0;
		//prevent infinite recursion
		var attempts = 0;
		while (stack.length && attempts < 1000) {
			attempts++;
			var value = stack.pop();

			if (typeof value === "boolean") {
				bytes += 4;
			} else if (typeof value === "string") {
				bytes += value.length * 2;
			} else if (typeof value === "number") {
				bytes += 8;
			} else if (typeof value === "object" && objectList.indexOf(value) === -1) {
				objectList.push(value);

				for (var i in value) {
					stack.push(value[i]);
				}
			}
		}
		return bytes;
	}

	// filter out message containing certain substrings;
	function filterMessage(message) {
		var result = message.logData.indexOf("heartbeat") !== -1;
		return result;
	}

	function formatAndQueueMessage(category, type, args) {
		var message;
		let CHECK_OBJECT_SIZE = true;
		if (args[0] === "forceObjectsToLogger") {
			CHECK_OBJECT_SIZE = false;
			args.splice(0, 1);
		}
		//Kicks out overly-large objects to prevent the loggerService from jamming up.
		args = args.map(object => {
			if (CHECK_OBJECT_SIZE) {
				let bytes = getRoughSizeOfObject(object);
				if (bytes > MAX_LOG_MESSAGE_SIZE) {
					outputToConsole(orignalConsoleInfo, ["Message too large to send to the logger.", args]);
					return OVER_LOG_SIZE_LIMIT_MESSAGE;
				}
			}
			return object;
		});

		try {
			message = new LoggerMessage(category, type, JSON.stringify(args));
		} catch (err) {
			args.splice(0, args.length); // clear but don't redefine since must return updated value
			args.push(traceString());
			message = new LoggerMessage(category, type, "*** Logging Error: " + JSON.stringify(args));
		}

		if (!filterMessage(message)) {
			addToQueue(message);
		} else {
			if (++filteredMessagesCounter <= 5) {
				let filterMsg = `"Filtered Logger Message (${filteredMessagesCounter} of first 5 shown)`;
				outputToConsole(orignalConsoleInfo, [filterMsg, message]); // put out a few filtered messages then stop so won't clutter console
			}
		}

		if (isRegistered) {
			transmitAndClearQueue();
		}
	}

	let transmitAndClearQueue = function () {
		if (loggerQueue.length > 0) {
			RouterClient.transmit("logger.service.logMessages", loggerQueue);
			loggerConsole.clearMessageList();
		}
	};

	if (loggerClientName === "routerService") {
		transmitAndClearQueue = throttle(transmitAndClearQueue, 100, { leading: false }); // HERE is the interval for transmitting queued messages to the logger service
	} else {
		transmitAndClearQueue = throttle(transmitAndClearQueue, 250, { leading: false }); // HERE is the interval for transmitting queued messages to the logger service
	}
	//Helper to flatten the array of arguments passed in, so we can log the full message locally.
	function flatten(arr) {
		return arr.reduce(function (flat, toFlatten) {
			return flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten);
		}, []);
	}
	function outputToConsole(consoleType, args) {
		try {
			consoleType.apply(console, flatten(args));
		} catch (err) {
			args = [];
			args.push(traceString());
			message = new LoggerMessage(category, type, "*** Console Logging Error: " + JSON.stringify(args));
		}
	}

	/**
  * Log a dev error message.
  *
  * @param {...*} messageParm message parameter of any type that can be stringified (e.g. string, object)
  *
  * @example
  *
  * FSBL.Clients.Logger.error("some message", parm1, parm2);
  */
	this.error = function () {
		var args = Array.prototype.slice.call(arguments); // make a real array so can manipulate
		args.push(traceString());
		if (currentLogState.dev.Error && !currentLogState.dev.LocalOnly) {
			formatAndQueueMessage("dev", "Error", args);
		}

		args.unshift("dev error (" + window.performance.now() + "):");
		outputToConsole(orignalConsoleError, args);
	};

	/**
  * Log a dev warning message.
  *
  * @param {...*} messageParm message parameter of any type that can be stringified (e.g. string, object)
  *
  * @example
  *
  * FSBL.Clients.Logger.warn("some message", parm1, parm2);
  */
	this.warn = function () {
		if (currentLogState.dev.Warn) {
			var args = Array.prototype.slice.call(arguments); // make a real array so can manipulate
			args.push(traceString());
			if (currentLogState.dev.Warn && !currentLogState.dev.LocalOnly) {
				formatAndQueueMessage("dev", "Warn", args);
			}
			if (currentLogState.dev.Warn && currentLogState.dev.LocalOnly) {
				args.unshift("dev warn (" + window.performance.now() + "):");
				outputToConsole(orignalConsoleWarn, args);
			}
		}
	};

	/**
  * Log a dev info message.
  *
  * @param {...*} messageParm message parameter of any type that can be stringified (e.g. string, object)
  *
  * @example
  *
  * FSBL.Clients.Logger.info("some message", parm1, parm2);
  */
	this.info = function () {
		if (currentLogState.dev.Info) {
			var args = Array.prototype.slice.call(arguments); // make a real array so can manipulate
			if (ALWAY_ADD_STACKTRACE) {
				args.push(traceString());
			}
			if (currentLogState.dev.Info && !currentLogState.dev.LocalOnly) {
				formatAndQueueMessage("dev", "Info", args);
			}
			if (currentLogState.dev.Info && currentLogState.dev.LocalOnly) {
				args.unshift("dev info (" + window.performance.now() + "):");
				outputToConsole(orignalConsoleInfo, args);
			}
		}
	};

	/**
  * Log a dev log message.
  *
  * @param {...*} messageParm message parameter of any type that can be stringified (e.g. string, object)
  *
  * @example
  *
  * FSBL.Clients.Logger.log("some message", parm1, parm2);
  */
	this.log = function () {
		if (currentLogState.dev.Log) {
			var args = Array.prototype.slice.call(arguments); // make a real array so can manipulate
			if (ALWAY_ADD_STACKTRACE) {
				args.push(traceString());
			}
			if (currentLogState.dev.Log && !currentLogState.dev.LocalOnly) {
				formatAndQueueMessage("dev", "Log", args);
			}
			if (currentLogState.dev.Log && currentLogState.dev.LocalOnly) {
				args.unshift("dev log (" + window.performance.now() + "):");
				outputToConsole(orignalConsoleLog, args);
			}
		}
	};

	/**
  * Log a dev debug message.
  *
  * @param {...*} messageParm message parameter of any type that can be stringified (e.g. string, object)
  *
  * @example
  *
  * FSBL.Clients.Logger.debug("some message", parm1, parm2);
  */
	this.debug = function () {
		if (currentLogState.dev.Debug) {
			var args = Array.prototype.slice.call(arguments); // make a real array so can manipulate
			if (ALWAY_ADD_STACKTRACE) {
				args.push(traceString());
			}
			if (currentLogState.dev.Debug && !currentLogState.dev.LocalOnly) {
				formatAndQueueMessage("dev", "Debug", args);
			}
			if (currentLogState.dev.Debug && currentLogState.dev.LocalOnly) {
				args.unshift("dev debug (" + window.performance.now() + "):");
				outputToConsole(orignalConsoleDebug, args);
			}
		}
	};

	/**
  * Log a dev verbose message (an extra level of verbose-debug output)
  *
  * @param {...*} messageParm message parameter of any type that can be stringified (e.g. string, object)
  *
  * @example
  *
  * FSBL.Clients.Logger.verbose("some message", parm1, parm2);
  */
	this.verbose = function () {
		if (currentLogState.dev.Verbose) {
			var args = Array.prototype.slice.call(arguments); // make a real array so can manipulate
			if (ALWAY_ADD_STACKTRACE) {
				args.push(traceString());
			}
			if (currentLogState.dev.Verbose && !currentLogState.dev.LocalOnly) {
				formatAndQueueMessage("dev", "Verbose", args);
			}
			if (currentLogState.dev.Verbose && currentLogState.dev.LocalOnly) {
				args.unshift("dev verbose (" + window.performance.now() + "):");
				outputToConsole(orignalConsoleDebug, args);
			}
		}
	};

	// system mode functions
	this.system = {};
	this.system.error = function () {
		var args = Array.prototype.slice.call(arguments); // make a real array so can manipulate
		args.push(traceString());

		if (currentLogState.system.Error && !currentLogState.system.LocalOnly) {
			formatAndQueueMessage("system", "Error", args);
		}

		args.unshift("system error (" + window.performance.now() + "):");
		outputToConsole(orignalConsoleError, args);
	};

	this.system.warn = function () {
		if (currentLogState.system.Warn) {
			var args = Array.prototype.slice.call(arguments); // make a real array so can manipulate
			args.push(traceString());
			if (currentLogState.system.Warn && !currentLogState.system.LocalOnly) {
				formatAndQueueMessage("system", "Warn", args);
			}
			if (currentLogState.system.Warn && currentLogState.system.LocalOnly) {
				args.unshift("system warn (" + window.performance.now() + "):");
				outputToConsole(orignalConsoleWarn, args);
			}
		}
	};

	this.system.info = function () {
		if (currentLogState.system.Info) {
			var args = Array.prototype.slice.call(arguments); // make a real array so can manipulate
			if (ALWAY_ADD_STACKTRACE) {
				args.push(traceString());
			}
			if (currentLogState.system.Info && !currentLogState.system.LocalOnly) {
				formatAndQueueMessage("system", "Info", args);
			}
			if (currentLogState.system.Info && currentLogState.system.LocalOnly) {
				args.unshift("system info (" + window.performance.now() + "):");
				outputToConsole(orignalConsoleInfo, args);
			}
		}
	};

	this.system.log = function () {
		if (currentLogState.system.Log) {
			var args = Array.prototype.slice.call(arguments); // make a real array so can manipulate
			if (ALWAY_ADD_STACKTRACE) {
				args.push(traceString());
			}
			if (currentLogState.system.Log && !currentLogState.system.LocalOnly) {
				formatAndQueueMessage("system", "Log", args);
			}
			if (currentLogState.system.Log && currentLogState.system.LocalOnly) {
				args.unshift("system log (" + window.performance.now() + "):");
				outputToConsole(orignalConsoleLog, args);
			}
		}
	};

	this.system.debug = function () {
		if (currentLogState.system.Debug) {
			var args = Array.prototype.slice.call(arguments); // make a real array so can manipulate
			if (ALWAY_ADD_STACKTRACE) {
				args.push(traceString());
			}
			if (currentLogState.system.Debug && !currentLogState.system.LocalOnly) {
				formatAndQueueMessage("system", "Debug", args);
			}
			if (currentLogState.system.Debug && currentLogState.system.LocalOnly) {
				args.unshift("system debug (" + window.performance.now() + "):");
				outputToConsole(orignalConsoleDebug, args);
			}
		}
	};

	this.system.verbose = function () {
		if (currentLogState.system.Verbose) {
			var args = Array.prototype.slice.call(arguments); // make a real array so can manipulate
			if (ALWAY_ADD_STACKTRACE) {
				args.push(traceString());
			}
			if (currentLogState.system.Verbose && !currentLogState.system.LocalOnly) {
				formatAndQueueMessage("system", "Verbose", args);
			}
			if (currentLogState.system.Verbose && currentLogState.system.LocalOnly) {
				var args = Array.prototype.slice.call(arguments); // make a real array so can manipulate
				args.unshift("system log (" + window.performance.now() + "):");
				outputToConsole(orignalConsoleDebug, args);
			}
		}
	};

	// performance mode functions
	this.perf = {};
	this.perf.error = function () {
		var args = Array.prototype.slice.call(arguments); // make a real array so can manipulate
		args.push(traceString());
		if (currentLogState.perf.Error && !currentLogState.perf.LocalOnly) {
			formatAndQueueMessage("perf", "Error", args);
		}

		args.unshift("perf error (" + window.performance.now() + "):");
		outputToConsole(orignalConsoleError, args);
	};

	this.perf.warn = function () {
		if (currentLogState.perf.Warn) {
			var args = Array.prototype.slice.call(arguments); // make a real array so can manipulate
			args.push(traceString());
			if (currentLogState.perf.Warn && !currentLogState.perf.LocalOnly) {
				formatAndQueueMessage("perf", "Warn", args);
			}
			if (currentLogState.perf.Warn && currentLogState.perf.LocalOnly) {
				args.unshift("perf warn (" + window.performance.now() + "):");
				outputToConsole(orignalConsoleWarn, args);
			}
		}
	};

	this.perf.info = function () {
		if (currentLogState.perf.Info) {
			var args = Array.prototype.slice.call(arguments); // make a real array so can manipulate
			if (ALWAY_ADD_STACKTRACE) {
				args.push(traceString());
			}
			if (currentLogState.perf.Info && !currentLogState.perf.LocalOnly) {
				formatAndQueueMessage("perf", "Info", args);
			}
			if (currentLogState.perf.Info && currentLogState.perf.LocalOnly) {
				args.unshift("perf info (" + window.performance.now() + "):");
				outputToConsole(orignalConsoleInfo, args);
			}
		}
	};

	this.perf.log = function () {
		if (currentLogState.perf.Log) {
			var args = Array.prototype.slice.call(arguments); // make a real array so can manipulate
			if (ALWAY_ADD_STACKTRACE) {
				args.push(traceString());
			}
			if (currentLogState.perf.Log && !currentLogState.perf.LocalOnly) {
				formatAndQueueMessage("perf", "Log", args);
			}
			if (currentLogState.perf.Log && currentLogState.perf.LocalOnly) {
				args.unshift("perf log (" + window.performance.now() + "):");
				outputToConsole(orignalConsoleLog, args);
			}
		}
	};

	this.perf.debug = function () {
		if (currentLogState.perf.Debug) {
			var args = Array.prototype.slice.call(arguments); // make a real array so can manipulate
			if (ALWAY_ADD_STACKTRACE) {
				args.push(traceString());
			}
			if (currentLogState.perf.Debug && !currentLogState.perf.LocalOnly) {
				formatAndQueueMessage("perf", "Debug", args);
			}
			if (currentLogState.perf.Debug && currentLogState.perf.LocalOnly) {
				args.unshift("perf debug (" + window.performance.now() + "):");
				outputToConsole(orignalConsoleDebug, args);
			}
		}
	};

	this.perf.verbose = function () {
		if (currentLogState.perf.Verbose) {
			var args = Array.prototype.slice.call(arguments); // make a real array so can manipulate
			if (ALWAY_ADD_STACKTRACE) {
				args.push(traceString());
			}
			if (currentLogState.perf.Verbose && !currentLogState.perf.LocalOnly) {
				formatAndQueueMessage("perf", "Verbose", args);
			}
			if (currentLogState.perf.Verbose && currentLogState.perf.LocalOnly) {
				args.unshift("perf verbose (" + window.performance.now() + "):");
				outputToConsole(orignalConsoleDebug, args);
			}
		}
	};

	function registerClient() {
		loggerConsole.system.debug("logger.service.registering", loggerClientName);
		if (!LOCAL_ONLY_DEFAULT) {
			RouterClient.query("logger.service.register", {
				clientName: loggerClientName,
				clientChannel,
				uuid: fin.desktop.Window.getCurrent().uuid,
				windowName: fin.desktop.Window.getCurrent().name
			}, function (error, queryMessage) {
				if (error) {
					// for some very early clients the logger may not be ready yet, so retry after a small wait
					setTimeout(registerClient, 750);
				} else {
					isRegistered = true;
					loggerConsole.system.debug("logger.service.registered");
					updatedLogState = queryMessage.data;
					if (loggerClientName !== "routerService") {
						calibratedTimeStampOffset = newCalibratedTimeStampOffset; // from now the real offset time will be used for all timestamps
						setLogState(updatedLogState, true); // true indicates must adjust already queued timestamps by the new offset time
					} else {
						// router services doesn't need to calibrate time since it is the reference time
						setLogState(updatedLogState, false);
					}
					formatAndQueueMessage("system", "Info", ["Logger Registered"]);
					transmitAndClearQueue();
				}
			});
		}

		RouterClient.addListener(clientChannel, function (error, message) {
			loggerConsole.system.debug("logger.client.setLogState", message.data);
			updatedLogState = message.data;
			setLogState(updatedLogState, false);
		});
	}

	function unregisterClient() {
		loggerConsole.system.debug("logger.service.unregister", loggerClientName);
		transmitAndClearQueue(); // send any message currently in the log queue
		RouterClient.query("logger.service.unregister", { clientName: loggerClientName }, function () {});
	}

	function registerOnceWhenStarted() {
		if (!isRegistering) {
			self.startupTime = performance.now() - self.startupTime;
			registerClient();
			window.addEventListener("beforeunload", unregisterClient);
			isRegistering = true;
		}
	}

	this.isLogMessage = function (channel) {
		return channel === "logger.service.logMessages";
	};
	this.status = "offline";
	this.start = function () {
		this.startupTime = performance.now();
		var self = this;
		RouterClient = __webpack_require__(3);
		let onlineSubscription, allActiveSubscription;
		//Wait for the service before coming online. can't use the dependency manager, because it uses the router, which uses the logger.
		function comeOnline() {
			self.status = "online";
			loggerConsole.system.debug("Logger onReady", loggerClientName);
			// timer calibration must be done so the messages will be correctly sorted in the central logger;
			// this is necessary because there is timer driff between windows --- this appears to be a Chromium
			// bug we have to work around it.  The timeOffset value adjusts the time using the routerService's
			// time as a central reference point.
			RouterClient.calibrateTimeWithRouterService(function (timeOffset) {
				newCalibratedTimeStampOffset = timeOffset;
				registerOnceWhenStarted();
			});
		}
		RouterClient.onReady(() => {
			onlineSubscription = RouterClient.subscribe("Finsemble.serviceOnline", function (err, event) {
				if (self.status == "online") {
					RouterClient.unsubscribe(onlineSubscription);
				} else if (event && event.data === "loggerService") {
					comeOnline();
					RouterClient.unsubscribe(onlineSubscription);
				}
			});
			allActiveSubscription = RouterClient.subscribe("Finsemble.ServiceManager.getActiveServices", function (err, event) {
				if (self.status == "online") {
					RouterClient.unsubscribe(allActiveSubscription);
				} else if (event && event.data.includes("loggerService")) {
					comeOnline();
					RouterClient.unsubscribe(allActiveSubscription);
				}
			});
		});
	};
};

var logger = new Logger();

module.exports = logger;

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\clients\\logger.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\clients\\logger.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/*!
* Copyright 2017 by ChartIQ, Inc.
* All rights reserved.
*/

/**
 * @introduction
 * <h2>Router Client Instance</h2>
 * Exports a single shared instance of the router client.  See {@link RouterClientConstructor} for the complete API definition with examples.
 *
 * Example:
 *
 *	// get a shared instance of RouterClient (shared within the containing component or service)
 *	var RouterClient = require('./routerClientInstance');
 *
 * @namespace routerClientInstance
 * @shouldBePublished false
 */



var RouterClientConstructor = __webpack_require__(45);

module.exports = new RouterClientConstructor({ clientName: "RouterClient" });

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\clients\\routerClientInstance.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\clients\\routerClientInstance.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {
/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = __webpack_require__(50);
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && 'WebkitAppearance' in document.documentElement.style) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (window.console && (console.firebug || (console.exception && console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs() {
  var args = arguments;
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return args;

  var c = 'color: ' + this.color;
  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
  return args;
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    return exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (typeof process !== 'undefined' && 'env' in process) {
    return process.env.DEBUG;
  }
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage(){
  try {
    return window.localStorage;
  } catch (e) {}
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * Module dependencies.
 */

var keys = __webpack_require__(57);
var hasBinary = __webpack_require__(22);
var sliceBuffer = __webpack_require__(49);
var after = __webpack_require__(36);
var utf8 = __webpack_require__(70);

var base64encoder;
if (global && global.ArrayBuffer) {
  base64encoder = __webpack_require__(38);
}

/**
 * Check if we are running an android browser. That requires us to use
 * ArrayBuffer with polling transports...
 *
 * http://ghinda.net/jpeg-blob-ajax-android/
 */

var isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent);

/**
 * Check if we are running in PhantomJS.
 * Uploading a Blob with PhantomJS does not work correctly, as reported here:
 * https://github.com/ariya/phantomjs/issues/11395
 * @type boolean
 */
var isPhantomJS = typeof navigator !== 'undefined' && /PhantomJS/i.test(navigator.userAgent);

/**
 * When true, avoids using Blobs to encode payloads.
 * @type boolean
 */
var dontSendBlobs = isAndroid || isPhantomJS;

/**
 * Current protocol version.
 */

exports.protocol = 3;

/**
 * Packet types.
 */

var packets = exports.packets = {
    open:     0    // non-ws
  , close:    1    // non-ws
  , ping:     2
  , pong:     3
  , message:  4
  , upgrade:  5
  , noop:     6
};

var packetslist = keys(packets);

/**
 * Premade error packet.
 */

var err = { type: 'error', data: 'parser error' };

/**
 * Create a blob api even for blob builder when vendor prefixes exist
 */

var Blob = __webpack_require__(39);

/**
 * Encodes a packet.
 *
 *     <packet type id> [ <data> ]
 *
 * Example:
 *
 *     5hello world
 *     3
 *     4
 *
 * Binary is encoded in an identical principle
 *
 * @api private
 */

exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
  if ('function' == typeof supportsBinary) {
    callback = supportsBinary;
    supportsBinary = false;
  }

  if ('function' == typeof utf8encode) {
    callback = utf8encode;
    utf8encode = null;
  }

  var data = (packet.data === undefined)
    ? undefined
    : packet.data.buffer || packet.data;

  if (global.ArrayBuffer && data instanceof ArrayBuffer) {
    return encodeArrayBuffer(packet, supportsBinary, callback);
  } else if (Blob && data instanceof global.Blob) {
    return encodeBlob(packet, supportsBinary, callback);
  }

  // might be an object with { base64: true, data: dataAsBase64String }
  if (data && data.base64) {
    return encodeBase64Object(packet, callback);
  }

  // Sending data as a utf-8 string
  var encoded = packets[packet.type];

  // data fragment is optional
  if (undefined !== packet.data) {
    encoded += utf8encode ? utf8.encode(String(packet.data)) : String(packet.data);
  }

  return callback('' + encoded);

};

function encodeBase64Object(packet, callback) {
  // packet data is an object { base64: true, data: dataAsBase64String }
  var message = 'b' + exports.packets[packet.type] + packet.data.data;
  return callback(message);
}

/**
 * Encode packet helpers for binary types
 */

function encodeArrayBuffer(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  var data = packet.data;
  var contentArray = new Uint8Array(data);
  var resultBuffer = new Uint8Array(1 + data.byteLength);

  resultBuffer[0] = packets[packet.type];
  for (var i = 0; i < contentArray.length; i++) {
    resultBuffer[i+1] = contentArray[i];
  }

  return callback(resultBuffer.buffer);
}

function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  var fr = new FileReader();
  fr.onload = function() {
    packet.data = fr.result;
    exports.encodePacket(packet, supportsBinary, true, callback);
  };
  return fr.readAsArrayBuffer(packet.data);
}

function encodeBlob(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  if (dontSendBlobs) {
    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);
  }

  var length = new Uint8Array(1);
  length[0] = packets[packet.type];
  var blob = new Blob([length.buffer, packet.data]);

  return callback(blob);
}

/**
 * Encodes a packet with binary data in a base64 string
 *
 * @param {Object} packet, has `type` and `data`
 * @return {String} base64 encoded message
 */

exports.encodeBase64Packet = function(packet, callback) {
  var message = 'b' + exports.packets[packet.type];
  if (Blob && packet.data instanceof global.Blob) {
    var fr = new FileReader();
    fr.onload = function() {
      var b64 = fr.result.split(',')[1];
      callback(message + b64);
    };
    return fr.readAsDataURL(packet.data);
  }

  var b64data;
  try {
    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));
  } catch (e) {
    // iPhone Safari doesn't let you apply with typed arrays
    var typed = new Uint8Array(packet.data);
    var basic = new Array(typed.length);
    for (var i = 0; i < typed.length; i++) {
      basic[i] = typed[i];
    }
    b64data = String.fromCharCode.apply(null, basic);
  }
  message += global.btoa(b64data);
  return callback(message);
};

/**
 * Decodes a packet. Changes format to Blob if requested.
 *
 * @return {Object} with `type` and `data` (if any)
 * @api private
 */

exports.decodePacket = function (data, binaryType, utf8decode) {
  if (data === undefined) {
    return err;
  }
  // String data
  if (typeof data == 'string') {
    if (data.charAt(0) == 'b') {
      return exports.decodeBase64Packet(data.substr(1), binaryType);
    }

    if (utf8decode) {
      data = tryDecode(data);
      if (data === false) {
        return err;
      }
    }
    var type = data.charAt(0);

    if (Number(type) != type || !packetslist[type]) {
      return err;
    }

    if (data.length > 1) {
      return { type: packetslist[type], data: data.substring(1) };
    } else {
      return { type: packetslist[type] };
    }
  }

  var asArray = new Uint8Array(data);
  var type = asArray[0];
  var rest = sliceBuffer(data, 1);
  if (Blob && binaryType === 'blob') {
    rest = new Blob([rest]);
  }
  return { type: packetslist[type], data: rest };
};

function tryDecode(data) {
  try {
    data = utf8.decode(data);
  } catch (e) {
    return false;
  }
  return data;
}

/**
 * Decodes a packet encoded in a base64 string
 *
 * @param {String} base64 encoded message
 * @return {Object} with `type` and `data` (if any)
 */

exports.decodeBase64Packet = function(msg, binaryType) {
  var type = packetslist[msg.charAt(0)];
  if (!base64encoder) {
    return { type: type, data: { base64: true, data: msg.substr(1) } };
  }

  var data = base64encoder.decode(msg.substr(1));

  if (binaryType === 'blob' && Blob) {
    data = new Blob([data]);
  }

  return { type: type, data: data };
};

/**
 * Encodes multiple messages (payload).
 *
 *     <length>:data
 *
 * Example:
 *
 *     11:hello world2:hi
 *
 * If any contents are binary, they will be encoded as base64 strings. Base64
 * encoded strings are marked with a b before the length specifier
 *
 * @param {Array} packets
 * @api private
 */

exports.encodePayload = function (packets, supportsBinary, callback) {
  if (typeof supportsBinary == 'function') {
    callback = supportsBinary;
    supportsBinary = null;
  }

  var isBinary = hasBinary(packets);

  if (supportsBinary && isBinary) {
    if (Blob && !dontSendBlobs) {
      return exports.encodePayloadAsBlob(packets, callback);
    }

    return exports.encodePayloadAsArrayBuffer(packets, callback);
  }

  if (!packets.length) {
    return callback('0:');
  }

  function setLengthHeader(message) {
    return message.length + ':' + message;
  }

  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, !isBinary ? false : supportsBinary, true, function(message) {
      doneCallback(null, setLengthHeader(message));
    });
  }

  map(packets, encodeOne, function(err, results) {
    return callback(results.join(''));
  });
};

/**
 * Async array map using after
 */

function map(ary, each, done) {
  var result = new Array(ary.length);
  var next = after(ary.length, done);

  var eachWithIndex = function(i, el, cb) {
    each(el, function(error, msg) {
      result[i] = msg;
      cb(error, result);
    });
  };

  for (var i = 0; i < ary.length; i++) {
    eachWithIndex(i, ary[i], next);
  }
}

/*
 * Decodes data when a payload is maybe expected. Possible binary contents are
 * decoded from their base64 representation
 *
 * @param {String} data, callback method
 * @api public
 */

exports.decodePayload = function (data, binaryType, callback) {
  if (typeof data != 'string') {
    return exports.decodePayloadAsBinary(data, binaryType, callback);
  }

  if (typeof binaryType === 'function') {
    callback = binaryType;
    binaryType = null;
  }

  var packet;
  if (data == '') {
    // parser error - ignoring payload
    return callback(err, 0, 1);
  }

  var length = ''
    , n, msg;

  for (var i = 0, l = data.length; i < l; i++) {
    var chr = data.charAt(i);

    if (':' != chr) {
      length += chr;
    } else {
      if ('' == length || (length != (n = Number(length)))) {
        // parser error - ignoring payload
        return callback(err, 0, 1);
      }

      msg = data.substr(i + 1, n);

      if (length != msg.length) {
        // parser error - ignoring payload
        return callback(err, 0, 1);
      }

      if (msg.length) {
        packet = exports.decodePacket(msg, binaryType, true);

        if (err.type == packet.type && err.data == packet.data) {
          // parser error in individual packet - ignoring payload
          return callback(err, 0, 1);
        }

        var ret = callback(packet, i + n, l);
        if (false === ret) return;
      }

      // advance cursor
      i += n;
      length = '';
    }
  }

  if (length != '') {
    // parser error - ignoring payload
    return callback(err, 0, 1);
  }

};

/**
 * Encodes multiple messages (payload) as binary.
 *
 * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number
 * 255><data>
 *
 * Example:
 * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers
 *
 * @param {Array} packets
 * @return {ArrayBuffer} encoded payload
 * @api private
 */

exports.encodePayloadAsArrayBuffer = function(packets, callback) {
  if (!packets.length) {
    return callback(new ArrayBuffer(0));
  }

  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, true, true, function(data) {
      return doneCallback(null, data);
    });
  }

  map(packets, encodeOne, function(err, encodedPackets) {
    var totalLength = encodedPackets.reduce(function(acc, p) {
      var len;
      if (typeof p === 'string'){
        len = p.length;
      } else {
        len = p.byteLength;
      }
      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2
    }, 0);

    var resultArray = new Uint8Array(totalLength);

    var bufferIndex = 0;
    encodedPackets.forEach(function(p) {
      var isString = typeof p === 'string';
      var ab = p;
      if (isString) {
        var view = new Uint8Array(p.length);
        for (var i = 0; i < p.length; i++) {
          view[i] = p.charCodeAt(i);
        }
        ab = view.buffer;
      }

      if (isString) { // not true binary
        resultArray[bufferIndex++] = 0;
      } else { // true binary
        resultArray[bufferIndex++] = 1;
      }

      var lenStr = ab.byteLength.toString();
      for (var i = 0; i < lenStr.length; i++) {
        resultArray[bufferIndex++] = parseInt(lenStr[i]);
      }
      resultArray[bufferIndex++] = 255;

      var view = new Uint8Array(ab);
      for (var i = 0; i < view.length; i++) {
        resultArray[bufferIndex++] = view[i];
      }
    });

    return callback(resultArray.buffer);
  });
};

/**
 * Encode as Blob
 */

exports.encodePayloadAsBlob = function(packets, callback) {
  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, true, true, function(encoded) {
      var binaryIdentifier = new Uint8Array(1);
      binaryIdentifier[0] = 1;
      if (typeof encoded === 'string') {
        var view = new Uint8Array(encoded.length);
        for (var i = 0; i < encoded.length; i++) {
          view[i] = encoded.charCodeAt(i);
        }
        encoded = view.buffer;
        binaryIdentifier[0] = 0;
      }

      var len = (encoded instanceof ArrayBuffer)
        ? encoded.byteLength
        : encoded.size;

      var lenStr = len.toString();
      var lengthAry = new Uint8Array(lenStr.length + 1);
      for (var i = 0; i < lenStr.length; i++) {
        lengthAry[i] = parseInt(lenStr[i]);
      }
      lengthAry[lenStr.length] = 255;

      if (Blob) {
        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);
        doneCallback(null, blob);
      }
    });
  }

  map(packets, encodeOne, function(err, results) {
    return callback(new Blob(results));
  });
};

/*
 * Decodes data when a payload is maybe expected. Strings are decoded by
 * interpreting each byte as a key code for entries marked to start with 0. See
 * description of encodePayloadAsBinary
 *
 * @param {ArrayBuffer} data, callback method
 * @api public
 */

exports.decodePayloadAsBinary = function (data, binaryType, callback) {
  if (typeof binaryType === 'function') {
    callback = binaryType;
    binaryType = null;
  }

  var bufferTail = data;
  var buffers = [];

  var numberTooLong = false;
  while (bufferTail.byteLength > 0) {
    var tailArray = new Uint8Array(bufferTail);
    var isString = tailArray[0] === 0;
    var msgLength = '';

    for (var i = 1; ; i++) {
      if (tailArray[i] == 255) break;

      if (msgLength.length > 310) {
        numberTooLong = true;
        break;
      }

      msgLength += tailArray[i];
    }

    if(numberTooLong) return callback(err, 0, 1);

    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);
    msgLength = parseInt(msgLength);

    var msg = sliceBuffer(bufferTail, 0, msgLength);
    if (isString) {
      try {
        msg = String.fromCharCode.apply(null, new Uint8Array(msg));
      } catch (e) {
        // iPhone Safari doesn't let you apply to typed arrays
        var typed = new Uint8Array(msg);
        msg = '';
        for (var i = 0; i < typed.length; i++) {
          msg += String.fromCharCode(typed[i]);
        }
      }
    }

    buffers.push(msg);
    bufferTail = sliceBuffer(bufferTail, msgLength);
  }

  var total = buffers.length;
  buffers.forEach(function(buffer, i) {
    callback(exports.decodePacket(buffer, binaryType, true), i, total);
  });
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/*!
* Copyright 2017 by ChartIQ, Inc.
* All rights reserved.
*/
/* global LauncherService */
var SystemSettings = __webpack_require__(25);
var _Monitors = __webpack_require__(33);
var Monitors = new _Monitors();
var Logger = __webpack_require__(2);
const uuidv1 = __webpack_require__(68);

var allMonitors = [];
/*if (typeof fin !== "undefined") { //For Docking Tests -> removing this because Monitors are now handled bu the Monitors object. Docking tests will fail.
	fin.desktop.main(() => {
		fin.desktop.System.addEventListener("monitor-info-changed", function () {
			allMonitors = [];
			module.exports.getAllMonitors();
		});
	});
}*/

module.exports = {
	mockLogger: {
		isLogMessage: () => true,
		system: {
			info: console.info,
			debug: console.debug,
			log: console.log,
			warn: Logger.warn,
			verbose: console.log,
			error: Logger.error
		},
		start: Logger.start
	},

	Monitors: Monitors,

	/**
  * Gets the openfin version in object form.
  */
	getOpenfinVersion: function (cb) {
		return new Promise(function (resolve /*, reject*/) {
			fin.desktop.System.getVersion(ver => {
				let verArr = ver.split(".").map(Number);
				let versionObject = {
					major: verArr[0],
					chromium: verArr[1],
					minor: verArr[2],
					patch: verArr[3]
				};
				console.log(versionObject);
				if (cb) {
					cb(versionObject);
				} else {
					resolve(versionObject);
				}
			});
		});
	},
	/**
  * Given a function _that returns a value_, this method will return a thenable object.
  * **NOTE** This will not work if your function doesn't return something.
  *  <example>
  *		function myFunc(){
 			console.log('I promise that this is not a promise.');
 		 }
 	let myPromise = util.castToPromise(myFunc);
 	myPromise().then(doSomethingElse);
 	</example>
 
  */
	castToPromise: function (f) {
		return function () {
			return new Promise((resolve, reject) => {
				//Calls f, checks to see if the returned object has a `then` method. if not, it will resolve the result from the intiial function.
				const result = f.apply(null, Array.from(arguments));
				try {
					return result.then(resolve, reject);
				} catch (e) {
					if (e instanceof TypeError) {
						resolve(result);
					} else {
						reject(e);
					}
				}
			});
		};
	},
	/**
  * @introduction
  * <h2>Finsemble Utility Functions</h2>
  * @private
  * @class Utils
  */

	isPercentage: function (val) {
		if (typeof val !== "string") {
			return false;
		}
		return val.indexOf("%") !== -1;
	},

	/**
  * Gets an array of monitor descriptors. Essentially rationalizing the results of OpenFin getMonitorInfo.
  * into a single array with additional information added.
  *
  * whichMonitor is set to the secondary monitor number, or "primary" if the primary monitor.
  * position is set to a zero index, where primary is the zero position, and each non-primary increments thereafter.
  *
  * Additionally, width and height are calculated and filled in for availableRect and monitorRect.
  *
  * @param {callback-array} cb Returns a list of monitor descriptors (optional or use promise)
  */
	getAllMonitors: Monitors.getAllMonitors,

	/**
  * Retrieves a monitor descriptor given an absolute X Y on the OpenFin virtual screen
  * @param  {number} x The x position
  * @param  {number} y The y position
  * @param {callback-object}  cb Returns the monitor information from OpenFin.
  * "isPrimary" is set to true if it's the primary monitor.
  * null is returned if the x,y coordinates are beyond the bounds of the virtual screen.
  */
	getMonitorFromOpenFinXY: Monitors.getMonitorFromScaledXY,

	/**
  * Retrieves a monitor descriptor for a window. If the window straddles two monitors
  * then the monitor from the top left is provided and "straddling" flag is set to true.
  *
  * @param  {LauncherClient~windowDescriptor}   windowDescriptor A windowDescriptor
  * @param  {Function} cb               Returns a monitor descriptor (optional or use promise)
  * @returns {Promise} A promise that resolves to a monitor descriptor
  */
	getMonitorFromWindow: function (windowDescriptor, cb) {
		var x = Number.isFinite(windowDescriptor.x) ? windowDescriptor.x : windowDescriptor.defaultLeft;
		var y = Number.isFinite(windowDescriptor.y) ? windowDescriptor.y : windowDescriptor.defaultTop;
		var x2 = x + windowDescriptor.defaultWidth;
		var y2 = y + windowDescriptor.defaultHeight;
		return new Promise(function (resolve, reject) {

			// get monitor of top-left
			Monitors.getMonitorFromScaledXY(x, y, function (monitor) {
				if (!monitor) {
					console.log("getMonitorFromWindow - top-left is off screen, trying bottom right");
					// get monitor of bottom-right
					Monitors.getMonitorFromScaledXY(x2, y2, function (monitor) {
						if (!monitor) {
							console.log("getMonitorFromWindow - bottom-right is off screen, getting primary");
							// get primary monitor - add message to the monitor saying that this window isn't really on a monitor
							Monitors.getAllMonitors(function (monitors) {
								if (monitors[0]) {
									if (cb) {
										cb(monitors[0]);
									}
									resolve(monitors[0]);
								} else {
									reject(new Error("Cannot find monitor for window."));
									if (cb) {
										cb(null);
									}
								}
							});
							return;
						}
						monitor = module.exports.clone(monitor);
						var monitorRect = monitor.monitorRect;
						if (monitorRect.left < x || monitorRect.right < y) {
							monitor.straddling = true;
						}
						if (cb) {
							cb(monitor);
						}
						resolve(monitor);
					});
					return;
				}
				monitor = module.exports.clone(monitor);
				var monitorRect = monitor.monitorRect;
				if (monitorRect.right > x2 || monitorRect.bottom > y2) {
					monitor.straddling = true;
				}
				if (cb) {
					cb(monitor);
				}
				resolve(monitor);
			});
		});
	},

	/**
  * Returns a finWindow or null if not found
  * @param  {LauncherClient~windowIdentifier}   windowIdentifier A window identifier
  * @param  {Function} cb               Optional callback containing finWindow or null if not found (or use Promise)
  * @return {Promise}                    Promise that resulves to a finWindow or rejects if not found
  */
	getFinWindow: function (windowIdentifier, cb) {
		return new Promise(function (resolve, reject) {
			// Default to current window
			var myWindow = fin.desktop.Window.getCurrent();

			// Get OpenFin options (windowDescriptor) for current window
			// we need this info even if we're going to reference a different window
			myWindow.getOptions(function (options) {
				// If windowName is provided, then find that window
				if (windowIdentifier && windowIdentifier.windowName) {
					// If we didn't get a uuid from the caller, then assume
					// it's the same window as current window
					if (!windowIdentifier.uuid) {
						windowIdentifier.uuid = options.uuid;
					}
					/**
      * Try to wrap the window; if it exists, getInfo will get in
      *  to the success function. If not, it'll go into the error callback.
      */
					let remoteWindow = fin.desktop.Window.wrap(windowIdentifier.uuid, windowIdentifier.windowName);
					remoteWindow.getInfo(() => {
						if (cb) {
							cb(remoteWindow);
						}

						resolve(remoteWindow);
					}, function () {
						if (cb) {
							cb(null);
						}
						reject("Window " + windowIdentifier.windowName + " not found." + `UUID: ${windowIdentifier.uuid}`);
						console.debug("util.getFinWindow: Window " + windowIdentifier.windowName + " not found");
						return;
					});
				} else if (windowIdentifier && windowIdentifier.componentType) {
					if (typeof LauncherService !== "undefined") {
						let remoteWindow = LauncherService.componentFinder(windowIdentifier);
						if (remoteWindow) {
							resolve(remoteWindow);
							if (cb) {
								cb(remoteWindow);
							}
						} else {
							reject("util.getFinWindow: Component " + windowIdentifier.componentType + " not found.");
							if (cb) {
								cb(null);
							}
						}
					} else {
						//@TODO, get this through a remote call to Launcher service
						reject("getFinWindow by componentType is currently only operable within LaunchService");
						if (cb) {
							cb(null);
						}
					}
				} else {
					// return windowDescriptor for current window
					if (cb) {
						cb(myWindow);
					}
					resolve(myWindow);
				}
			});
		});
	},

	/**
  * Retrieves a windowDescriptor given a windowIdentifier
  * @param {LauncherClient~windowIdentifier} [windowIdentifier] The window to locate. If empty then the current window is returned.
  * @callback {function} cb Function to retrieve result (optional or use Promise)
  * @returns {Promise} A promise that resolves to a LauncherClient~windowDescriptor
  */
	getWindowDescriptor: function (windowIdentifier, cb) {
		return new Promise(function (resolve, reject) {
			module.exports.getFinWindow(windowIdentifier).then(function (finWindow) {
				finWindow.getOptions(function (options) {
					if (cb) {
						cb(options);
					}
					resolve(options);
				});
			}).catch(function (errorMessage) {
				console.warn(errorMessage);
				if (cb) {
					cb(null);
				}
				reject(errorMessage);
			});
		});
	},

	findMonitor: function (monitors, field, value) {
		for (var i = 0; i < monitors.length; i++) {
			var monitor = monitors[i];
			if (monitor[field] === value) {
				return monitor;
			}
		}
		return null;
	},
	/**
  * @param {number} commandMonitor
  * @param {array} monitors
  * @param {number} launchingMonitorPosition
  * commandMonitor, monitors, launchingMonitorPosition
  */
	getWhichMonitor: function (params, cb) {
		//First release of this method took 3 params.
		if (arguments.length > 2) {
			params = {
				commandMonitor: arguments[0],
				monitors: arguments[1],
				launchingMonitorPosition: arguments[2]
			};
			cb = null;
		}
		var monitor;
		var { commandMonitor, monitors, launchingMonitorPosition } = params;
		var isANumber = commandMonitor && commandMonitor !== "" || commandMonitor === 0;
		if (commandMonitor === "primary") {
			monitor = module.exports.findMonitor(monitors, "whichMonitor", "primary");
		} else if (commandMonitor === "next") {
			let position = launchingMonitorPosition + 1;
			if (position >= monitors.length) {
				position = 0;
			}
			monitor = monitors[position];
		} else if (commandMonitor === "previous") {
			let position = launchingMonitorPosition - 1;
			if (position < 0) {
				position = monitors.length - 1;
			}
			monitor = monitors[position];
		} else if (commandMonitor === "mine") {
			var waiting = true;
			//assuming this is always used in the launcher
			var w = activeWindows.getWindow(params.windowIdentifier.windowName);
			w.getBounds((err, bounds) => {
				Monitors.getMonitorFromScaledXY(bounds.left, bounds.top, monitor => {
					cb(monitor);
				});
			});
		} else if (isANumber) {
			if (commandMonitor >= monitors.length) {
				commandMonitor = monitors.length - 1;
			}
			monitor = monitors[commandMonitor];
		} else if (launchingMonitorPosition) {
			monitor = monitors[launchingMonitorPosition];
		}

		if (!monitor) {
			// primary if no monitor found
			monitor = monitors[0];
		}

		if (!waiting) {
			if (cb) {
				cb(monitor);
			} else {
				//maintaining backwards compatibility
				return monitor;
			}
		}
	},

	/**
  * Gets a monitorInfo based on a command. A command is the typical "monitor" param
  * @param  {string} commandMonitor   Monitor command. See {@link LauncherClient#spawn}
  * @param  {object} windowIdentifier The windowIdentifier of the calling function. Necessary to support "next","previous" an default.
  * @param {function} [cb] Optional callback
  * @returns {Promise} A promise that resolves to a monitorInfo
  */
	getMonitorFromCommand: function (commandMonitor, windowIdentifier, cb) {
		return new Promise(function (resolve /*, reject*/) {
			module.exports.getMonitor(windowIdentifier, function (monitorInfo) {
				Monitors.getAllMonitors(function (monitors) {
					let params = {
						commandMonitor: commandMonitor,
						monitors: monitors,
						launchingMonitorPosition: monitorInfo.position
					};
					module.exports.getWhichMonitor(params, function (finalMonitorInfo) {
						if (cb) {
							cb(finalMonitorInfo);
						}
						resolve(finalMonitorInfo);
					});
				});
			});
		});
	},

	/**
  * @private
  * @param {LauncherClient~windowDescriptor} windowDescriptor
  * @param {monitorDimensions} monitorDimensions
  * @returns {boolean} Whether window is on the current monitor.
  */
	windowOnMonitor: function (windowDescriptor, monitorDimensions) {
		//if right or left edge is within the window's bounds.
		if (windowDescriptor.left >= monitorDimensions.left && windowDescriptor.left < monitorDimensions.right || windowDescriptor.right <= monitorDimensions.right && windowDescriptor.right > monitorDimensions.left) {
			return true;
		}
		return false;
	},
	/**
  * Convenience function to get the monitor for the current window
  * @param {LauncerClient~windowDescriptor} [windowIdentifier] The window to find the monitor for. Current window if empty.
  * @param  {Function} cb Returns a monitor descriptor (optional or use Promise)
  * @returns {Promise} A promise that resolves to a monitor descriptor
  */
	getMonitorByDescriptor: function (windowDescriptor, cb) {
		return new Promise(function (resolve /*, reject*/) {
			module.exports.getMonitorFromWindow(windowDescriptor, function (monitor) {
				if (cb) {
					cb(monitor);
				}
				resolve(monitor);
			});
		});
	},
	/**
  * Convenience function to get the monitor for the current window
  * @param {LauncerClient~windowIdentifier} [windowIdentifier] The window to find the monitor for. Current window if empty.
  * @param  {Function} cb Returns a monitor descriptor (optional or use Promise)
  * @returns {Promise} A promise that resolves to a monitor descriptor
  */
	getMonitor: function (windowIdentifier, cb) {
		return new Promise(function (resolve, reject) {
			module.exports.getWindowDescriptor(windowIdentifier, function (windowDescriptor) {
				if (!windowDescriptor) {
					reject("util.getMonitor: Can't locate windowDescriptor.");
				} else {
					module.exports.getMonitorFromWindow(windowDescriptor, function (monitor) {
						if (cb) {
							cb(monitor);
						}
						resolve(monitor);
					});
				}
			});
		});
	},
	/**
  * Returns a windowIdentifier for the current window
  * @param {LauncherClient~windowIdentifier} cb Callback function returns windowIdentifier for this window (optional or use Promise)
  * @returns {Promise} A promise that resolves to a windowIdentifier
  */
	// @TODO, [Terry] this should be eliminated in favor of calls to windowClient.getWindowIdentifier()
	getMyWindowIdentifier: function (cb) {
		var finWindow = fin.desktop.Window.getCurrent();
		return new Promise(function (resolve) {
			finWindow.getOptions(windowDescriptor => {
				var componentType = null;

				// Figure out the component type from what was originally stored when we launched the window
				// options.customData is where our stuff is found
				var customData = windowDescriptor.customData;
				if (customData && customData.component) {
					componentType = customData.component.type;
				}
				var windowIdentifier = {
					windowName: finWindow.name,
					uuid: finWindow.uuid,
					componentType: componentType
				};

				if (cb) {
					cb(windowIdentifier);
				}
				resolve(windowIdentifier);
			});
		});
	},
	/**
  *	@returns {string} Transforms an array of strings into a camelcased string.
  * @memberof Utils
  */
	camelCase: function () {
		var str = "";
		for (var i = 0; i < arguments.length; i++) {
			str += " " + arguments[i];
		}
		return str.replace(/\s(.)/g, function ($1) {
			return $1.toUpperCase();
		}).replace(/\s/g, "").replace(/^(.)/, function ($1) {
			return $1.toLowerCase();
		});
	},

	/**
  * Convenience method for cloning an object.
  * @param  {any} from The thing you want to copy
  * @param {any} to Where you want your copy to end up.
  * @return {any} to Where you want your copy gwe end up.
  */
	clone: function (from, to) {
		if (from === null || typeof from !== "object") {
			return from;
		}
		// if (from.constructor != Object && from.constructor != Array) return from;
		if (from.constructor == Date || from.constructor == RegExp || from.constructor == Function || from.constructor == String || from.constructor == Number || from.constructor == Boolean) {
			return new from.constructor(from);
		}

		to = to || new from.constructor();

		for (var n in from) {
			to[n] = typeof to[n] === "undefined" ? module.exports.clone(from[n], null) : to[n];
		}

		return to;
	},

	getUniqueName: function (baseName) {
		if (!baseName) {
			baseName = "RouterClient";
		}
		var uuid = baseName + "-" + Math.floor(Math.random() * 100) + "-" + Math.floor(Math.random() * 10000);
		return uuid;
	},

	guuid: function () {
		return uuidv1(); // return global uuid
	},

	injectJS(path, cb) {
		//Inject a script tag with the path given. Once the script is loaded, it executes the callback.
		var script = document.createElement("script");
		script.onload = cb;
		script.type = "text/javascript";
		script.async = true;
		script.src = path;
		var head = document.getElementsByTagName("head")[0];
		var firstScript = head.getElementsByTagName("script")[0];
		head.insertBefore(script, firstScript);
	},

	/**
  * This will either open a component with the shared data or publish the shared data using the linker client if the window is linked
  * @experimental
  *
  * @param {object} params
  * @param {object} [params.data]
  * @param {bool} [params.publishOnly] if the component is linked, this will only publish the data, not force open a window if it does not exist. If the component is not linked, this is ignored.
  * @param {function} [params.multipleOpenerHandler] Optional. This function is called with on object that contains a map of componentTypes to the data types they can open. It must return a list of components to be opened. If no handler is provided, the first found component will be chosen. It is possible that the component opened may not handle all the data provided.
  * @param {function} cb callback invoked with action taken.
  *
  * @since 1.5: multipleOpenerHandler and callback added
  *
  */
	openSharedData: function (params, cb) {
		var launcherClient = FSBL.Clients.LauncherClient;
		var linkerClient = FSBL.Clients.LinkerClient;
		//If no handler is specified to deal with multiple components, use the first found
		if (!params.multipleOpenerHandler) params.multipleOpenerHandler = function (componentsMappedToData) {
			// find the component that can open the most amount of data
			var maxDataTypesOpened = 0;
			var componentToOpen;
			for (var componentType of Object.keys(componentsMappedToData)) {
				if (componentsMappedToData[componentType].length > maxDataTypesOpened) {
					componentToOpen = componentType;
					maxDataTypesOpened = componentsMappedToData[componentType].length;
				}
			}
			return [componentToOpen];
		};

		var errors = [];
		var componentsMappedToData = {};

		// Loop through the data
		launcherClient.getComponentsThatCanReceiveDataTypes({ dataTypes: Object.keys(params.data) }, function (err, dataTypeComponentMap) {
			for (var dataType of Object.keys(dataTypeComponentMap)) {
				if (!dataTypeComponentMap[dataType].componentTypes.length) {
					var error = "No Components Available to Handle the type: " + dataType;
					errors.push(error);
					Logger.system.error(error);
				} else {
					for (var component of dataTypeComponentMap[dataType].componentTypes) {
						if (!componentsMappedToData[component]) {
							componentsMappedToData[component] = [dataType];
						} else componentsMappedToData[component].push(dataType);
					}
				}
			}

			// What if multiple components need to be opened?
			var componentsToOpen = Object.keys(componentsMappedToData);
			if (componentsToOpen.length) {
				if (componentsToOpen.length > 1) {
					componentsToOpen = params.multipleOpenerHandler(componentsMappedToData);
				}
				var linkerChannels = Object.keys(linkerClient.channels);
				if (linkerChannels.length) {
					//if linked
					var linkedWindows = linkerClient.getLinkedComponents({ componentTypes: componentsToOpen, windowIdentifier: linkerClient.windowIdentifier() });
					// TODO: deal with the case if not all componentTypes that need to be opened are linked
					if (linkedWindows.length || params.publishOnly) {
						// If pubishOnly is true then just publish, not spawn
						linkerClient.publish({
							dataType: "Finsemble.DragAndDropClient",
							data: params.data
						});
						if (cb) cb(errors.length ? errors : null, "Data published");
					} else {
						// spawn
						for (let component of componentsToOpen) {
							launcherClient.spawn(component, {
								data: {
									sharedData: params.data,
									linker: {
										channels: linkerChannels
									}
								},
								addToWorkspace: true
							});
						}
						if (cb) cb(errors.length ? errors : null, "Linked Window(s) spawned with data");
					}
				} else {
					if (!params.publishOnly) {
						for (let component of componentsToOpen) {
							launcherClient.spawn(component, {
								data: {
									sharedData: params.data
								},
								addToWorkspace: true
							});
						}
						if (cb) cb(errors.length ? errors : null, "New Window(s) spawned with data");
					}
				}
			} else {
				if (cb) cb(errors.length ? errors : null, null);
			}
		});
	}
};

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\common\\util.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\common\\util.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/*!
* Copyright 2017 by ChartIQ, Inc.
* All rights reserved.
*/
var SystemSettings = __webpack_require__(25);

/**
 * @introduction
 * <h2>Finsemble Vaidate Functions</h2>
 *
 */

/**
 * Constructor for Finsemble argment validator.
 *
 * Validatation logic is ONLY RAN when SystemSettings diagnotics level is set to debug (i.e. 4 or above)
 * A failed validation will generate a warning message, but nothing more; however application logic can check the validation results.
 *
 * @param {string} console Finsemble console object used to display messages and check diagnotic level
 * @constructor
 * @shouldBePublished false
 */
var Validate = function () {

	function warningMsg(paramDescript, thisArg, thisArgType) {

		function getErrorObject() {
			try {
				throw Error('');
			} catch (err) {
				return err;
			}
		}

		var err = getErrorObject();

		var caller_line1 = err.stack.split("\n")[5];
		var index1 = caller_line1.indexOf("at ");
		var msgPart1 = caller_line1.slice(index1 + 2, caller_line1.length);

		var caller_line2 = err.stack.split("\n")[6];
		var index2 = caller_line2.indexOf("at ");
		var msgPart2 = caller_line2.slice(index2 + 2, caller_line2.length);

		console.warn("parameter validation failed: parameter " + paramDescript + " is of type '" + typeof thisArg + "' but should be of type '" + thisArgType + "' in" + msgPart1 + " called by" + msgPart2);
	}

	/**
  * Confirm parameters are valid. A variable number of parameter pairs are supported.
  * @param {any} param1 is arg to validate
  * @param {string} paramType1 is required type for parameter (if '=' suffix then parameter is optional). "any" represents any type (but not "undefined").
  * @param {any=} param2 is next arg to validate
  * @param {string=} paramType2 os required type for next arg
  * @return {boolean} returns turn if parameter list is valid; otherwise, false.
  *
  * @example
  *
  * var validate = new Validate(console);
  * validate.args(name, "string", age, "number")
  *
  * validate.args(topic, "string", initialState, "object="); // with optional paramter (represented by "=")
  *
  * validate.args(topic, "string", initialState, "any"); // with "any" type
  *
  * validate.args(subscribeIDStruct, "object") && validate.args(subscribeIDStruct.subscribeID, "string"); // only do second varidate if first test successful
  *
  * validate.args(subscribeIDStruct, "object", subscribeIDStruct.subscribeID, "string"); // only check second parm if first validated successful
  *
  * validate.args(topic, "any", initialState, "object=", params, "object="); // depending on logic, can break into seperate validations
  * params = params || {};
  * validate.args(params.subscribeCallback, "function=", params.publishCallback, "function=", params.unsubscribeCallback, "function=");
  */
	this.args = function (param1, paramType1, param2, paramType2 /*.....optional more paramter pairs....*/) {
		var returnCode = true;
		if (SystemSettings.validationEnabled()) {
			var parmCount = arguments.length;
			if ((parmCount + 1) % 2 !== 0) {
				// parameters must come in pairs (i.e. even number)
				for (var i = 0; i < parmCount; i = i + 2) {
					var optionalArg = false;
					var thisArg = arguments[i];
					var thisArgType = arguments[i + 1];
					if (thisArgType.slice(-1) === "=") {
						// if last char is "=" then optional argument
						thisArgType = thisArgType.slice(0, -1);
						optionalArg = true;
					}
					if (typeof thisArg !== thisArgType) {
						// confirms basic case -- the required type
						if (!optionalArg || typeof thisArg !== "undefined") {
							// but optional parms can be undefined
							if (typeof thisArg === "undefined" || thisArgType !== "any") {
								// but "any" type doesn't have to match but can't be undefined
								var parameterPosition = i / 2 + 1;
								warningMsg(parameterPosition, thisArg, thisArgType);
								returnCode = false;
								break;
							}
						}
					}
				}
			} else {
				console.warn("validate.args requires even number of parameters: " + JSON.stringify(arguments));
			}
		}
		return returnCode; // always return turn when validation is disable due debug lebel turned off
	};

	/**
  * Confirm parameters are valid. args2() has the same functionality as args() except a third "parameter description" is passed in for each argument varified
  * Typically this for passing in a properties name for better diagnostic messages when varifying object properties.
  * A variable number of parameter "triples"" are supported.
  *
  * @param {string} paramName1 is descriptive name of param1 (for diagnostic message)
  * @param {any} param1 is arg to validate
  * @param {string} paramType1 is required type for parameter (if '=' suffix then parameter is optional). "any" represents any type (but not "undefined").
  * @param {string} paramName2 is descriptive name of param1 (for diagnostic message)
  * @param {any} param2 is arg to validate
  * @param {string} paramType2 is required type for parameter (if '=' suffix then parameter is optional). "any" represents any type (but not "undefined").
  * @return {boolean} returns turn if parameter list is valid; otherwise, false.
  *
  * @example
  *
  * var validate = new Utils.Validate(console);
  * validate.args2("record.name", record.name, "string", "record.age", age, "number")
  *
  * // common case using args() and args2() together
  * validate.args(topic, "any", initialState, "object=", params, "object=") &&
  *   validate.args2("params.subscribeCallback", params.subscribeCallback, "function=", "params.publishCallback", params.publishCallback, "function=") &&
  *   validate.args2("params.unsubscribeCallback", params.unsubscribeCallback, "function=");
  */
	this.args2 = function (paramName1, param1, paramType1, paramName2, param2, paramType2 /*.....optional, more paramter sets of three....*/) {

		var returnCode = true;
		if (SystemSettings.validationEnabled()) {
			var parmCount = arguments.length;
			if ((parmCount + 1) % 3 !== 0) {
				// parameters must come in sets of three
				for (var i = 0; i < parmCount; i = i + 3) {
					var optionalArg = false;
					var thisArgName = arguments[i];
					var thisArg = arguments[i + 1];
					var thisArgType = arguments[i + 2];
					if (thisArgType.slice(-1) === "=") {
						// if last char is "=" then optional argument
						thisArgType = thisArgType.slice(0, -1);
						optionalArg = true;
					}
					if (typeof thisArg !== thisArgType) {
						// confirms basic case -- the required type
						if (!optionalArg || typeof thisArg !== "undefined") {
							// but optional parms can be undefined
							if (typeof thisArg === "undefined" || thisArgType !== "any") {
								// but "any" type doesn't have to match but can't be undefined
								var parameterPosition = i / 2 + 1;
								warningMsg(thisArgName, thisArg, thisArgType);
								returnCode = false;
								break;
							}
						}
					}
				}
			} else {
				console.warn("validate.args requires even number of parameters: " + JSON.stringify(arguments));
			}
		}
		return returnCode; // always return turn when validation is disable due debug lebel turned off
	};
};

module.exports = new Validate();

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\common\\validate.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\common\\validate.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Expose `Emitter`.
 */

if (true) {
  module.exports = Emitter;
}

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks['$' + event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks['$' + event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }
  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1)
    , callbacks = this._callbacks['$' + event];

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks['$' + event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/*!
* Copyright 2017 by ChartIQ, Inc.
* All rights reserved.
*/
var RouterClient = __webpack_require__(3);
var Validate = __webpack_require__(7); // Finsemble args validator
var Logger = __webpack_require__(2);
var FinsembleWindow = __webpack_require__(72);

/**
 * @introduction
 * <h2>Base Client</h2>
 * The Base Client is inherited by every client to provide common functionality to the clients. Clients communicate their status to each other through the Router and receive service status from the service manager. Once all dependecies are met, either client or service, the client's `onReady` method is fired.
 * @constructor
 * @param {Object} params
 * @param {Function} params.onReady - A function to be called after the client has initialized.
 * @param {String} params.name - The name of the client
 * @shouldBePublished false
 @example
	var BaseClient = require("./baseClient");
	var NewClient = function (params) {
		BaseClient.call(this, params);
		var self = this;

		return this;
	};

	var clientInstance = new NewClient({
		onReady: function (cb) {
			Logger.system.log("NewClient Online");
			cb();
		},
		name:"NewClient"
	});
	clientInstance.requiredServices = [REPLACE_THIS_ARRAY_WITH_DEPENENCIES];
	clientInstance.initialize();
	module.exports = clientInstance;
 */
const FSBLDependencyManager = __webpack_require__(20);
var BaseClient = function (params) {
	Validate.args(params, "object=");
	var self = this;
	var status = "offline";
	var onReady;
	this.startupTime = 0;
	if (params) {
		if (params.onReady) {
			onReady = params.onReady;
		}
		this.name = params.name;
	}
	this.initialized = false;
	this.startupDependencies = params.startupDependencies || {
		services: [],
		clients: []
	};
	/**
  * Reference to the RouterClient
  *  @type {Object}
  */
	this.routerClient = RouterClient;

	/**
  * Gets the current openfin window - stays here for backward compatiblity
  * @type {object}
  */
	this.finWindow = null;

	/**
  * Gets the current window
  * @type {object}
  */
	this.finsembleWindow = null;

	/**
  * Gets the cusrrent window name
  *  @type {string}
  */
	this.windowName = ""; //The current window

	/**
  * Services the are required to be online before the service can come online
  *  @type {array}
  */
	this.requiredServices = [];
	/**
  * Clients the are required to be online before the service can come online
  *  @type {array}
  */
	this.requiredClients = [];

	/**
  * Queue of functions to process once the client goes online.
  */
	this.clientReadyQueue = [];

	/**
  * Iterates through the clientReadyQueue, invoking each call to `.ready`.
  */
	this.processClientReadyQueue = function () {
		for (var i = 0; i < this.clientReadyQueue.length; i++) {
			let callback = this.clientReadyQueue[i];
			if (typeof callback === "function") {
				callback();
			}
		}
		this.clientReadyQueue = [];
	};

	/**
  * Method for adding callbacks to each client.
  */
	this.onReady = function (cb) {
		this.clientReadyQueue.push(cb);
		if (status === "online") {
			this.processClientReadyQueue();
		}
	};
	//Check to see if the client can come online. We check this against the required services and clients
	this.setClientOnline = function () {
		var self = this;
		status = "online";
		let onReadyMessage = `StARTUP:CLIENT ONLINE:${self.finWindow.name}:${self.name}`;
		self.startupTime = performance.now() - self.startupTime;
		if (onReady) {
			onReady(function () {
				Logger.system.debug(onReadyMessage);
				self.processClientReadyQueue();
				FSBLDependencyManager.setClientOnline(self.name);
			});
		} else {
			Logger.system.debug(onReadyMessage);
			self.processClientReadyQueue();
			FSBLDependencyManager.setClientOnline(self.name);
		}
	};

	/**
 * Starts the process of checking services and any other function required before the client can come online
 */
	this.initialize = function (cb = Function.prototype) {
		if (self.initialized) {
			return;
		}
		self.initialized = true;
		self.setClientOnline = self.setClientOnline.bind(self);
		self.startupTime = performance.now();
		self.routerClient.onReady(function () {
			// TODO, [terry] allow the finsembleWindow to be passed in, so we can support proxying windowClient in RPC
			self.finWindow = fin.desktop.Window.getCurrent();
			self.windowName = self.finWindow.name;
			self.finsembleWindow = FinsembleWindow.wrap({
				finWindow: self.finWindow,
				name: self.finWindow.name
			});
			Logger.system.debug("Baseclient Init Router Ready", self.name);
			FSBLDependencyManager.startup.waitFor({
				services: self.startupDependencies.services || [],
				clients: self.startupDependencies.clients || []
			}, () => {
				cb();
				self.setClientOnline();
			});
		});
	};

	this.onClose = function () {};
};

module.exports = BaseClient;

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\clients\\baseClient.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\clients\\baseClient.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 11 */
/***/ (function(module, exports) {


module.exports = function(a, b){
  var fn = function(){};
  fn.prototype = b.prototype;
  a.prototype = new fn;
  a.prototype.constructor = a;
};

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(setImmediate, process, global, module) {(function (global, factory) {
   true ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global.async = global.async || {})));
}(this, (function (exports) { 'use strict';

function slice(arrayLike, start) {
    start = start|0;
    var newLen = Math.max(arrayLike.length - start, 0);
    var newArr = Array(newLen);
    for(var idx = 0; idx < newLen; idx++)  {
        newArr[idx] = arrayLike[start + idx];
    }
    return newArr;
}

/**
 * Creates a continuation function with some arguments already applied.
 *
 * Useful as a shorthand when combined with other control flow functions. Any
 * arguments passed to the returned function are added to the arguments
 * originally passed to apply.
 *
 * @name apply
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {Function} fn - The function you want to eventually apply all
 * arguments to. Invokes with (arguments...).
 * @param {...*} arguments... - Any number of arguments to automatically apply
 * when the continuation is called.
 * @returns {Function} the partially-applied function
 * @example
 *
 * // using apply
 * async.parallel([
 *     async.apply(fs.writeFile, 'testfile1', 'test1'),
 *     async.apply(fs.writeFile, 'testfile2', 'test2')
 * ]);
 *
 *
 * // the same process without using apply
 * async.parallel([
 *     function(callback) {
 *         fs.writeFile('testfile1', 'test1', callback);
 *     },
 *     function(callback) {
 *         fs.writeFile('testfile2', 'test2', callback);
 *     }
 * ]);
 *
 * // It's possible to pass any number of additional arguments when calling the
 * // continuation:
 *
 * node> var fn = async.apply(sys.puts, 'one');
 * node> fn('two', 'three');
 * one
 * two
 * three
 */
var apply = function(fn/*, ...args*/) {
    var args = slice(arguments, 1);
    return function(/*callArgs*/) {
        var callArgs = slice(arguments);
        return fn.apply(null, args.concat(callArgs));
    };
};

var initialParams = function (fn) {
    return function (/*...args, callback*/) {
        var args = slice(arguments);
        var callback = args.pop();
        fn.call(this, args, callback);
    };
};

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

var hasSetImmediate = typeof setImmediate === 'function' && setImmediate;
var hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';

function fallback(fn) {
    setTimeout(fn, 0);
}

function wrap(defer) {
    return function (fn/*, ...args*/) {
        var args = slice(arguments, 1);
        defer(function () {
            fn.apply(null, args);
        });
    };
}

var _defer;

if (hasSetImmediate) {
    _defer = setImmediate;
} else if (hasNextTick) {
    _defer = process.nextTick;
} else {
    _defer = fallback;
}

var setImmediate$1 = wrap(_defer);

/**
 * Take a sync function and make it async, passing its return value to a
 * callback. This is useful for plugging sync functions into a waterfall,
 * series, or other async functions. Any arguments passed to the generated
 * function will be passed to the wrapped function (except for the final
 * callback argument). Errors thrown will be passed to the callback.
 *
 * If the function passed to `asyncify` returns a Promise, that promises's
 * resolved/rejected state will be used to call the callback, rather than simply
 * the synchronous return value.
 *
 * This also means you can asyncify ES2017 `async` functions.
 *
 * @name asyncify
 * @static
 * @memberOf module:Utils
 * @method
 * @alias wrapSync
 * @category Util
 * @param {Function} func - The synchronous function, or Promise-returning
 * function to convert to an {@link AsyncFunction}.
 * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be
 * invoked with `(args..., callback)`.
 * @example
 *
 * // passing a regular synchronous function
 * async.waterfall([
 *     async.apply(fs.readFile, filename, "utf8"),
 *     async.asyncify(JSON.parse),
 *     function (data, next) {
 *         // data is the result of parsing the text.
 *         // If there was a parsing error, it would have been caught.
 *     }
 * ], callback);
 *
 * // passing a function returning a promise
 * async.waterfall([
 *     async.apply(fs.readFile, filename, "utf8"),
 *     async.asyncify(function (contents) {
 *         return db.model.create(contents);
 *     }),
 *     function (model, next) {
 *         // `model` is the instantiated model object.
 *         // If there was an error, this function would be skipped.
 *     }
 * ], callback);
 *
 * // es2017 example, though `asyncify` is not needed if your JS environment
 * // supports async functions out of the box
 * var q = async.queue(async.asyncify(async function(file) {
 *     var intermediateStep = await processFile(file);
 *     return await somePromise(intermediateStep)
 * }));
 *
 * q.push(files);
 */
function asyncify(func) {
    return initialParams(function (args, callback) {
        var result;
        try {
            result = func.apply(this, args);
        } catch (e) {
            return callback(e);
        }
        // if result is Promise object
        if (isObject(result) && typeof result.then === 'function') {
            result.then(function(value) {
                invokeCallback(callback, null, value);
            }, function(err) {
                invokeCallback(callback, err.message ? err : new Error(err));
            });
        } else {
            callback(null, result);
        }
    });
}

function invokeCallback(callback, error, value) {
    try {
        callback(error, value);
    } catch (e) {
        setImmediate$1(rethrow, e);
    }
}

function rethrow(error) {
    throw error;
}

var supportsSymbol = typeof Symbol === 'function';

function isAsync(fn) {
    return supportsSymbol && fn[Symbol.toStringTag] === 'AsyncFunction';
}

function wrapAsync(asyncFn) {
    return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;
}

function applyEach$1(eachfn) {
    return function(fns/*, ...args*/) {
        var args = slice(arguments, 1);
        var go = initialParams(function(args, callback) {
            var that = this;
            return eachfn(fns, function (fn, cb) {
                wrapAsync(fn).apply(that, args.concat(cb));
            }, callback);
        });
        if (args.length) {
            return go.apply(this, args);
        }
        else {
            return go;
        }
    };
}

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Built-in value references. */
var Symbol$1 = root.Symbol;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag$1),
      tag = value[symToStringTag$1];

  try {
    value[symToStringTag$1] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag$1] = tag;
    } else {
      delete value[symToStringTag$1];
    }
  }
  return result;
}

/** Used for built-in method references. */
var objectProto$1 = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString$1 = objectProto$1.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString$1.call(value);
}

/** `Object#toString` result references. */
var nullTag = '[object Null]';
var undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]';
var funcTag = '[object Function]';
var genTag = '[object GeneratorFunction]';
var proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

// A temporary value used to identify if the loop should be broken.
// See #1064, #1293
var breakLoop = {};

/**
 * This method returns `undefined`.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Util
 * @example
 *
 * _.times(2, _.noop);
 * // => [undefined, undefined]
 */
function noop() {
  // No operation performed.
}

function once(fn) {
    return function () {
        if (fn === null) return;
        var callFn = fn;
        fn = null;
        callFn.apply(this, arguments);
    };
}

var iteratorSymbol = typeof Symbol === 'function' && Symbol.iterator;

var getIterator = function (coll) {
    return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();
};

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

/** Used for built-in method references. */
var objectProto$3 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$2 = objectProto$3.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto$3.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty$2.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER$1 = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER$1 : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

/** `Object#toString` result references. */
var argsTag$1 = '[object Arguments]';
var arrayTag = '[object Array]';
var boolTag = '[object Boolean]';
var dateTag = '[object Date]';
var errorTag = '[object Error]';
var funcTag$1 = '[object Function]';
var mapTag = '[object Map]';
var numberTag = '[object Number]';
var objectTag = '[object Object]';
var regexpTag = '[object RegExp]';
var setTag = '[object Set]';
var stringTag = '[object String]';
var weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]';
var dataViewTag = '[object DataView]';
var float32Tag = '[object Float32Array]';
var float64Tag = '[object Float64Array]';
var int8Tag = '[object Int8Array]';
var int16Tag = '[object Int16Array]';
var int32Tag = '[object Int32Array]';
var uint8Tag = '[object Uint8Array]';
var uint8ClampedTag = '[object Uint8ClampedArray]';
var uint16Tag = '[object Uint16Array]';
var uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag$1] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

/** Detect free variable `exports`. */
var freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports$1 && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule$1 && freeModule$1.require && freeModule$1.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

/** Used for built-in method references. */
var objectProto$2 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$1 = objectProto$2.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty$1.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

/** Used for built-in method references. */
var objectProto$5 = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$5;

  return value === proto;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

/** Used for built-in method references. */
var objectProto$4 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$3 = objectProto$4.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty$3.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

function createArrayIterator(coll) {
    var i = -1;
    var len = coll.length;
    return function next() {
        return ++i < len ? {value: coll[i], key: i} : null;
    }
}

function createES2015Iterator(iterator) {
    var i = -1;
    return function next() {
        var item = iterator.next();
        if (item.done)
            return null;
        i++;
        return {value: item.value, key: i};
    }
}

function createObjectIterator(obj) {
    var okeys = keys(obj);
    var i = -1;
    var len = okeys.length;
    return function next() {
        var key = okeys[++i];
        return i < len ? {value: obj[key], key: key} : null;
    };
}

function iterator(coll) {
    if (isArrayLike(coll)) {
        return createArrayIterator(coll);
    }

    var iterator = getIterator(coll);
    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);
}

function onlyOnce(fn) {
    return function() {
        if (fn === null) throw new Error("Callback was already called.");
        var callFn = fn;
        fn = null;
        callFn.apply(this, arguments);
    };
}

function _eachOfLimit(limit) {
    return function (obj, iteratee, callback) {
        callback = once(callback || noop);
        if (limit <= 0 || !obj) {
            return callback(null);
        }
        var nextElem = iterator(obj);
        var done = false;
        var running = 0;
        var looping = false;

        function iterateeCallback(err, value) {
            running -= 1;
            if (err) {
                done = true;
                callback(err);
            }
            else if (value === breakLoop || (done && running <= 0)) {
                done = true;
                return callback(null);
            }
            else if (!looping) {
                replenish();
            }
        }

        function replenish () {
            looping = true;
            while (running < limit && !done) {
                var elem = nextElem();
                if (elem === null) {
                    done = true;
                    if (running <= 0) {
                        callback(null);
                    }
                    return;
                }
                running += 1;
                iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));
            }
            looping = false;
        }

        replenish();
    };
}

/**
 * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name eachOfLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.eachOf]{@link module:Collections.eachOf}
 * @alias forEachOfLimit
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each
 * item in `coll`. The `key` is the item's key, or index in the case of an
 * array.
 * Invoked with (item, key, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 */
function eachOfLimit(coll, limit, iteratee, callback) {
    _eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);
}

function doLimit(fn, limit) {
    return function (iterable, iteratee, callback) {
        return fn(iterable, limit, iteratee, callback);
    };
}

// eachOf implementation optimized for array-likes
function eachOfArrayLike(coll, iteratee, callback) {
    callback = once(callback || noop);
    var index = 0,
        completed = 0,
        length = coll.length;
    if (length === 0) {
        callback(null);
    }

    function iteratorCallback(err, value) {
        if (err) {
            callback(err);
        } else if ((++completed === length) || value === breakLoop) {
            callback(null);
        }
    }

    for (; index < length; index++) {
        iteratee(coll[index], index, onlyOnce(iteratorCallback));
    }
}

// a generic version of eachOf which can handle array, object, and iterator cases.
var eachOfGeneric = doLimit(eachOfLimit, Infinity);

/**
 * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument
 * to the iteratee.
 *
 * @name eachOf
 * @static
 * @memberOf module:Collections
 * @method
 * @alias forEachOf
 * @category Collection
 * @see [async.each]{@link module:Collections.each}
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each
 * item in `coll`.
 * The `key` is the item's key, or index in the case of an array.
 * Invoked with (item, key, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @example
 *
 * var obj = {dev: "/dev.json", test: "/test.json", prod: "/prod.json"};
 * var configs = {};
 *
 * async.forEachOf(obj, function (value, key, callback) {
 *     fs.readFile(__dirname + value, "utf8", function (err, data) {
 *         if (err) return callback(err);
 *         try {
 *             configs[key] = JSON.parse(data);
 *         } catch (e) {
 *             return callback(e);
 *         }
 *         callback();
 *     });
 * }, function (err) {
 *     if (err) console.error(err.message);
 *     // configs is now a map of JSON data
 *     doSomethingWith(configs);
 * });
 */
var eachOf = function(coll, iteratee, callback) {
    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;
    eachOfImplementation(coll, wrapAsync(iteratee), callback);
};

function doParallel(fn) {
    return function (obj, iteratee, callback) {
        return fn(eachOf, obj, wrapAsync(iteratee), callback);
    };
}

function _asyncMap(eachfn, arr, iteratee, callback) {
    callback = callback || noop;
    arr = arr || [];
    var results = [];
    var counter = 0;
    var _iteratee = wrapAsync(iteratee);

    eachfn(arr, function (value, _, callback) {
        var index = counter++;
        _iteratee(value, function (err, v) {
            results[index] = v;
            callback(err);
        });
    }, function (err) {
        callback(err, results);
    });
}

/**
 * Produces a new collection of values by mapping each value in `coll` through
 * the `iteratee` function. The `iteratee` is called with an item from `coll`
 * and a callback for when it has finished processing. Each of these callback
 * takes 2 arguments: an `error`, and the transformed item from `coll`. If
 * `iteratee` passes an error to its callback, the main `callback` (for the
 * `map` function) is immediately called with the error.
 *
 * Note, that since this function applies the `iteratee` to each item in
 * parallel, there is no guarantee that the `iteratee` functions will complete
 * in order. However, the results array will be in the same order as the
 * original `coll`.
 *
 * If `map` is passed an Object, the results will be an Array.  The results
 * will roughly be in the order of the original Objects' keys (but this can
 * vary across JavaScript engines).
 *
 * @name map
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with the transformed item.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Results is an Array of the
 * transformed items from the `coll`. Invoked with (err, results).
 * @example
 *
 * async.map(['file1','file2','file3'], fs.stat, function(err, results) {
 *     // results is now an array of stats for each file
 * });
 */
var map = doParallel(_asyncMap);

/**
 * Applies the provided arguments to each function in the array, calling
 * `callback` after all functions have completed. If you only provide the first
 * argument, `fns`, then it will return a function which lets you pass in the
 * arguments as if it were a single function call. If more arguments are
 * provided, `callback` is required while `args` is still optional.
 *
 * @name applyEach
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array|Iterable|Object} fns - A collection of {@link AsyncFunction}s
 * to all call with the same arguments
 * @param {...*} [args] - any number of separate arguments to pass to the
 * function.
 * @param {Function} [callback] - the final argument should be the callback,
 * called when all functions have completed processing.
 * @returns {Function} - If only the first argument, `fns`, is provided, it will
 * return a function which lets you pass in the arguments as if it were a single
 * function call. The signature is `(..args, callback)`. If invoked with any
 * arguments, `callback` is required.
 * @example
 *
 * async.applyEach([enableSearch, updateSchema], 'bucket', callback);
 *
 * // partial application example:
 * async.each(
 *     buckets,
 *     async.applyEach([enableSearch, updateSchema]),
 *     callback
 * );
 */
var applyEach = applyEach$1(map);

function doParallelLimit(fn) {
    return function (obj, limit, iteratee, callback) {
        return fn(_eachOfLimit(limit), obj, wrapAsync(iteratee), callback);
    };
}

/**
 * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.
 *
 * @name mapLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.map]{@link module:Collections.map}
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with the transformed item.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Results is an array of the
 * transformed items from the `coll`. Invoked with (err, results).
 */
var mapLimit = doParallelLimit(_asyncMap);

/**
 * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.
 *
 * @name mapSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.map]{@link module:Collections.map}
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with the transformed item.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Results is an array of the
 * transformed items from the `coll`. Invoked with (err, results).
 */
var mapSeries = doLimit(mapLimit, 1);

/**
 * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.
 *
 * @name applyEachSeries
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.applyEach]{@link module:ControlFlow.applyEach}
 * @category Control Flow
 * @param {Array|Iterable|Object} fns - A collection of {@link AsyncFunction}s to all
 * call with the same arguments
 * @param {...*} [args] - any number of separate arguments to pass to the
 * function.
 * @param {Function} [callback] - the final argument should be the callback,
 * called when all functions have completed processing.
 * @returns {Function} - If only the first argument is provided, it will return
 * a function which lets you pass in the arguments as if it were a single
 * function call.
 */
var applyEachSeries = applyEach$1(mapSeries);

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while ((fromRight ? index-- : ++index < length)) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */
function baseIsNaN(value) {
  return value !== value;
}

/**
 * A specialized version of `_.indexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function strictIndexOf(array, value, fromIndex) {
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOf(array, value, fromIndex) {
  return value === value
    ? strictIndexOf(array, value, fromIndex)
    : baseFindIndex(array, baseIsNaN, fromIndex);
}

/**
 * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on
 * their requirements. Each function can optionally depend on other functions
 * being completed first, and each function is run as soon as its requirements
 * are satisfied.
 *
 * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence
 * will stop. Further tasks will not execute (so any other functions depending
 * on it will not run), and the main `callback` is immediately called with the
 * error.
 *
 * {@link AsyncFunction}s also receive an object containing the results of functions which
 * have completed so far as the first argument, if they have dependencies. If a
 * task function has no dependencies, it will only be passed a callback.
 *
 * @name auto
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Object} tasks - An object. Each of its properties is either a
 * function or an array of requirements, with the {@link AsyncFunction} itself the last item
 * in the array. The object's key of a property serves as the name of the task
 * defined by that property, i.e. can be used when specifying requirements for
 * other tasks. The function receives one or two arguments:
 * * a `results` object, containing the results of the previously executed
 *   functions, only passed if the task has any dependencies,
 * * a `callback(err, result)` function, which must be called when finished,
 *   passing an `error` (which can be `null`) and the result of the function's
 *   execution.
 * @param {number} [concurrency=Infinity] - An optional `integer` for
 * determining the maximum number of tasks that can be run in parallel. By
 * default, as many as possible.
 * @param {Function} [callback] - An optional callback which is called when all
 * the tasks have been completed. It receives the `err` argument if any `tasks`
 * pass an error to their callback. Results are always returned; however, if an
 * error occurs, no further `tasks` will be performed, and the results object
 * will only contain partial results. Invoked with (err, results).
 * @returns undefined
 * @example
 *
 * async.auto({
 *     // this function will just be passed a callback
 *     readData: async.apply(fs.readFile, 'data.txt', 'utf-8'),
 *     showData: ['readData', function(results, cb) {
 *         // results.readData is the file's contents
 *         // ...
 *     }]
 * }, callback);
 *
 * async.auto({
 *     get_data: function(callback) {
 *         console.log('in get_data');
 *         // async code to get some data
 *         callback(null, 'data', 'converted to array');
 *     },
 *     make_folder: function(callback) {
 *         console.log('in make_folder');
 *         // async code to create a directory to store a file in
 *         // this is run at the same time as getting the data
 *         callback(null, 'folder');
 *     },
 *     write_file: ['get_data', 'make_folder', function(results, callback) {
 *         console.log('in write_file', JSON.stringify(results));
 *         // once there is some data and the directory exists,
 *         // write the data to a file in the directory
 *         callback(null, 'filename');
 *     }],
 *     email_link: ['write_file', function(results, callback) {
 *         console.log('in email_link', JSON.stringify(results));
 *         // once the file is written let's email a link to it...
 *         // results.write_file contains the filename returned by write_file.
 *         callback(null, {'file':results.write_file, 'email':'user@example.com'});
 *     }]
 * }, function(err, results) {
 *     console.log('err = ', err);
 *     console.log('results = ', results);
 * });
 */
var auto = function (tasks, concurrency, callback) {
    if (typeof concurrency === 'function') {
        // concurrency is optional, shift the args.
        callback = concurrency;
        concurrency = null;
    }
    callback = once(callback || noop);
    var keys$$1 = keys(tasks);
    var numTasks = keys$$1.length;
    if (!numTasks) {
        return callback(null);
    }
    if (!concurrency) {
        concurrency = numTasks;
    }

    var results = {};
    var runningTasks = 0;
    var hasError = false;

    var listeners = Object.create(null);

    var readyTasks = [];

    // for cycle detection:
    var readyToCheck = []; // tasks that have been identified as reachable
    // without the possibility of returning to an ancestor task
    var uncheckedDependencies = {};

    baseForOwn(tasks, function (task, key) {
        if (!isArray(task)) {
            // no dependencies
            enqueueTask(key, [task]);
            readyToCheck.push(key);
            return;
        }

        var dependencies = task.slice(0, task.length - 1);
        var remainingDependencies = dependencies.length;
        if (remainingDependencies === 0) {
            enqueueTask(key, task);
            readyToCheck.push(key);
            return;
        }
        uncheckedDependencies[key] = remainingDependencies;

        arrayEach(dependencies, function (dependencyName) {
            if (!tasks[dependencyName]) {
                throw new Error('async.auto task `' + key +
                    '` has a non-existent dependency `' +
                    dependencyName + '` in ' +
                    dependencies.join(', '));
            }
            addListener(dependencyName, function () {
                remainingDependencies--;
                if (remainingDependencies === 0) {
                    enqueueTask(key, task);
                }
            });
        });
    });

    checkForDeadlocks();
    processQueue();

    function enqueueTask(key, task) {
        readyTasks.push(function () {
            runTask(key, task);
        });
    }

    function processQueue() {
        if (readyTasks.length === 0 && runningTasks === 0) {
            return callback(null, results);
        }
        while(readyTasks.length && runningTasks < concurrency) {
            var run = readyTasks.shift();
            run();
        }

    }

    function addListener(taskName, fn) {
        var taskListeners = listeners[taskName];
        if (!taskListeners) {
            taskListeners = listeners[taskName] = [];
        }

        taskListeners.push(fn);
    }

    function taskComplete(taskName) {
        var taskListeners = listeners[taskName] || [];
        arrayEach(taskListeners, function (fn) {
            fn();
        });
        processQueue();
    }


    function runTask(key, task) {
        if (hasError) return;

        var taskCallback = onlyOnce(function(err, result) {
            runningTasks--;
            if (arguments.length > 2) {
                result = slice(arguments, 1);
            }
            if (err) {
                var safeResults = {};
                baseForOwn(results, function(val, rkey) {
                    safeResults[rkey] = val;
                });
                safeResults[key] = result;
                hasError = true;
                listeners = Object.create(null);

                callback(err, safeResults);
            } else {
                results[key] = result;
                taskComplete(key);
            }
        });

        runningTasks++;
        var taskFn = wrapAsync(task[task.length - 1]);
        if (task.length > 1) {
            taskFn(results, taskCallback);
        } else {
            taskFn(taskCallback);
        }
    }

    function checkForDeadlocks() {
        // Kahn's algorithm
        // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm
        // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html
        var currentTask;
        var counter = 0;
        while (readyToCheck.length) {
            currentTask = readyToCheck.pop();
            counter++;
            arrayEach(getDependents(currentTask), function (dependent) {
                if (--uncheckedDependencies[dependent] === 0) {
                    readyToCheck.push(dependent);
                }
            });
        }

        if (counter !== numTasks) {
            throw new Error(
                'async.auto cannot execute tasks due to a recursive dependency'
            );
        }
    }

    function getDependents(taskName) {
        var result = [];
        baseForOwn(tasks, function (task, key) {
            if (isArray(task) && baseIndexOf(task, taskName, 0) >= 0) {
                result.push(key);
            }
        });
        return result;
    }
};

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined;
var symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */
function baseSlice(array, start, end) {
  var index = -1,
      length = array.length;

  if (start < 0) {
    start = -start > length ? 0 : (length + start);
  }
  end = end > length ? length : end;
  if (end < 0) {
    end += length;
  }
  length = start > end ? 0 : ((end - start) >>> 0);
  start >>>= 0;

  var result = Array(length);
  while (++index < length) {
    result[index] = array[index + start];
  }
  return result;
}

/**
 * Casts `array` to a slice if it's needed.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {number} start The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the cast slice.
 */
function castSlice(array, start, end) {
  var length = array.length;
  end = end === undefined ? length : end;
  return (!start && end >= length) ? array : baseSlice(array, start, end);
}

/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
 * that is not found in the character symbols.
 *
 * @private
 * @param {Array} strSymbols The string symbols to inspect.
 * @param {Array} chrSymbols The character symbols to find.
 * @returns {number} Returns the index of the last unmatched string symbol.
 */
function charsEndIndex(strSymbols, chrSymbols) {
  var index = strSymbols.length;

  while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
  return index;
}

/**
 * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
 * that is not found in the character symbols.
 *
 * @private
 * @param {Array} strSymbols The string symbols to inspect.
 * @param {Array} chrSymbols The character symbols to find.
 * @returns {number} Returns the index of the first unmatched string symbol.
 */
function charsStartIndex(strSymbols, chrSymbols) {
  var index = -1,
      length = strSymbols.length;

  while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
  return index;
}

/**
 * Converts an ASCII `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function asciiToArray(string) {
  return string.split('');
}

/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff';
var rsComboMarksRange = '\\u0300-\\u036f';
var reComboHalfMarksRange = '\\ufe20-\\ufe2f';
var rsComboSymbolsRange = '\\u20d0-\\u20ff';
var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
var rsVarRange = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsZWJ = '\\u200d';

/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

/**
 * Checks if `string` contains Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
 */
function hasUnicode(string) {
  return reHasUnicode.test(string);
}

/** Used to compose unicode character classes. */
var rsAstralRange$1 = '\\ud800-\\udfff';
var rsComboMarksRange$1 = '\\u0300-\\u036f';
var reComboHalfMarksRange$1 = '\\ufe20-\\ufe2f';
var rsComboSymbolsRange$1 = '\\u20d0-\\u20ff';
var rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1;
var rsVarRange$1 = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsAstral = '[' + rsAstralRange$1 + ']';
var rsCombo = '[' + rsComboRange$1 + ']';
var rsFitz = '\\ud83c[\\udffb-\\udfff]';
var rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')';
var rsNonAstral = '[^' + rsAstralRange$1 + ']';
var rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}';
var rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]';
var rsZWJ$1 = '\\u200d';

/** Used to compose unicode regexes. */
var reOptMod = rsModifier + '?';
var rsOptVar = '[' + rsVarRange$1 + ']?';
var rsOptJoin = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*';
var rsSeq = rsOptVar + reOptMod + rsOptJoin;
var rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

/**
 * Converts a Unicode `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function unicodeToArray(string) {
  return string.match(reUnicode) || [];
}

/**
 * Converts `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function stringToArray(string) {
  return hasUnicode(string)
    ? unicodeToArray(string)
    : asciiToArray(string);
}

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/**
 * Removes leading and trailing whitespace or specified characters from `string`.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to trim.
 * @param {string} [chars=whitespace] The characters to trim.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {string} Returns the trimmed string.
 * @example
 *
 * _.trim('  abc  ');
 * // => 'abc'
 *
 * _.trim('-_-abc-_-', '_-');
 * // => 'abc'
 *
 * _.map(['  foo  ', '  bar  '], _.trim);
 * // => ['foo', 'bar']
 */
function trim(string, chars, guard) {
  string = toString(string);
  if (string && (guard || chars === undefined)) {
    return string.replace(reTrim, '');
  }
  if (!string || !(chars = baseToString(chars))) {
    return string;
  }
  var strSymbols = stringToArray(string),
      chrSymbols = stringToArray(chars),
      start = charsStartIndex(strSymbols, chrSymbols),
      end = charsEndIndex(strSymbols, chrSymbols) + 1;

  return castSlice(strSymbols, start, end).join('');
}

var FN_ARGS = /^(?:async\s+)?(function)?\s*[^\(]*\(\s*([^\)]*)\)/m;
var FN_ARG_SPLIT = /,/;
var FN_ARG = /(=.+)?(\s*)$/;
var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;

function parseParams(func) {
    func = func.toString().replace(STRIP_COMMENTS, '');
    func = func.match(FN_ARGS)[2].replace(' ', '');
    func = func ? func.split(FN_ARG_SPLIT) : [];
    func = func.map(function (arg){
        return trim(arg.replace(FN_ARG, ''));
    });
    return func;
}

/**
 * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent
 * tasks are specified as parameters to the function, after the usual callback
 * parameter, with the parameter names matching the names of the tasks it
 * depends on. This can provide even more readable task graphs which can be
 * easier to maintain.
 *
 * If a final callback is specified, the task results are similarly injected,
 * specified as named parameters after the initial error parameter.
 *
 * The autoInject function is purely syntactic sugar and its semantics are
 * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.
 *
 * @name autoInject
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.auto]{@link module:ControlFlow.auto}
 * @category Control Flow
 * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of
 * the form 'func([dependencies...], callback). The object's key of a property
 * serves as the name of the task defined by that property, i.e. can be used
 * when specifying requirements for other tasks.
 * * The `callback` parameter is a `callback(err, result)` which must be called
 *   when finished, passing an `error` (which can be `null`) and the result of
 *   the function's execution. The remaining parameters name other tasks on
 *   which the task is dependent, and the results from those tasks are the
 *   arguments of those parameters.
 * @param {Function} [callback] - An optional callback which is called when all
 * the tasks have been completed. It receives the `err` argument if any `tasks`
 * pass an error to their callback, and a `results` object with any completed
 * task results, similar to `auto`.
 * @example
 *
 * //  The example from `auto` can be rewritten as follows:
 * async.autoInject({
 *     get_data: function(callback) {
 *         // async code to get some data
 *         callback(null, 'data', 'converted to array');
 *     },
 *     make_folder: function(callback) {
 *         // async code to create a directory to store a file in
 *         // this is run at the same time as getting the data
 *         callback(null, 'folder');
 *     },
 *     write_file: function(get_data, make_folder, callback) {
 *         // once there is some data and the directory exists,
 *         // write the data to a file in the directory
 *         callback(null, 'filename');
 *     },
 *     email_link: function(write_file, callback) {
 *         // once the file is written let's email a link to it...
 *         // write_file contains the filename returned by write_file.
 *         callback(null, {'file':write_file, 'email':'user@example.com'});
 *     }
 * }, function(err, results) {
 *     console.log('err = ', err);
 *     console.log('email_link = ', results.email_link);
 * });
 *
 * // If you are using a JS minifier that mangles parameter names, `autoInject`
 * // will not work with plain functions, since the parameter names will be
 * // collapsed to a single letter identifier.  To work around this, you can
 * // explicitly specify the names of the parameters your task function needs
 * // in an array, similar to Angular.js dependency injection.
 *
 * // This still has an advantage over plain `auto`, since the results a task
 * // depends on are still spread into arguments.
 * async.autoInject({
 *     //...
 *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {
 *         callback(null, 'filename');
 *     }],
 *     email_link: ['write_file', function(write_file, callback) {
 *         callback(null, {'file':write_file, 'email':'user@example.com'});
 *     }]
 *     //...
 * }, function(err, results) {
 *     console.log('err = ', err);
 *     console.log('email_link = ', results.email_link);
 * });
 */
function autoInject(tasks, callback) {
    var newTasks = {};

    baseForOwn(tasks, function (taskFn, key) {
        var params;
        var fnIsAsync = isAsync(taskFn);
        var hasNoDeps =
            (!fnIsAsync && taskFn.length === 1) ||
            (fnIsAsync && taskFn.length === 0);

        if (isArray(taskFn)) {
            params = taskFn.slice(0, -1);
            taskFn = taskFn[taskFn.length - 1];

            newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);
        } else if (hasNoDeps) {
            // no dependencies, use the function as-is
            newTasks[key] = taskFn;
        } else {
            params = parseParams(taskFn);
            if (taskFn.length === 0 && !fnIsAsync && params.length === 0) {
                throw new Error("autoInject task functions require explicit parameters.");
            }

            // remove callback param
            if (!fnIsAsync) params.pop();

            newTasks[key] = params.concat(newTask);
        }

        function newTask(results, taskCb) {
            var newArgs = arrayMap(params, function (name) {
                return results[name];
            });
            newArgs.push(taskCb);
            wrapAsync(taskFn).apply(null, newArgs);
        }
    });

    auto(newTasks, callback);
}

// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation
// used for queues. This implementation assumes that the node provided by the user can be modified
// to adjust the next and last properties. We implement only the minimal functionality
// for queue support.
function DLL() {
    this.head = this.tail = null;
    this.length = 0;
}

function setInitial(dll, node) {
    dll.length = 1;
    dll.head = dll.tail = node;
}

DLL.prototype.removeLink = function(node) {
    if (node.prev) node.prev.next = node.next;
    else this.head = node.next;
    if (node.next) node.next.prev = node.prev;
    else this.tail = node.prev;

    node.prev = node.next = null;
    this.length -= 1;
    return node;
};

DLL.prototype.empty = function () {
    while(this.head) this.shift();
    return this;
};

DLL.prototype.insertAfter = function(node, newNode) {
    newNode.prev = node;
    newNode.next = node.next;
    if (node.next) node.next.prev = newNode;
    else this.tail = newNode;
    node.next = newNode;
    this.length += 1;
};

DLL.prototype.insertBefore = function(node, newNode) {
    newNode.prev = node.prev;
    newNode.next = node;
    if (node.prev) node.prev.next = newNode;
    else this.head = newNode;
    node.prev = newNode;
    this.length += 1;
};

DLL.prototype.unshift = function(node) {
    if (this.head) this.insertBefore(this.head, node);
    else setInitial(this, node);
};

DLL.prototype.push = function(node) {
    if (this.tail) this.insertAfter(this.tail, node);
    else setInitial(this, node);
};

DLL.prototype.shift = function() {
    return this.head && this.removeLink(this.head);
};

DLL.prototype.pop = function() {
    return this.tail && this.removeLink(this.tail);
};

DLL.prototype.toArray = function () {
    var arr = Array(this.length);
    var curr = this.head;
    for(var idx = 0; idx < this.length; idx++) {
        arr[idx] = curr.data;
        curr = curr.next;
    }
    return arr;
};

DLL.prototype.remove = function (testFn) {
    var curr = this.head;
    while(!!curr) {
        var next = curr.next;
        if (testFn(curr)) {
            this.removeLink(curr);
        }
        curr = next;
    }
    return this;
};

function queue(worker, concurrency, payload) {
    if (concurrency == null) {
        concurrency = 1;
    }
    else if(concurrency === 0) {
        throw new Error('Concurrency must not be zero');
    }

    var _worker = wrapAsync(worker);
    var numRunning = 0;
    var workersList = [];

    var processingScheduled = false;
    function _insert(data, insertAtFront, callback) {
        if (callback != null && typeof callback !== 'function') {
            throw new Error('task callback must be a function');
        }
        q.started = true;
        if (!isArray(data)) {
            data = [data];
        }
        if (data.length === 0 && q.idle()) {
            // call drain immediately if there are no tasks
            return setImmediate$1(function() {
                q.drain();
            });
        }

        for (var i = 0, l = data.length; i < l; i++) {
            var item = {
                data: data[i],
                callback: callback || noop
            };

            if (insertAtFront) {
                q._tasks.unshift(item);
            } else {
                q._tasks.push(item);
            }
        }

        if (!processingScheduled) {
            processingScheduled = true;
            setImmediate$1(function() {
                processingScheduled = false;
                q.process();
            });
        }
    }

    function _next(tasks) {
        return function(err){
            numRunning -= 1;

            for (var i = 0, l = tasks.length; i < l; i++) {
                var task = tasks[i];

                var index = baseIndexOf(workersList, task, 0);
                if (index === 0) {
                    workersList.shift();
                } else if (index > 0) {
                    workersList.splice(index, 1);
                }

                task.callback.apply(task, arguments);

                if (err != null) {
                    q.error(err, task.data);
                }
            }

            if (numRunning <= (q.concurrency - q.buffer) ) {
                q.unsaturated();
            }

            if (q.idle()) {
                q.drain();
            }
            q.process();
        };
    }

    var isProcessing = false;
    var q = {
        _tasks: new DLL(),
        concurrency: concurrency,
        payload: payload,
        saturated: noop,
        unsaturated:noop,
        buffer: concurrency / 4,
        empty: noop,
        drain: noop,
        error: noop,
        started: false,
        paused: false,
        push: function (data, callback) {
            _insert(data, false, callback);
        },
        kill: function () {
            q.drain = noop;
            q._tasks.empty();
        },
        unshift: function (data, callback) {
            _insert(data, true, callback);
        },
        remove: function (testFn) {
            q._tasks.remove(testFn);
        },
        process: function () {
            // Avoid trying to start too many processing operations. This can occur
            // when callbacks resolve synchronously (#1267).
            if (isProcessing) {
                return;
            }
            isProcessing = true;
            while(!q.paused && numRunning < q.concurrency && q._tasks.length){
                var tasks = [], data = [];
                var l = q._tasks.length;
                if (q.payload) l = Math.min(l, q.payload);
                for (var i = 0; i < l; i++) {
                    var node = q._tasks.shift();
                    tasks.push(node);
                    workersList.push(node);
                    data.push(node.data);
                }

                numRunning += 1;

                if (q._tasks.length === 0) {
                    q.empty();
                }

                if (numRunning === q.concurrency) {
                    q.saturated();
                }

                var cb = onlyOnce(_next(tasks));
                _worker(data, cb);
            }
            isProcessing = false;
        },
        length: function () {
            return q._tasks.length;
        },
        running: function () {
            return numRunning;
        },
        workersList: function () {
            return workersList;
        },
        idle: function() {
            return q._tasks.length + numRunning === 0;
        },
        pause: function () {
            q.paused = true;
        },
        resume: function () {
            if (q.paused === false) { return; }
            q.paused = false;
            setImmediate$1(q.process);
        }
    };
    return q;
}

/**
 * A cargo of tasks for the worker function to complete. Cargo inherits all of
 * the same methods and event callbacks as [`queue`]{@link module:ControlFlow.queue}.
 * @typedef {Object} CargoObject
 * @memberOf module:ControlFlow
 * @property {Function} length - A function returning the number of items
 * waiting to be processed. Invoke like `cargo.length()`.
 * @property {number} payload - An `integer` for determining how many tasks
 * should be process per round. This property can be changed after a `cargo` is
 * created to alter the payload on-the-fly.
 * @property {Function} push - Adds `task` to the `queue`. The callback is
 * called once the `worker` has finished processing the task. Instead of a
 * single task, an array of `tasks` can be submitted. The respective callback is
 * used for every task in the list. Invoke like `cargo.push(task, [callback])`.
 * @property {Function} saturated - A callback that is called when the
 * `queue.length()` hits the concurrency and further tasks will be queued.
 * @property {Function} empty - A callback that is called when the last item
 * from the `queue` is given to a `worker`.
 * @property {Function} drain - A callback that is called when the last item
 * from the `queue` has returned from the `worker`.
 * @property {Function} idle - a function returning false if there are items
 * waiting or being processed, or true if not. Invoke like `cargo.idle()`.
 * @property {Function} pause - a function that pauses the processing of tasks
 * until `resume()` is called. Invoke like `cargo.pause()`.
 * @property {Function} resume - a function that resumes the processing of
 * queued tasks when the queue is paused. Invoke like `cargo.resume()`.
 * @property {Function} kill - a function that removes the `drain` callback and
 * empties remaining tasks from the queue forcing it to go idle. Invoke like `cargo.kill()`.
 */

/**
 * Creates a `cargo` object with the specified payload. Tasks added to the
 * cargo will be processed altogether (up to the `payload` limit). If the
 * `worker` is in progress, the task is queued until it becomes available. Once
 * the `worker` has completed some tasks, each callback of those tasks is
 * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)
 * for how `cargo` and `queue` work.
 *
 * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers
 * at a time, cargo passes an array of tasks to a single worker, repeating
 * when the worker is finished.
 *
 * @name cargo
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.queue]{@link module:ControlFlow.queue}
 * @category Control Flow
 * @param {AsyncFunction} worker - An asynchronous function for processing an array
 * of queued tasks. Invoked with `(tasks, callback)`.
 * @param {number} [payload=Infinity] - An optional `integer` for determining
 * how many tasks should be processed per round; if omitted, the default is
 * unlimited.
 * @returns {module:ControlFlow.CargoObject} A cargo object to manage the tasks. Callbacks can
 * attached as certain properties to listen for specific events during the
 * lifecycle of the cargo and inner queue.
 * @example
 *
 * // create a cargo object with payload 2
 * var cargo = async.cargo(function(tasks, callback) {
 *     for (var i=0; i<tasks.length; i++) {
 *         console.log('hello ' + tasks[i].name);
 *     }
 *     callback();
 * }, 2);
 *
 * // add some items
 * cargo.push({name: 'foo'}, function(err) {
 *     console.log('finished processing foo');
 * });
 * cargo.push({name: 'bar'}, function(err) {
 *     console.log('finished processing bar');
 * });
 * cargo.push({name: 'baz'}, function(err) {
 *     console.log('finished processing baz');
 * });
 */
function cargo(worker, payload) {
    return queue(worker, 1, payload);
}

/**
 * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.
 *
 * @name eachOfSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.eachOf]{@link module:Collections.eachOf}
 * @alias forEachOfSeries
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * Invoked with (item, key, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Invoked with (err).
 */
var eachOfSeries = doLimit(eachOfLimit, 1);

/**
 * Reduces `coll` into a single value using an async `iteratee` to return each
 * successive step. `memo` is the initial state of the reduction. This function
 * only operates in series.
 *
 * For performance reasons, it may make sense to split a call to this function
 * into a parallel map, and then use the normal `Array.prototype.reduce` on the
 * results. This function is for situations where each step in the reduction
 * needs to be async; if you can get the data before reducing it, then it's
 * probably a good idea to do so.
 *
 * @name reduce
 * @static
 * @memberOf module:Collections
 * @method
 * @alias inject
 * @alias foldl
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {*} memo - The initial state of the reduction.
 * @param {AsyncFunction} iteratee - A function applied to each item in the
 * array to produce the next step in the reduction.
 * The `iteratee` should complete with the next state of the reduction.
 * If the iteratee complete with an error, the reduction is stopped and the
 * main `callback` is immediately called with the error.
 * Invoked with (memo, item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result is the reduced value. Invoked with
 * (err, result).
 * @example
 *
 * async.reduce([1,2,3], 0, function(memo, item, callback) {
 *     // pointless async:
 *     process.nextTick(function() {
 *         callback(null, memo + item)
 *     });
 * }, function(err, result) {
 *     // result is now equal to the last value of memo, which is 6
 * });
 */
function reduce(coll, memo, iteratee, callback) {
    callback = once(callback || noop);
    var _iteratee = wrapAsync(iteratee);
    eachOfSeries(coll, function(x, i, callback) {
        _iteratee(memo, x, function(err, v) {
            memo = v;
            callback(err);
        });
    }, function(err) {
        callback(err, memo);
    });
}

/**
 * Version of the compose function that is more natural to read. Each function
 * consumes the return value of the previous function. It is the equivalent of
 * [compose]{@link module:ControlFlow.compose} with the arguments reversed.
 *
 * Each function is executed with the `this` binding of the composed function.
 *
 * @name seq
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.compose]{@link module:ControlFlow.compose}
 * @category Control Flow
 * @param {...AsyncFunction} functions - the asynchronous functions to compose
 * @returns {Function} a function that composes the `functions` in order
 * @example
 *
 * // Requires lodash (or underscore), express3 and dresende's orm2.
 * // Part of an app, that fetches cats of the logged user.
 * // This example uses `seq` function to avoid overnesting and error
 * // handling clutter.
 * app.get('/cats', function(request, response) {
 *     var User = request.models.User;
 *     async.seq(
 *         _.bind(User.get, User),  // 'User.get' has signature (id, callback(err, data))
 *         function(user, fn) {
 *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))
 *         }
 *     )(req.session.user_id, function (err, cats) {
 *         if (err) {
 *             console.error(err);
 *             response.json({ status: 'error', message: err.message });
 *         } else {
 *             response.json({ status: 'ok', message: 'Cats found', data: cats });
 *         }
 *     });
 * });
 */
function seq(/*...functions*/) {
    var _functions = arrayMap(arguments, wrapAsync);
    return function(/*...args*/) {
        var args = slice(arguments);
        var that = this;

        var cb = args[args.length - 1];
        if (typeof cb == 'function') {
            args.pop();
        } else {
            cb = noop;
        }

        reduce(_functions, args, function(newargs, fn, cb) {
            fn.apply(that, newargs.concat(function(err/*, ...nextargs*/) {
                var nextargs = slice(arguments, 1);
                cb(err, nextargs);
            }));
        },
        function(err, results) {
            cb.apply(that, [err].concat(results));
        });
    };
}

/**
 * Creates a function which is a composition of the passed asynchronous
 * functions. Each function consumes the return value of the function that
 * follows. Composing functions `f()`, `g()`, and `h()` would produce the result
 * of `f(g(h()))`, only this version uses callbacks to obtain the return values.
 *
 * Each function is executed with the `this` binding of the composed function.
 *
 * @name compose
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {...AsyncFunction} functions - the asynchronous functions to compose
 * @returns {Function} an asynchronous function that is the composed
 * asynchronous `functions`
 * @example
 *
 * function add1(n, callback) {
 *     setTimeout(function () {
 *         callback(null, n + 1);
 *     }, 10);
 * }
 *
 * function mul3(n, callback) {
 *     setTimeout(function () {
 *         callback(null, n * 3);
 *     }, 10);
 * }
 *
 * var add1mul3 = async.compose(mul3, add1);
 * add1mul3(4, function (err, result) {
 *     // result now equals 15
 * });
 */
var compose = function(/*...args*/) {
    return seq.apply(null, slice(arguments).reverse());
};

var _concat = Array.prototype.concat;

/**
 * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.
 *
 * @name concatLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.concat]{@link module:Collections.concat}
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,
 * which should use an array as its result. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished, or an error occurs. Results is an array
 * containing the concatenated results of the `iteratee` function. Invoked with
 * (err, results).
 */
var concatLimit = function(coll, limit, iteratee, callback) {
    callback = callback || noop;
    var _iteratee = wrapAsync(iteratee);
    mapLimit(coll, limit, function(val, callback) {
        _iteratee(val, function(err /*, ...args*/) {
            if (err) return callback(err);
            return callback(null, slice(arguments, 1));
        });
    }, function(err, mapResults) {
        var result = [];
        for (var i = 0; i < mapResults.length; i++) {
            if (mapResults[i]) {
                result = _concat.apply(result, mapResults[i]);
            }
        }

        return callback(err, result);
    });
};

/**
 * Applies `iteratee` to each item in `coll`, concatenating the results. Returns
 * the concatenated list. The `iteratee`s are called in parallel, and the
 * results are concatenated as they return. There is no guarantee that the
 * results array will be returned in the original order of `coll` passed to the
 * `iteratee` function.
 *
 * @name concat
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,
 * which should use an array as its result. Invoked with (item, callback).
 * @param {Function} [callback(err)] - A callback which is called after all the
 * `iteratee` functions have finished, or an error occurs. Results is an array
 * containing the concatenated results of the `iteratee` function. Invoked with
 * (err, results).
 * @example
 *
 * async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files) {
 *     // files is now a list of filenames that exist in the 3 directories
 * });
 */
var concat = doLimit(concatLimit, Infinity);

/**
 * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.
 *
 * @name concatSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.concat]{@link module:Collections.concat}
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.
 * The iteratee should complete with an array an array of results.
 * Invoked with (item, callback).
 * @param {Function} [callback(err)] - A callback which is called after all the
 * `iteratee` functions have finished, or an error occurs. Results is an array
 * containing the concatenated results of the `iteratee` function. Invoked with
 * (err, results).
 */
var concatSeries = doLimit(concatLimit, 1);

/**
 * Returns a function that when called, calls-back with the values provided.
 * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to
 * [`auto`]{@link module:ControlFlow.auto}.
 *
 * @name constant
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {...*} arguments... - Any number of arguments to automatically invoke
 * callback with.
 * @returns {AsyncFunction} Returns a function that when invoked, automatically
 * invokes the callback with the previous given arguments.
 * @example
 *
 * async.waterfall([
 *     async.constant(42),
 *     function (value, next) {
 *         // value === 42
 *     },
 *     //...
 * ], callback);
 *
 * async.waterfall([
 *     async.constant(filename, "utf8"),
 *     fs.readFile,
 *     function (fileData, next) {
 *         //...
 *     }
 *     //...
 * ], callback);
 *
 * async.auto({
 *     hostname: async.constant("https://server.net/"),
 *     port: findFreePort,
 *     launchServer: ["hostname", "port", function (options, cb) {
 *         startServer(options, cb);
 *     }],
 *     //...
 * }, callback);
 */
var constant = function(/*...values*/) {
    var values = slice(arguments);
    var args = [null].concat(values);
    return function (/*...ignoredArgs, callback*/) {
        var callback = arguments[arguments.length - 1];
        return callback.apply(this, args);
    };
};

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

function _createTester(check, getResult) {
    return function(eachfn, arr, iteratee, cb) {
        cb = cb || noop;
        var testPassed = false;
        var testResult;
        eachfn(arr, function(value, _, callback) {
            iteratee(value, function(err, result) {
                if (err) {
                    callback(err);
                } else if (check(result) && !testResult) {
                    testPassed = true;
                    testResult = getResult(true, value);
                    callback(null, breakLoop);
                } else {
                    callback();
                }
            });
        }, function(err) {
            if (err) {
                cb(err);
            } else {
                cb(null, testPassed ? testResult : getResult(false));
            }
        });
    };
}

function _findGetResult(v, x) {
    return x;
}

/**
 * Returns the first value in `coll` that passes an async truth test. The
 * `iteratee` is applied in parallel, meaning the first iteratee to return
 * `true` will fire the detect `callback` with that result. That means the
 * result might not be the first item in the original `coll` (in terms of order)
 * that passes the test.

 * If order within the original `coll` is important, then look at
 * [`detectSeries`]{@link module:Collections.detectSeries}.
 *
 * @name detect
 * @static
 * @memberOf module:Collections
 * @method
 * @alias find
 * @category Collections
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.
 * The iteratee must complete with a boolean value as its result.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the `iteratee` functions have finished.
 * Result will be the first item in the array that passes the truth test
 * (iteratee) or the value `undefined` if none passed. Invoked with
 * (err, result).
 * @example
 *
 * async.detect(['file1','file2','file3'], function(filePath, callback) {
 *     fs.access(filePath, function(err) {
 *         callback(null, !err)
 *     });
 * }, function(err, result) {
 *     // result now equals the first file in the list that exists
 * });
 */
var detect = doParallel(_createTester(identity, _findGetResult));

/**
 * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name detectLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.detect]{@link module:Collections.detect}
 * @alias findLimit
 * @category Collections
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.
 * The iteratee must complete with a boolean value as its result.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the `iteratee` functions have finished.
 * Result will be the first item in the array that passes the truth test
 * (iteratee) or the value `undefined` if none passed. Invoked with
 * (err, result).
 */
var detectLimit = doParallelLimit(_createTester(identity, _findGetResult));

/**
 * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.
 *
 * @name detectSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.detect]{@link module:Collections.detect}
 * @alias findSeries
 * @category Collections
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.
 * The iteratee must complete with a boolean value as its result.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the `iteratee` functions have finished.
 * Result will be the first item in the array that passes the truth test
 * (iteratee) or the value `undefined` if none passed. Invoked with
 * (err, result).
 */
var detectSeries = doLimit(detectLimit, 1);

function consoleFunc(name) {
    return function (fn/*, ...args*/) {
        var args = slice(arguments, 1);
        args.push(function (err/*, ...args*/) {
            var args = slice(arguments, 1);
            if (typeof console === 'object') {
                if (err) {
                    if (console.error) {
                        console.error(err);
                    }
                } else if (console[name]) {
                    arrayEach(args, function (x) {
                        console[name](x);
                    });
                }
            }
        });
        wrapAsync(fn).apply(null, args);
    };
}

/**
 * Logs the result of an [`async` function]{@link AsyncFunction} to the
 * `console` using `console.dir` to display the properties of the resulting object.
 * Only works in Node.js or in browsers that support `console.dir` and
 * `console.error` (such as FF and Chrome).
 * If multiple arguments are returned from the async function,
 * `console.dir` is called on each argument in order.
 *
 * @name dir
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} function - The function you want to eventually apply
 * all arguments to.
 * @param {...*} arguments... - Any number of arguments to apply to the function.
 * @example
 *
 * // in a module
 * var hello = function(name, callback) {
 *     setTimeout(function() {
 *         callback(null, {hello: name});
 *     }, 1000);
 * };
 *
 * // in the node repl
 * node> async.dir(hello, 'world');
 * {hello: 'world'}
 */
var dir = consoleFunc('dir');

/**
 * The post-check version of [`during`]{@link module:ControlFlow.during}. To reflect the difference in
 * the order of operations, the arguments `test` and `fn` are switched.
 *
 * Also a version of [`doWhilst`]{@link module:ControlFlow.doWhilst} with asynchronous `test` function.
 * @name doDuring
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.during]{@link module:ControlFlow.during}
 * @category Control Flow
 * @param {AsyncFunction} fn - An async function which is called each time
 * `test` passes. Invoked with (callback).
 * @param {AsyncFunction} test - asynchronous truth test to perform before each
 * execution of `fn`. Invoked with (...args, callback), where `...args` are the
 * non-error args from the previous callback of `fn`.
 * @param {Function} [callback] - A callback which is called after the test
 * function has failed and repeated execution of `fn` has stopped. `callback`
 * will be passed an error if one occurred, otherwise `null`.
 */
function doDuring(fn, test, callback) {
    callback = onlyOnce(callback || noop);
    var _fn = wrapAsync(fn);
    var _test = wrapAsync(test);

    function next(err/*, ...args*/) {
        if (err) return callback(err);
        var args = slice(arguments, 1);
        args.push(check);
        _test.apply(this, args);
    }

    function check(err, truth) {
        if (err) return callback(err);
        if (!truth) return callback(null);
        _fn(next);
    }

    check(null, true);

}

/**
 * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in
 * the order of operations, the arguments `test` and `iteratee` are switched.
 *
 * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.
 *
 * @name doWhilst
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.whilst]{@link module:ControlFlow.whilst}
 * @category Control Flow
 * @param {AsyncFunction} iteratee - A function which is called each time `test`
 * passes. Invoked with (callback).
 * @param {Function} test - synchronous truth test to perform after each
 * execution of `iteratee`. Invoked with any non-error callback results of
 * `iteratee`.
 * @param {Function} [callback] - A callback which is called after the test
 * function has failed and repeated execution of `iteratee` has stopped.
 * `callback` will be passed an error and any arguments passed to the final
 * `iteratee`'s callback. Invoked with (err, [results]);
 */
function doWhilst(iteratee, test, callback) {
    callback = onlyOnce(callback || noop);
    var _iteratee = wrapAsync(iteratee);
    var next = function(err/*, ...args*/) {
        if (err) return callback(err);
        var args = slice(arguments, 1);
        if (test.apply(this, args)) return _iteratee(next);
        callback.apply(null, [null].concat(args));
    };
    _iteratee(next);
}

/**
 * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the
 * argument ordering differs from `until`.
 *
 * @name doUntil
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}
 * @category Control Flow
 * @param {AsyncFunction} iteratee - An async function which is called each time
 * `test` fails. Invoked with (callback).
 * @param {Function} test - synchronous truth test to perform after each
 * execution of `iteratee`. Invoked with any non-error callback results of
 * `iteratee`.
 * @param {Function} [callback] - A callback which is called after the test
 * function has passed and repeated execution of `iteratee` has stopped. `callback`
 * will be passed an error and any arguments passed to the final `iteratee`'s
 * callback. Invoked with (err, [results]);
 */
function doUntil(iteratee, test, callback) {
    doWhilst(iteratee, function() {
        return !test.apply(this, arguments);
    }, callback);
}

/**
 * Like [`whilst`]{@link module:ControlFlow.whilst}, except the `test` is an asynchronous function that
 * is passed a callback in the form of `function (err, truth)`. If error is
 * passed to `test` or `fn`, the main callback is immediately called with the
 * value of the error.
 *
 * @name during
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.whilst]{@link module:ControlFlow.whilst}
 * @category Control Flow
 * @param {AsyncFunction} test - asynchronous truth test to perform before each
 * execution of `fn`. Invoked with (callback).
 * @param {AsyncFunction} fn - An async function which is called each time
 * `test` passes. Invoked with (callback).
 * @param {Function} [callback] - A callback which is called after the test
 * function has failed and repeated execution of `fn` has stopped. `callback`
 * will be passed an error, if one occurred, otherwise `null`.
 * @example
 *
 * var count = 0;
 *
 * async.during(
 *     function (callback) {
 *         return callback(null, count < 5);
 *     },
 *     function (callback) {
 *         count++;
 *         setTimeout(callback, 1000);
 *     },
 *     function (err) {
 *         // 5 seconds have passed
 *     }
 * );
 */
function during(test, fn, callback) {
    callback = onlyOnce(callback || noop);
    var _fn = wrapAsync(fn);
    var _test = wrapAsync(test);

    function next(err) {
        if (err) return callback(err);
        _test(check);
    }

    function check(err, truth) {
        if (err) return callback(err);
        if (!truth) return callback(null);
        _fn(next);
    }

    _test(check);
}

function _withoutIndex(iteratee) {
    return function (value, index, callback) {
        return iteratee(value, callback);
    };
}

/**
 * Applies the function `iteratee` to each item in `coll`, in parallel.
 * The `iteratee` is called with an item from the list, and a callback for when
 * it has finished. If the `iteratee` passes an error to its `callback`, the
 * main `callback` (for the `each` function) is immediately called with the
 * error.
 *
 * Note, that since this function applies `iteratee` to each item in parallel,
 * there is no guarantee that the iteratee functions will complete in order.
 *
 * @name each
 * @static
 * @memberOf module:Collections
 * @method
 * @alias forEach
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to
 * each item in `coll`. Invoked with (item, callback).
 * The array index is not passed to the iteratee.
 * If you need the index, use `eachOf`.
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @example
 *
 * // assuming openFiles is an array of file names and saveFile is a function
 * // to save the modified contents of that file:
 *
 * async.each(openFiles, saveFile, function(err){
 *   // if any of the saves produced an error, err would equal that error
 * });
 *
 * // assuming openFiles is an array of file names
 * async.each(openFiles, function(file, callback) {
 *
 *     // Perform operation on file here.
 *     console.log('Processing file ' + file);
 *
 *     if( file.length > 32 ) {
 *       console.log('This file name is too long');
 *       callback('File name too long');
 *     } else {
 *       // Do work to process file here
 *       console.log('File processed');
 *       callback();
 *     }
 * }, function(err) {
 *     // if any of the file processing produced an error, err would equal that error
 *     if( err ) {
 *       // One of the iterations produced an error.
 *       // All processing will now stop.
 *       console.log('A file failed to process');
 *     } else {
 *       console.log('All files have been processed successfully');
 *     }
 * });
 */
function eachLimit(coll, iteratee, callback) {
    eachOf(coll, _withoutIndex(wrapAsync(iteratee)), callback);
}

/**
 * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.
 *
 * @name eachLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.each]{@link module:Collections.each}
 * @alias forEachLimit
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The array index is not passed to the iteratee.
 * If you need the index, use `eachOfLimit`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 */
function eachLimit$1(coll, limit, iteratee, callback) {
    _eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);
}

/**
 * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.
 *
 * @name eachSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.each]{@link module:Collections.each}
 * @alias forEachSeries
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each
 * item in `coll`.
 * The array index is not passed to the iteratee.
 * If you need the index, use `eachOfSeries`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 */
var eachSeries = doLimit(eachLimit$1, 1);

/**
 * Wrap an async function and ensure it calls its callback on a later tick of
 * the event loop.  If the function already calls its callback on a next tick,
 * no extra deferral is added. This is useful for preventing stack overflows
 * (`RangeError: Maximum call stack size exceeded`) and generally keeping
 * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)
 * contained. ES2017 `async` functions are returned as-is -- they are immune
 * to Zalgo's corrupting influences, as they always resolve on a later tick.
 *
 * @name ensureAsync
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} fn - an async function, one that expects a node-style
 * callback as its last argument.
 * @returns {AsyncFunction} Returns a wrapped function with the exact same call
 * signature as the function passed in.
 * @example
 *
 * function sometimesAsync(arg, callback) {
 *     if (cache[arg]) {
 *         return callback(null, cache[arg]); // this would be synchronous!!
 *     } else {
 *         doSomeIO(arg, callback); // this IO would be asynchronous
 *     }
 * }
 *
 * // this has a risk of stack overflows if many results are cached in a row
 * async.mapSeries(args, sometimesAsync, done);
 *
 * // this will defer sometimesAsync's callback if necessary,
 * // preventing stack overflows
 * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);
 */
function ensureAsync(fn) {
    if (isAsync(fn)) return fn;
    return initialParams(function (args, callback) {
        var sync = true;
        args.push(function () {
            var innerArgs = arguments;
            if (sync) {
                setImmediate$1(function () {
                    callback.apply(null, innerArgs);
                });
            } else {
                callback.apply(null, innerArgs);
            }
        });
        fn.apply(this, args);
        sync = false;
    });
}

function notId(v) {
    return !v;
}

/**
 * Returns `true` if every element in `coll` satisfies an async test. If any
 * iteratee call returns `false`, the main `callback` is immediately called.
 *
 * @name every
 * @static
 * @memberOf module:Collections
 * @method
 * @alias all
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collection in parallel.
 * The iteratee must complete with a boolean result value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result will be either `true` or `false`
 * depending on the values of the async tests. Invoked with (err, result).
 * @example
 *
 * async.every(['file1','file2','file3'], function(filePath, callback) {
 *     fs.access(filePath, function(err) {
 *         callback(null, !err)
 *     });
 * }, function(err, result) {
 *     // if result is true then every file exists
 * });
 */
var every = doParallel(_createTester(notId, notId));

/**
 * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.
 *
 * @name everyLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.every]{@link module:Collections.every}
 * @alias allLimit
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collection in parallel.
 * The iteratee must complete with a boolean result value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result will be either `true` or `false`
 * depending on the values of the async tests. Invoked with (err, result).
 */
var everyLimit = doParallelLimit(_createTester(notId, notId));

/**
 * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.
 *
 * @name everySeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.every]{@link module:Collections.every}
 * @alias allSeries
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collection in series.
 * The iteratee must complete with a boolean result value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result will be either `true` or `false`
 * depending on the values of the async tests. Invoked with (err, result).
 */
var everySeries = doLimit(everyLimit, 1);

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

function filterArray(eachfn, arr, iteratee, callback) {
    var truthValues = new Array(arr.length);
    eachfn(arr, function (x, index, callback) {
        iteratee(x, function (err, v) {
            truthValues[index] = !!v;
            callback(err);
        });
    }, function (err) {
        if (err) return callback(err);
        var results = [];
        for (var i = 0; i < arr.length; i++) {
            if (truthValues[i]) results.push(arr[i]);
        }
        callback(null, results);
    });
}

function filterGeneric(eachfn, coll, iteratee, callback) {
    var results = [];
    eachfn(coll, function (x, index, callback) {
        iteratee(x, function (err, v) {
            if (err) {
                callback(err);
            } else {
                if (v) {
                    results.push({index: index, value: x});
                }
                callback();
            }
        });
    }, function (err) {
        if (err) {
            callback(err);
        } else {
            callback(null, arrayMap(results.sort(function (a, b) {
                return a.index - b.index;
            }), baseProperty('value')));
        }
    });
}

function _filter(eachfn, coll, iteratee, callback) {
    var filter = isArrayLike(coll) ? filterArray : filterGeneric;
    filter(eachfn, coll, wrapAsync(iteratee), callback || noop);
}

/**
 * Returns a new array of all the values in `coll` which pass an async truth
 * test. This operation is performed in parallel, but the results array will be
 * in the same order as the original.
 *
 * @name filter
 * @static
 * @memberOf module:Collections
 * @method
 * @alias select
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
 * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
 * with a boolean argument once it has completed. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 * @example
 *
 * async.filter(['file1','file2','file3'], function(filePath, callback) {
 *     fs.access(filePath, function(err) {
 *         callback(null, !err)
 *     });
 * }, function(err, results) {
 *     // results now equals an array of the existing files
 * });
 */
var filter = doParallel(_filter);

/**
 * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name filterLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.filter]{@link module:Collections.filter}
 * @alias selectLimit
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
 * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
 * with a boolean argument once it has completed. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 */
var filterLimit = doParallelLimit(_filter);

/**
 * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.
 *
 * @name filterSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.filter]{@link module:Collections.filter}
 * @alias selectSeries
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
 * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
 * with a boolean argument once it has completed. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results)
 */
var filterSeries = doLimit(filterLimit, 1);

/**
 * Calls the asynchronous function `fn` with a callback parameter that allows it
 * to call itself again, in series, indefinitely.

 * If an error is passed to the callback then `errback` is called with the
 * error, and execution stops, otherwise it will never be called.
 *
 * @name forever
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {AsyncFunction} fn - an async function to call repeatedly.
 * Invoked with (next).
 * @param {Function} [errback] - when `fn` passes an error to it's callback,
 * this function will be called, and execution stops. Invoked with (err).
 * @example
 *
 * async.forever(
 *     function(next) {
 *         // next is suitable for passing to things that need a callback(err [, whatever]);
 *         // it will result in this function being called again.
 *     },
 *     function(err) {
 *         // if next is called with a value in its first parameter, it will appear
 *         // in here as 'err', and execution will stop.
 *     }
 * );
 */
function forever(fn, errback) {
    var done = onlyOnce(errback || noop);
    var task = wrapAsync(ensureAsync(fn));

    function next(err) {
        if (err) return done(err);
        task(next);
    }
    next();
}

/**
 * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.
 *
 * @name groupByLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.groupBy]{@link module:Collections.groupBy}
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with a `key` to group the value under.
 * Invoked with (value, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Result is an `Object` whoses
 * properties are arrays of values which returned the corresponding key.
 */
var groupByLimit = function(coll, limit, iteratee, callback) {
    callback = callback || noop;
    var _iteratee = wrapAsync(iteratee);
    mapLimit(coll, limit, function(val, callback) {
        _iteratee(val, function(err, key) {
            if (err) return callback(err);
            return callback(null, {key: key, val: val});
        });
    }, function(err, mapResults) {
        var result = {};
        // from MDN, handle object having an `hasOwnProperty` prop
        var hasOwnProperty = Object.prototype.hasOwnProperty;

        for (var i = 0; i < mapResults.length; i++) {
            if (mapResults[i]) {
                var key = mapResults[i].key;
                var val = mapResults[i].val;

                if (hasOwnProperty.call(result, key)) {
                    result[key].push(val);
                } else {
                    result[key] = [val];
                }
            }
        }

        return callback(err, result);
    });
};

/**
 * Returns a new object, where each value corresponds to an array of items, from
 * `coll`, that returned the corresponding key. That is, the keys of the object
 * correspond to the values passed to the `iteratee` callback.
 *
 * Note: Since this function applies the `iteratee` to each item in parallel,
 * there is no guarantee that the `iteratee` functions will complete in order.
 * However, the values for each key in the `result` will be in the same order as
 * the original `coll`. For Objects, the values will roughly be in the order of
 * the original Objects' keys (but this can vary across JavaScript engines).
 *
 * @name groupBy
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with a `key` to group the value under.
 * Invoked with (value, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Result is an `Object` whoses
 * properties are arrays of values which returned the corresponding key.
 * @example
 *
 * async.groupBy(['userId1', 'userId2', 'userId3'], function(userId, callback) {
 *     db.findById(userId, function(err, user) {
 *         if (err) return callback(err);
 *         return callback(null, user.age);
 *     });
 * }, function(err, result) {
 *     // result is object containing the userIds grouped by age
 *     // e.g. { 30: ['userId1', 'userId3'], 42: ['userId2']};
 * });
 */
var groupBy = doLimit(groupByLimit, Infinity);

/**
 * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.
 *
 * @name groupBySeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.groupBy]{@link module:Collections.groupBy}
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with a `key` to group the value under.
 * Invoked with (value, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Result is an `Object` whoses
 * properties are arrays of values which returned the corresponding key.
 */
var groupBySeries = doLimit(groupByLimit, 1);

/**
 * Logs the result of an `async` function to the `console`. Only works in
 * Node.js or in browsers that support `console.log` and `console.error` (such
 * as FF and Chrome). If multiple arguments are returned from the async
 * function, `console.log` is called on each argument in order.
 *
 * @name log
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} function - The function you want to eventually apply
 * all arguments to.
 * @param {...*} arguments... - Any number of arguments to apply to the function.
 * @example
 *
 * // in a module
 * var hello = function(name, callback) {
 *     setTimeout(function() {
 *         callback(null, 'hello ' + name);
 *     }, 1000);
 * };
 *
 * // in the node repl
 * node> async.log(hello, 'world');
 * 'hello world'
 */
var log = consoleFunc('log');

/**
 * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name mapValuesLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.mapValues]{@link module:Collections.mapValues}
 * @category Collection
 * @param {Object} obj - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - A function to apply to each value and key
 * in `coll`.
 * The iteratee should complete with the transformed value as its result.
 * Invoked with (value, key, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. `result` is a new object consisting
 * of each key from `obj`, with each transformed value on the right-hand side.
 * Invoked with (err, result).
 */
function mapValuesLimit(obj, limit, iteratee, callback) {
    callback = once(callback || noop);
    var newObj = {};
    var _iteratee = wrapAsync(iteratee);
    eachOfLimit(obj, limit, function(val, key, next) {
        _iteratee(val, key, function (err, result) {
            if (err) return next(err);
            newObj[key] = result;
            next();
        });
    }, function (err) {
        callback(err, newObj);
    });
}

/**
 * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.
 *
 * Produces a new Object by mapping each value of `obj` through the `iteratee`
 * function. The `iteratee` is called each `value` and `key` from `obj` and a
 * callback for when it has finished processing. Each of these callbacks takes
 * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`
 * passes an error to its callback, the main `callback` (for the `mapValues`
 * function) is immediately called with the error.
 *
 * Note, the order of the keys in the result is not guaranteed.  The keys will
 * be roughly in the order they complete, (but this is very engine-specific)
 *
 * @name mapValues
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Object} obj - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each value and key
 * in `coll`.
 * The iteratee should complete with the transformed value as its result.
 * Invoked with (value, key, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. `result` is a new object consisting
 * of each key from `obj`, with each transformed value on the right-hand side.
 * Invoked with (err, result).
 * @example
 *
 * async.mapValues({
 *     f1: 'file1',
 *     f2: 'file2',
 *     f3: 'file3'
 * }, function (file, key, callback) {
 *   fs.stat(file, callback);
 * }, function(err, result) {
 *     // result is now a map of stats for each file, e.g.
 *     // {
 *     //     f1: [stats for file1],
 *     //     f2: [stats for file2],
 *     //     f3: [stats for file3]
 *     // }
 * });
 */

var mapValues = doLimit(mapValuesLimit, Infinity);

/**
 * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.
 *
 * @name mapValuesSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.mapValues]{@link module:Collections.mapValues}
 * @category Collection
 * @param {Object} obj - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each value and key
 * in `coll`.
 * The iteratee should complete with the transformed value as its result.
 * Invoked with (value, key, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. `result` is a new object consisting
 * of each key from `obj`, with each transformed value on the right-hand side.
 * Invoked with (err, result).
 */
var mapValuesSeries = doLimit(mapValuesLimit, 1);

function has(obj, key) {
    return key in obj;
}

/**
 * Caches the results of an async function. When creating a hash to store
 * function results against, the callback is omitted from the hash and an
 * optional hash function can be used.
 *
 * If no hash function is specified, the first argument is used as a hash key,
 * which may work reasonably if it is a string or a data type that converts to a
 * distinct string. Note that objects and arrays will not behave reasonably.
 * Neither will cases where the other arguments are significant. In such cases,
 * specify your own hash function.
 *
 * The cache of results is exposed as the `memo` property of the function
 * returned by `memoize`.
 *
 * @name memoize
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} fn - The async function to proxy and cache results from.
 * @param {Function} hasher - An optional function for generating a custom hash
 * for storing results. It has all the arguments applied to it apart from the
 * callback, and must be synchronous.
 * @returns {AsyncFunction} a memoized version of `fn`
 * @example
 *
 * var slow_fn = function(name, callback) {
 *     // do something
 *     callback(null, result);
 * };
 * var fn = async.memoize(slow_fn);
 *
 * // fn can now be used as if it were slow_fn
 * fn('some name', function() {
 *     // callback
 * });
 */
function memoize(fn, hasher) {
    var memo = Object.create(null);
    var queues = Object.create(null);
    hasher = hasher || identity;
    var _fn = wrapAsync(fn);
    var memoized = initialParams(function memoized(args, callback) {
        var key = hasher.apply(null, args);
        if (has(memo, key)) {
            setImmediate$1(function() {
                callback.apply(null, memo[key]);
            });
        } else if (has(queues, key)) {
            queues[key].push(callback);
        } else {
            queues[key] = [callback];
            _fn.apply(null, args.concat(function(/*args*/) {
                var args = slice(arguments);
                memo[key] = args;
                var q = queues[key];
                delete queues[key];
                for (var i = 0, l = q.length; i < l; i++) {
                    q[i].apply(null, args);
                }
            }));
        }
    });
    memoized.memo = memo;
    memoized.unmemoized = fn;
    return memoized;
}

/**
 * Calls `callback` on a later loop around the event loop. In Node.js this just
 * calls `process.nextTick`.  In the browser it will use `setImmediate` if
 * available, otherwise `setTimeout(callback, 0)`, which means other higher
 * priority events may precede the execution of `callback`.
 *
 * This is used internally for browser-compatibility purposes.
 *
 * @name nextTick
 * @static
 * @memberOf module:Utils
 * @method
 * @see [async.setImmediate]{@link module:Utils.setImmediate}
 * @category Util
 * @param {Function} callback - The function to call on a later loop around
 * the event loop. Invoked with (args...).
 * @param {...*} args... - any number of additional arguments to pass to the
 * callback on the next tick.
 * @example
 *
 * var call_order = [];
 * async.nextTick(function() {
 *     call_order.push('two');
 *     // call_order now equals ['one','two']
 * });
 * call_order.push('one');
 *
 * async.setImmediate(function (a, b, c) {
 *     // a, b, and c equal 1, 2, and 3
 * }, 1, 2, 3);
 */
var _defer$1;

if (hasNextTick) {
    _defer$1 = process.nextTick;
} else if (hasSetImmediate) {
    _defer$1 = setImmediate;
} else {
    _defer$1 = fallback;
}

var nextTick = wrap(_defer$1);

function _parallel(eachfn, tasks, callback) {
    callback = callback || noop;
    var results = isArrayLike(tasks) ? [] : {};

    eachfn(tasks, function (task, key, callback) {
        wrapAsync(task)(function (err, result) {
            if (arguments.length > 2) {
                result = slice(arguments, 1);
            }
            results[key] = result;
            callback(err);
        });
    }, function (err) {
        callback(err, results);
    });
}

/**
 * Run the `tasks` collection of functions in parallel, without waiting until
 * the previous function has completed. If any of the functions pass an error to
 * its callback, the main `callback` is immediately called with the value of the
 * error. Once the `tasks` have completed, the results are passed to the final
 * `callback` as an array.
 *
 * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about
 * parallel execution of code.  If your tasks do not use any timers or perform
 * any I/O, they will actually be executed in series.  Any synchronous setup
 * sections for each task will happen one after the other.  JavaScript remains
 * single-threaded.
 *
 * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the
 * execution of other tasks when a task fails.
 *
 * It is also possible to use an object instead of an array. Each property will
 * be run as a function and the results will be passed to the final `callback`
 * as an object instead of an array. This can be a more readable way of handling
 * results from {@link async.parallel}.
 *
 * @name parallel
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array|Iterable|Object} tasks - A collection of
 * [async functions]{@link AsyncFunction} to run.
 * Each async function can complete with any number of optional `result` values.
 * @param {Function} [callback] - An optional callback to run once all the
 * functions have completed successfully. This function gets a results array
 * (or object) containing all the result arguments passed to the task callbacks.
 * Invoked with (err, results).
 *
 * @example
 * async.parallel([
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'two');
 *         }, 100);
 *     }
 * ],
 * // optional callback
 * function(err, results) {
 *     // the results array will equal ['one','two'] even though
 *     // the second function had a shorter timeout.
 * });
 *
 * // an example using an object instead of an array
 * async.parallel({
 *     one: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 1);
 *         }, 200);
 *     },
 *     two: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 2);
 *         }, 100);
 *     }
 * }, function(err, results) {
 *     // results is now equals to: {one: 1, two: 2}
 * });
 */
function parallelLimit(tasks, callback) {
    _parallel(eachOf, tasks, callback);
}

/**
 * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name parallelLimit
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.parallel]{@link module:ControlFlow.parallel}
 * @category Control Flow
 * @param {Array|Iterable|Object} tasks - A collection of
 * [async functions]{@link AsyncFunction} to run.
 * Each async function can complete with any number of optional `result` values.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {Function} [callback] - An optional callback to run once all the
 * functions have completed successfully. This function gets a results array
 * (or object) containing all the result arguments passed to the task callbacks.
 * Invoked with (err, results).
 */
function parallelLimit$1(tasks, limit, callback) {
    _parallel(_eachOfLimit(limit), tasks, callback);
}

/**
 * A queue of tasks for the worker function to complete.
 * @typedef {Object} QueueObject
 * @memberOf module:ControlFlow
 * @property {Function} length - a function returning the number of items
 * waiting to be processed. Invoke with `queue.length()`.
 * @property {boolean} started - a boolean indicating whether or not any
 * items have been pushed and processed by the queue.
 * @property {Function} running - a function returning the number of items
 * currently being processed. Invoke with `queue.running()`.
 * @property {Function} workersList - a function returning the array of items
 * currently being processed. Invoke with `queue.workersList()`.
 * @property {Function} idle - a function returning false if there are items
 * waiting or being processed, or true if not. Invoke with `queue.idle()`.
 * @property {number} concurrency - an integer for determining how many `worker`
 * functions should be run in parallel. This property can be changed after a
 * `queue` is created to alter the concurrency on-the-fly.
 * @property {Function} push - add a new task to the `queue`. Calls `callback`
 * once the `worker` has finished processing the task. Instead of a single task,
 * a `tasks` array can be submitted. The respective callback is used for every
 * task in the list. Invoke with `queue.push(task, [callback])`,
 * @property {Function} unshift - add a new task to the front of the `queue`.
 * Invoke with `queue.unshift(task, [callback])`.
 * @property {Function} remove - remove items from the queue that match a test
 * function.  The test function will be passed an object with a `data` property,
 * and a `priority` property, if this is a
 * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.
 * Invoked with `queue.remove(testFn)`, where `testFn` is of the form
 * `function ({data, priority}) {}` and returns a Boolean.
 * @property {Function} saturated - a callback that is called when the number of
 * running workers hits the `concurrency` limit, and further tasks will be
 * queued.
 * @property {Function} unsaturated - a callback that is called when the number
 * of running workers is less than the `concurrency` & `buffer` limits, and
 * further tasks will not be queued.
 * @property {number} buffer - A minimum threshold buffer in order to say that
 * the `queue` is `unsaturated`.
 * @property {Function} empty - a callback that is called when the last item
 * from the `queue` is given to a `worker`.
 * @property {Function} drain - a callback that is called when the last item
 * from the `queue` has returned from the `worker`.
 * @property {Function} error - a callback that is called when a task errors.
 * Has the signature `function(error, task)`.
 * @property {boolean} paused - a boolean for determining whether the queue is
 * in a paused state.
 * @property {Function} pause - a function that pauses the processing of tasks
 * until `resume()` is called. Invoke with `queue.pause()`.
 * @property {Function} resume - a function that resumes the processing of
 * queued tasks when the queue is paused. Invoke with `queue.resume()`.
 * @property {Function} kill - a function that removes the `drain` callback and
 * empties remaining tasks from the queue forcing it to go idle. No more tasks
 * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.
 */

/**
 * Creates a `queue` object with the specified `concurrency`. Tasks added to the
 * `queue` are processed in parallel (up to the `concurrency` limit). If all
 * `worker`s are in progress, the task is queued until one becomes available.
 * Once a `worker` completes a `task`, that `task`'s callback is called.
 *
 * @name queue
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {AsyncFunction} worker - An async function for processing a queued task.
 * If you want to handle errors from an individual task, pass a callback to
 * `q.push()`. Invoked with (task, callback).
 * @param {number} [concurrency=1] - An `integer` for determining how many
 * `worker` functions should be run in parallel.  If omitted, the concurrency
 * defaults to `1`.  If the concurrency is `0`, an error is thrown.
 * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can
 * attached as certain properties to listen for specific events during the
 * lifecycle of the queue.
 * @example
 *
 * // create a queue object with concurrency 2
 * var q = async.queue(function(task, callback) {
 *     console.log('hello ' + task.name);
 *     callback();
 * }, 2);
 *
 * // assign a callback
 * q.drain = function() {
 *     console.log('all items have been processed');
 * };
 *
 * // add some items to the queue
 * q.push({name: 'foo'}, function(err) {
 *     console.log('finished processing foo');
 * });
 * q.push({name: 'bar'}, function (err) {
 *     console.log('finished processing bar');
 * });
 *
 * // add some items to the queue (batch-wise)
 * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {
 *     console.log('finished processing item');
 * });
 *
 * // add some items to the front of the queue
 * q.unshift({name: 'bar'}, function (err) {
 *     console.log('finished processing bar');
 * });
 */
var queue$1 = function (worker, concurrency) {
    var _worker = wrapAsync(worker);
    return queue(function (items, cb) {
        _worker(items[0], cb);
    }, concurrency, 1);
};

/**
 * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and
 * completed in ascending priority order.
 *
 * @name priorityQueue
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.queue]{@link module:ControlFlow.queue}
 * @category Control Flow
 * @param {AsyncFunction} worker - An async function for processing a queued task.
 * If you want to handle errors from an individual task, pass a callback to
 * `q.push()`.
 * Invoked with (task, callback).
 * @param {number} concurrency - An `integer` for determining how many `worker`
 * functions should be run in parallel.  If omitted, the concurrency defaults to
 * `1`.  If the concurrency is `0`, an error is thrown.
 * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two
 * differences between `queue` and `priorityQueue` objects:
 * * `push(task, priority, [callback])` - `priority` should be a number. If an
 *   array of `tasks` is given, all tasks will be assigned the same priority.
 * * The `unshift` method was removed.
 */
var priorityQueue = function(worker, concurrency) {
    // Start with a normal queue
    var q = queue$1(worker, concurrency);

    // Override push to accept second parameter representing priority
    q.push = function(data, priority, callback) {
        if (callback == null) callback = noop;
        if (typeof callback !== 'function') {
            throw new Error('task callback must be a function');
        }
        q.started = true;
        if (!isArray(data)) {
            data = [data];
        }
        if (data.length === 0) {
            // call drain immediately if there are no tasks
            return setImmediate$1(function() {
                q.drain();
            });
        }

        priority = priority || 0;
        var nextNode = q._tasks.head;
        while (nextNode && priority >= nextNode.priority) {
            nextNode = nextNode.next;
        }

        for (var i = 0, l = data.length; i < l; i++) {
            var item = {
                data: data[i],
                priority: priority,
                callback: callback
            };

            if (nextNode) {
                q._tasks.insertBefore(nextNode, item);
            } else {
                q._tasks.push(item);
            }
        }
        setImmediate$1(q.process);
    };

    // Remove unshift function
    delete q.unshift;

    return q;
};

/**
 * Runs the `tasks` array of functions in parallel, without waiting until the
 * previous function has completed. Once any of the `tasks` complete or pass an
 * error to its callback, the main `callback` is immediately called. It's
 * equivalent to `Promise.race()`.
 *
 * @name race
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}
 * to run. Each function can complete with an optional `result` value.
 * @param {Function} callback - A callback to run once any of the functions have
 * completed. This function gets an error or result from the first function that
 * completed. Invoked with (err, result).
 * @returns undefined
 * @example
 *
 * async.race([
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'two');
 *         }, 100);
 *     }
 * ],
 * // main callback
 * function(err, result) {
 *     // the result will be equal to 'two' as it finishes earlier
 * });
 */
function race(tasks, callback) {
    callback = once(callback || noop);
    if (!isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));
    if (!tasks.length) return callback();
    for (var i = 0, l = tasks.length; i < l; i++) {
        wrapAsync(tasks[i])(callback);
    }
}

/**
 * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.
 *
 * @name reduceRight
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.reduce]{@link module:Collections.reduce}
 * @alias foldr
 * @category Collection
 * @param {Array} array - A collection to iterate over.
 * @param {*} memo - The initial state of the reduction.
 * @param {AsyncFunction} iteratee - A function applied to each item in the
 * array to produce the next step in the reduction.
 * The `iteratee` should complete with the next state of the reduction.
 * If the iteratee complete with an error, the reduction is stopped and the
 * main `callback` is immediately called with the error.
 * Invoked with (memo, item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result is the reduced value. Invoked with
 * (err, result).
 */
function reduceRight (array, memo, iteratee, callback) {
    var reversed = slice(array).reverse();
    reduce(reversed, memo, iteratee, callback);
}

/**
 * Wraps the async function in another function that always completes with a
 * result object, even when it errors.
 *
 * The result object has either the property `error` or `value`.
 *
 * @name reflect
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} fn - The async function you want to wrap
 * @returns {Function} - A function that always passes null to it's callback as
 * the error. The second argument to the callback will be an `object` with
 * either an `error` or a `value` property.
 * @example
 *
 * async.parallel([
 *     async.reflect(function(callback) {
 *         // do some stuff ...
 *         callback(null, 'one');
 *     }),
 *     async.reflect(function(callback) {
 *         // do some more stuff but error ...
 *         callback('bad stuff happened');
 *     }),
 *     async.reflect(function(callback) {
 *         // do some more stuff ...
 *         callback(null, 'two');
 *     })
 * ],
 * // optional callback
 * function(err, results) {
 *     // values
 *     // results[0].value = 'one'
 *     // results[1].error = 'bad stuff happened'
 *     // results[2].value = 'two'
 * });
 */
function reflect(fn) {
    var _fn = wrapAsync(fn);
    return initialParams(function reflectOn(args, reflectCallback) {
        args.push(function callback(error, cbArg) {
            if (error) {
                reflectCallback(null, { error: error });
            } else {
                var value;
                if (arguments.length <= 2) {
                    value = cbArg;
                } else {
                    value = slice(arguments, 1);
                }
                reflectCallback(null, { value: value });
            }
        });

        return _fn.apply(this, args);
    });
}

/**
 * A helper function that wraps an array or an object of functions with `reflect`.
 *
 * @name reflectAll
 * @static
 * @memberOf module:Utils
 * @method
 * @see [async.reflect]{@link module:Utils.reflect}
 * @category Util
 * @param {Array|Object|Iterable} tasks - The collection of
 * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.
 * @returns {Array} Returns an array of async functions, each wrapped in
 * `async.reflect`
 * @example
 *
 * let tasks = [
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     function(callback) {
 *         // do some more stuff but error ...
 *         callback(new Error('bad stuff happened'));
 *     },
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'two');
 *         }, 100);
 *     }
 * ];
 *
 * async.parallel(async.reflectAll(tasks),
 * // optional callback
 * function(err, results) {
 *     // values
 *     // results[0].value = 'one'
 *     // results[1].error = Error('bad stuff happened')
 *     // results[2].value = 'two'
 * });
 *
 * // an example using an object instead of an array
 * let tasks = {
 *     one: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     two: function(callback) {
 *         callback('two');
 *     },
 *     three: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'three');
 *         }, 100);
 *     }
 * };
 *
 * async.parallel(async.reflectAll(tasks),
 * // optional callback
 * function(err, results) {
 *     // values
 *     // results.one.value = 'one'
 *     // results.two.error = 'two'
 *     // results.three.value = 'three'
 * });
 */
function reflectAll(tasks) {
    var results;
    if (isArray(tasks)) {
        results = arrayMap(tasks, reflect);
    } else {
        results = {};
        baseForOwn(tasks, function(task, key) {
            results[key] = reflect.call(this, task);
        });
    }
    return results;
}

function reject$1(eachfn, arr, iteratee, callback) {
    _filter(eachfn, arr, function(value, cb) {
        iteratee(value, function(err, v) {
            cb(err, !v);
        });
    }, callback);
}

/**
 * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.
 *
 * @name reject
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.filter]{@link module:Collections.filter}
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {Function} iteratee - An async truth test to apply to each item in
 * `coll`.
 * The should complete with a boolean value as its `result`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 * @example
 *
 * async.reject(['file1','file2','file3'], function(filePath, callback) {
 *     fs.access(filePath, function(err) {
 *         callback(null, !err)
 *     });
 * }, function(err, results) {
 *     // results now equals an array of missing files
 *     createFiles(results);
 * });
 */
var reject = doParallel(reject$1);

/**
 * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name rejectLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.reject]{@link module:Collections.reject}
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {Function} iteratee - An async truth test to apply to each item in
 * `coll`.
 * The should complete with a boolean value as its `result`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 */
var rejectLimit = doParallelLimit(reject$1);

/**
 * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.
 *
 * @name rejectSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.reject]{@link module:Collections.reject}
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {Function} iteratee - An async truth test to apply to each item in
 * `coll`.
 * The should complete with a boolean value as its `result`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 */
var rejectSeries = doLimit(rejectLimit, 1);

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant$1(value) {
  return function() {
    return value;
  };
}

/**
 * Attempts to get a successful response from `task` no more than `times` times
 * before returning an error. If the task is successful, the `callback` will be
 * passed the result of the successful task. If all attempts fail, the callback
 * will be passed the error and result (if any) of the final attempt.
 *
 * @name retry
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @see [async.retryable]{@link module:ControlFlow.retryable}
 * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an
 * object with `times` and `interval` or a number.
 * * `times` - The number of attempts to make before giving up.  The default
 *   is `5`.
 * * `interval` - The time to wait between retries, in milliseconds.  The
 *   default is `0`. The interval may also be specified as a function of the
 *   retry count (see example).
 * * `errorFilter` - An optional synchronous function that is invoked on
 *   erroneous result. If it returns `true` the retry attempts will continue;
 *   if the function returns `false` the retry flow is aborted with the current
 *   attempt's error and result being returned to the final callback.
 *   Invoked with (err).
 * * If `opts` is a number, the number specifies the number of times to retry,
 *   with the default interval of `0`.
 * @param {AsyncFunction} task - An async function to retry.
 * Invoked with (callback).
 * @param {Function} [callback] - An optional callback which is called when the
 * task has succeeded, or after the final failed attempt. It receives the `err`
 * and `result` arguments of the last attempt at completing the `task`. Invoked
 * with (err, results).
 *
 * @example
 *
 * // The `retry` function can be used as a stand-alone control flow by passing
 * // a callback, as shown below:
 *
 * // try calling apiMethod 3 times
 * async.retry(3, apiMethod, function(err, result) {
 *     // do something with the result
 * });
 *
 * // try calling apiMethod 3 times, waiting 200 ms between each retry
 * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {
 *     // do something with the result
 * });
 *
 * // try calling apiMethod 10 times with exponential backoff
 * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)
 * async.retry({
 *   times: 10,
 *   interval: function(retryCount) {
 *     return 50 * Math.pow(2, retryCount);
 *   }
 * }, apiMethod, function(err, result) {
 *     // do something with the result
 * });
 *
 * // try calling apiMethod the default 5 times no delay between each retry
 * async.retry(apiMethod, function(err, result) {
 *     // do something with the result
 * });
 *
 * // try calling apiMethod only when error condition satisfies, all other
 * // errors will abort the retry control flow and return to final callback
 * async.retry({
 *   errorFilter: function(err) {
 *     return err.message === 'Temporary error'; // only retry on a specific error
 *   }
 * }, apiMethod, function(err, result) {
 *     // do something with the result
 * });
 *
 * // to retry individual methods that are not as reliable within other
 * // control flow functions, use the `retryable` wrapper:
 * async.auto({
 *     users: api.getUsers.bind(api),
 *     payments: async.retryable(3, api.getPayments.bind(api))
 * }, function(err, results) {
 *     // do something with the results
 * });
 *
 */
function retry(opts, task, callback) {
    var DEFAULT_TIMES = 5;
    var DEFAULT_INTERVAL = 0;

    var options = {
        times: DEFAULT_TIMES,
        intervalFunc: constant$1(DEFAULT_INTERVAL)
    };

    function parseTimes(acc, t) {
        if (typeof t === 'object') {
            acc.times = +t.times || DEFAULT_TIMES;

            acc.intervalFunc = typeof t.interval === 'function' ?
                t.interval :
                constant$1(+t.interval || DEFAULT_INTERVAL);

            acc.errorFilter = t.errorFilter;
        } else if (typeof t === 'number' || typeof t === 'string') {
            acc.times = +t || DEFAULT_TIMES;
        } else {
            throw new Error("Invalid arguments for async.retry");
        }
    }

    if (arguments.length < 3 && typeof opts === 'function') {
        callback = task || noop;
        task = opts;
    } else {
        parseTimes(options, opts);
        callback = callback || noop;
    }

    if (typeof task !== 'function') {
        throw new Error("Invalid arguments for async.retry");
    }

    var _task = wrapAsync(task);

    var attempt = 1;
    function retryAttempt() {
        _task(function(err) {
            if (err && attempt++ < options.times &&
                (typeof options.errorFilter != 'function' ||
                    options.errorFilter(err))) {
                setTimeout(retryAttempt, options.intervalFunc(attempt));
            } else {
                callback.apply(null, arguments);
            }
        });
    }

    retryAttempt();
}

/**
 * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method
 * wraps a task and makes it retryable, rather than immediately calling it
 * with retries.
 *
 * @name retryable
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.retry]{@link module:ControlFlow.retry}
 * @category Control Flow
 * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional
 * options, exactly the same as from `retry`
 * @param {AsyncFunction} task - the asynchronous function to wrap.
 * This function will be passed any arguments passed to the returned wrapper.
 * Invoked with (...args, callback).
 * @returns {AsyncFunction} The wrapped function, which when invoked, will
 * retry on an error, based on the parameters specified in `opts`.
 * This function will accept the same parameters as `task`.
 * @example
 *
 * async.auto({
 *     dep1: async.retryable(3, getFromFlakyService),
 *     process: ["dep1", async.retryable(3, function (results, cb) {
 *         maybeProcessData(results.dep1, cb);
 *     })]
 * }, callback);
 */
var retryable = function (opts, task) {
    if (!task) {
        task = opts;
        opts = null;
    }
    var _task = wrapAsync(task);
    return initialParams(function (args, callback) {
        function taskFn(cb) {
            _task.apply(null, args.concat(cb));
        }

        if (opts) retry(opts, taskFn, callback);
        else retry(taskFn, callback);

    });
};

/**
 * Run the functions in the `tasks` collection in series, each one running once
 * the previous function has completed. If any functions in the series pass an
 * error to its callback, no more functions are run, and `callback` is
 * immediately called with the value of the error. Otherwise, `callback`
 * receives an array of results when `tasks` have completed.
 *
 * It is also possible to use an object instead of an array. Each property will
 * be run as a function, and the results will be passed to the final `callback`
 * as an object instead of an array. This can be a more readable way of handling
 *  results from {@link async.series}.
 *
 * **Note** that while many implementations preserve the order of object
 * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)
 * explicitly states that
 *
 * > The mechanics and order of enumerating the properties is not specified.
 *
 * So if you rely on the order in which your series of functions are executed,
 * and want this to work on all platforms, consider using an array.
 *
 * @name series
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array|Iterable|Object} tasks - A collection containing
 * [async functions]{@link AsyncFunction} to run in series.
 * Each function can complete with any number of optional `result` values.
 * @param {Function} [callback] - An optional callback to run once all the
 * functions have completed. This function gets a results array (or object)
 * containing all the result arguments passed to the `task` callbacks. Invoked
 * with (err, result).
 * @example
 * async.series([
 *     function(callback) {
 *         // do some stuff ...
 *         callback(null, 'one');
 *     },
 *     function(callback) {
 *         // do some more stuff ...
 *         callback(null, 'two');
 *     }
 * ],
 * // optional callback
 * function(err, results) {
 *     // results is now equal to ['one', 'two']
 * });
 *
 * async.series({
 *     one: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 1);
 *         }, 200);
 *     },
 *     two: function(callback){
 *         setTimeout(function() {
 *             callback(null, 2);
 *         }, 100);
 *     }
 * }, function(err, results) {
 *     // results is now equal to: {one: 1, two: 2}
 * });
 */
function series(tasks, callback) {
    _parallel(eachOfSeries, tasks, callback);
}

/**
 * Returns `true` if at least one element in the `coll` satisfies an async test.
 * If any iteratee call returns `true`, the main `callback` is immediately
 * called.
 *
 * @name some
 * @static
 * @memberOf module:Collections
 * @method
 * @alias any
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collections in parallel.
 * The iteratee should complete with a boolean `result` value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the iteratee functions have finished.
 * Result will be either `true` or `false` depending on the values of the async
 * tests. Invoked with (err, result).
 * @example
 *
 * async.some(['file1','file2','file3'], function(filePath, callback) {
 *     fs.access(filePath, function(err) {
 *         callback(null, !err)
 *     });
 * }, function(err, result) {
 *     // if result is true then at least one of the files exists
 * });
 */
var some = doParallel(_createTester(Boolean, identity));

/**
 * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.
 *
 * @name someLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.some]{@link module:Collections.some}
 * @alias anyLimit
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collections in parallel.
 * The iteratee should complete with a boolean `result` value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the iteratee functions have finished.
 * Result will be either `true` or `false` depending on the values of the async
 * tests. Invoked with (err, result).
 */
var someLimit = doParallelLimit(_createTester(Boolean, identity));

/**
 * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.
 *
 * @name someSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.some]{@link module:Collections.some}
 * @alias anySeries
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collections in series.
 * The iteratee should complete with a boolean `result` value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the iteratee functions have finished.
 * Result will be either `true` or `false` depending on the values of the async
 * tests. Invoked with (err, result).
 */
var someSeries = doLimit(someLimit, 1);

/**
 * Sorts a list by the results of running each `coll` value through an async
 * `iteratee`.
 *
 * @name sortBy
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with a value to use as the sort criteria as
 * its `result`.
 * Invoked with (item, callback).
 * @param {Function} callback - A callback which is called after all the
 * `iteratee` functions have finished, or an error occurs. Results is the items
 * from the original `coll` sorted by the values returned by the `iteratee`
 * calls. Invoked with (err, results).
 * @example
 *
 * async.sortBy(['file1','file2','file3'], function(file, callback) {
 *     fs.stat(file, function(err, stats) {
 *         callback(err, stats.mtime);
 *     });
 * }, function(err, results) {
 *     // results is now the original array of files sorted by
 *     // modified date
 * });
 *
 * // By modifying the callback parameter the
 * // sorting order can be influenced:
 *
 * // ascending order
 * async.sortBy([1,9,3,5], function(x, callback) {
 *     callback(null, x);
 * }, function(err,result) {
 *     // result callback
 * });
 *
 * // descending order
 * async.sortBy([1,9,3,5], function(x, callback) {
 *     callback(null, x*-1);    //<- x*-1 instead of x, turns the order around
 * }, function(err,result) {
 *     // result callback
 * });
 */
function sortBy (coll, iteratee, callback) {
    var _iteratee = wrapAsync(iteratee);
    map(coll, function (x, callback) {
        _iteratee(x, function (err, criteria) {
            if (err) return callback(err);
            callback(null, {value: x, criteria: criteria});
        });
    }, function (err, results) {
        if (err) return callback(err);
        callback(null, arrayMap(results.sort(comparator), baseProperty('value')));
    });

    function comparator(left, right) {
        var a = left.criteria, b = right.criteria;
        return a < b ? -1 : a > b ? 1 : 0;
    }
}

/**
 * Sets a time limit on an asynchronous function. If the function does not call
 * its callback within the specified milliseconds, it will be called with a
 * timeout error. The code property for the error object will be `'ETIMEDOUT'`.
 *
 * @name timeout
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} asyncFn - The async function to limit in time.
 * @param {number} milliseconds - The specified time limit.
 * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)
 * to timeout Error for more information..
 * @returns {AsyncFunction} Returns a wrapped function that can be used with any
 * of the control flow functions.
 * Invoke this function with the same parameters as you would `asyncFunc`.
 * @example
 *
 * function myFunction(foo, callback) {
 *     doAsyncTask(foo, function(err, data) {
 *         // handle errors
 *         if (err) return callback(err);
 *
 *         // do some stuff ...
 *
 *         // return processed data
 *         return callback(null, data);
 *     });
 * }
 *
 * var wrapped = async.timeout(myFunction, 1000);
 *
 * // call `wrapped` as you would `myFunction`
 * wrapped({ bar: 'bar' }, function(err, data) {
 *     // if `myFunction` takes < 1000 ms to execute, `err`
 *     // and `data` will have their expected values
 *
 *     // else `err` will be an Error with the code 'ETIMEDOUT'
 * });
 */
function timeout(asyncFn, milliseconds, info) {
    var fn = wrapAsync(asyncFn);

    return initialParams(function (args, callback) {
        var timedOut = false;
        var timer;

        function timeoutCallback() {
            var name = asyncFn.name || 'anonymous';
            var error  = new Error('Callback function "' + name + '" timed out.');
            error.code = 'ETIMEDOUT';
            if (info) {
                error.info = info;
            }
            timedOut = true;
            callback(error);
        }

        args.push(function () {
            if (!timedOut) {
                callback.apply(null, arguments);
                clearTimeout(timer);
            }
        });

        // setup timer and call original function
        timer = setTimeout(timeoutCallback, milliseconds);
        fn.apply(null, args);
    });
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeCeil = Math.ceil;
var nativeMax = Math.max;

/**
 * The base implementation of `_.range` and `_.rangeRight` which doesn't
 * coerce arguments.
 *
 * @private
 * @param {number} start The start of the range.
 * @param {number} end The end of the range.
 * @param {number} step The value to increment or decrement by.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Array} Returns the range of numbers.
 */
function baseRange(start, end, step, fromRight) {
  var index = -1,
      length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
      result = Array(length);

  while (length--) {
    result[fromRight ? length : ++index] = start;
    start += step;
  }
  return result;
}

/**
 * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name timesLimit
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.times]{@link module:ControlFlow.times}
 * @category Control Flow
 * @param {number} count - The number of times to run the function.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - The async function to call `n` times.
 * Invoked with the iteration index and a callback: (n, next).
 * @param {Function} callback - see [async.map]{@link module:Collections.map}.
 */
function timeLimit(count, limit, iteratee, callback) {
    var _iteratee = wrapAsync(iteratee);
    mapLimit(baseRange(0, count, 1), limit, _iteratee, callback);
}

/**
 * Calls the `iteratee` function `n` times, and accumulates results in the same
 * manner you would use with [map]{@link module:Collections.map}.
 *
 * @name times
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.map]{@link module:Collections.map}
 * @category Control Flow
 * @param {number} n - The number of times to run the function.
 * @param {AsyncFunction} iteratee - The async function to call `n` times.
 * Invoked with the iteration index and a callback: (n, next).
 * @param {Function} callback - see {@link module:Collections.map}.
 * @example
 *
 * // Pretend this is some complicated async factory
 * var createUser = function(id, callback) {
 *     callback(null, {
 *         id: 'user' + id
 *     });
 * };
 *
 * // generate 5 users
 * async.times(5, function(n, next) {
 *     createUser(n, function(err, user) {
 *         next(err, user);
 *     });
 * }, function(err, users) {
 *     // we should now have 5 users
 * });
 */
var times = doLimit(timeLimit, Infinity);

/**
 * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.
 *
 * @name timesSeries
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.times]{@link module:ControlFlow.times}
 * @category Control Flow
 * @param {number} n - The number of times to run the function.
 * @param {AsyncFunction} iteratee - The async function to call `n` times.
 * Invoked with the iteration index and a callback: (n, next).
 * @param {Function} callback - see {@link module:Collections.map}.
 */
var timesSeries = doLimit(timeLimit, 1);

/**
 * A relative of `reduce`.  Takes an Object or Array, and iterates over each
 * element in series, each step potentially mutating an `accumulator` value.
 * The type of the accumulator defaults to the type of collection passed in.
 *
 * @name transform
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {*} [accumulator] - The initial state of the transform.  If omitted,
 * it will default to an empty Object or Array, depending on the type of `coll`
 * @param {AsyncFunction} iteratee - A function applied to each item in the
 * collection that potentially modifies the accumulator.
 * Invoked with (accumulator, item, key, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result is the transformed accumulator.
 * Invoked with (err, result).
 * @example
 *
 * async.transform([1,2,3], function(acc, item, index, callback) {
 *     // pointless async:
 *     process.nextTick(function() {
 *         acc.push(item * 2)
 *         callback(null)
 *     });
 * }, function(err, result) {
 *     // result is now equal to [2, 4, 6]
 * });
 *
 * @example
 *
 * async.transform({a: 1, b: 2, c: 3}, function (obj, val, key, callback) {
 *     setImmediate(function () {
 *         obj[key] = val * 2;
 *         callback();
 *     })
 * }, function (err, result) {
 *     // result is equal to {a: 2, b: 4, c: 6}
 * })
 */
function transform (coll, accumulator, iteratee, callback) {
    if (arguments.length <= 3) {
        callback = iteratee;
        iteratee = accumulator;
        accumulator = isArray(coll) ? [] : {};
    }
    callback = once(callback || noop);
    var _iteratee = wrapAsync(iteratee);

    eachOf(coll, function(v, k, cb) {
        _iteratee(accumulator, v, k, cb);
    }, function(err) {
        callback(err, accumulator);
    });
}

/**
 * It runs each task in series but stops whenever any of the functions were
 * successful. If one of the tasks were successful, the `callback` will be
 * passed the result of the successful task. If all tasks fail, the callback
 * will be passed the error and result (if any) of the final attempt.
 *
 * @name tryEach
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array|Iterable|Object} tasks - A collection containing functions to
 * run, each function is passed a `callback(err, result)` it must call on
 * completion with an error `err` (which can be `null`) and an optional `result`
 * value.
 * @param {Function} [callback] - An optional callback which is called when one
 * of the tasks has succeeded, or all have failed. It receives the `err` and
 * `result` arguments of the last attempt at completing the `task`. Invoked with
 * (err, results).
 * @example
 * async.tryEach([
 *     function getDataFromFirstWebsite(callback) {
 *         // Try getting the data from the first website
 *         callback(err, data);
 *     },
 *     function getDataFromSecondWebsite(callback) {
 *         // First website failed,
 *         // Try getting the data from the backup website
 *         callback(err, data);
 *     }
 * ],
 * // optional callback
 * function(err, results) {
 *     Now do something with the data.
 * });
 *
 */
function tryEach(tasks, callback) {
    var error = null;
    var result;
    callback = callback || noop;
    eachSeries(tasks, function(task, callback) {
        wrapAsync(task)(function (err, res/*, ...args*/) {
            if (arguments.length > 2) {
                result = slice(arguments, 1);
            } else {
                result = res;
            }
            error = err;
            callback(!err);
        });
    }, function () {
        callback(error, result);
    });
}

/**
 * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,
 * unmemoized form. Handy for testing.
 *
 * @name unmemoize
 * @static
 * @memberOf module:Utils
 * @method
 * @see [async.memoize]{@link module:Utils.memoize}
 * @category Util
 * @param {AsyncFunction} fn - the memoized function
 * @returns {AsyncFunction} a function that calls the original unmemoized function
 */
function unmemoize(fn) {
    return function () {
        return (fn.unmemoized || fn).apply(null, arguments);
    };
}

/**
 * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when
 * stopped, or an error occurs.
 *
 * @name whilst
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Function} test - synchronous truth test to perform before each
 * execution of `iteratee`. Invoked with ().
 * @param {AsyncFunction} iteratee - An async function which is called each time
 * `test` passes. Invoked with (callback).
 * @param {Function} [callback] - A callback which is called after the test
 * function has failed and repeated execution of `iteratee` has stopped. `callback`
 * will be passed an error and any arguments passed to the final `iteratee`'s
 * callback. Invoked with (err, [results]);
 * @returns undefined
 * @example
 *
 * var count = 0;
 * async.whilst(
 *     function() { return count < 5; },
 *     function(callback) {
 *         count++;
 *         setTimeout(function() {
 *             callback(null, count);
 *         }, 1000);
 *     },
 *     function (err, n) {
 *         // 5 seconds have passed, n = 5
 *     }
 * );
 */
function whilst(test, iteratee, callback) {
    callback = onlyOnce(callback || noop);
    var _iteratee = wrapAsync(iteratee);
    if (!test()) return callback(null);
    var next = function(err/*, ...args*/) {
        if (err) return callback(err);
        if (test()) return _iteratee(next);
        var args = slice(arguments, 1);
        callback.apply(null, [null].concat(args));
    };
    _iteratee(next);
}

/**
 * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when
 * stopped, or an error occurs. `callback` will be passed an error and any
 * arguments passed to the final `iteratee`'s callback.
 *
 * The inverse of [whilst]{@link module:ControlFlow.whilst}.
 *
 * @name until
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.whilst]{@link module:ControlFlow.whilst}
 * @category Control Flow
 * @param {Function} test - synchronous truth test to perform before each
 * execution of `iteratee`. Invoked with ().
 * @param {AsyncFunction} iteratee - An async function which is called each time
 * `test` fails. Invoked with (callback).
 * @param {Function} [callback] - A callback which is called after the test
 * function has passed and repeated execution of `iteratee` has stopped. `callback`
 * will be passed an error and any arguments passed to the final `iteratee`'s
 * callback. Invoked with (err, [results]);
 */
function until(test, iteratee, callback) {
    whilst(function() {
        return !test.apply(this, arguments);
    }, iteratee, callback);
}

/**
 * Runs the `tasks` array of functions in series, each passing their results to
 * the next in the array. However, if any of the `tasks` pass an error to their
 * own callback, the next function is not executed, and the main `callback` is
 * immediately called with the error.
 *
 * @name waterfall
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}
 * to run.
 * Each function should complete with any number of `result` values.
 * The `result` values will be passed as arguments, in order, to the next task.
 * @param {Function} [callback] - An optional callback to run once all the
 * functions have completed. This will be passed the results of the last task's
 * callback. Invoked with (err, [results]).
 * @returns undefined
 * @example
 *
 * async.waterfall([
 *     function(callback) {
 *         callback(null, 'one', 'two');
 *     },
 *     function(arg1, arg2, callback) {
 *         // arg1 now equals 'one' and arg2 now equals 'two'
 *         callback(null, 'three');
 *     },
 *     function(arg1, callback) {
 *         // arg1 now equals 'three'
 *         callback(null, 'done');
 *     }
 * ], function (err, result) {
 *     // result now equals 'done'
 * });
 *
 * // Or, with named functions:
 * async.waterfall([
 *     myFirstFunction,
 *     mySecondFunction,
 *     myLastFunction,
 * ], function (err, result) {
 *     // result now equals 'done'
 * });
 * function myFirstFunction(callback) {
 *     callback(null, 'one', 'two');
 * }
 * function mySecondFunction(arg1, arg2, callback) {
 *     // arg1 now equals 'one' and arg2 now equals 'two'
 *     callback(null, 'three');
 * }
 * function myLastFunction(arg1, callback) {
 *     // arg1 now equals 'three'
 *     callback(null, 'done');
 * }
 */
var waterfall = function(tasks, callback) {
    callback = once(callback || noop);
    if (!isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));
    if (!tasks.length) return callback();
    var taskIndex = 0;

    function nextTask(args) {
        var task = wrapAsync(tasks[taskIndex++]);
        args.push(onlyOnce(next));
        task.apply(null, args);
    }

    function next(err/*, ...args*/) {
        if (err || taskIndex === tasks.length) {
            return callback.apply(null, arguments);
        }
        nextTask(slice(arguments, 1));
    }

    nextTask([]);
};

/**
 * An "async function" in the context of Async is an asynchronous function with
 * a variable number of parameters, with the final parameter being a callback.
 * (`function (arg1, arg2, ..., callback) {}`)
 * The final callback is of the form `callback(err, results...)`, which must be
 * called once the function is completed.  The callback should be called with a
 * Error as its first argument to signal that an error occurred.
 * Otherwise, if no error occurred, it should be called with `null` as the first
 * argument, and any additional `result` arguments that may apply, to signal
 * successful completion.
 * The callback must be called exactly once, ideally on a later tick of the
 * JavaScript event loop.
 *
 * This type of function is also referred to as a "Node-style async function",
 * or a "continuation passing-style function" (CPS). Most of the methods of this
 * library are themselves CPS/Node-style async functions, or functions that
 * return CPS/Node-style async functions.
 *
 * Wherever we accept a Node-style async function, we also directly accept an
 * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.
 * In this case, the `async` function will not be passed a final callback
 * argument, and any thrown error will be used as the `err` argument of the
 * implicit callback, and the return value will be used as the `result` value.
 * (i.e. a `rejected` of the returned Promise becomes the `err` callback
 * argument, and a `resolved` value becomes the `result`.)
 *
 * Note, due to JavaScript limitations, we can only detect native `async`
 * functions and not transpilied implementations.
 * Your environment must have `async`/`await` support for this to work.
 * (e.g. Node > v7.6, or a recent version of a modern browser).
 * If you are using `async` functions through a transpiler (e.g. Babel), you
 * must still wrap the function with [asyncify]{@link module:Utils.asyncify},
 * because the `async function` will be compiled to an ordinary function that
 * returns a promise.
 *
 * @typedef {Function} AsyncFunction
 * @static
 */

/**
 * Async is a utility module which provides straight-forward, powerful functions
 * for working with asynchronous JavaScript. Although originally designed for
 * use with [Node.js](http://nodejs.org) and installable via
 * `npm install --save async`, it can also be used directly in the browser.
 * @module async
 * @see AsyncFunction
 */


/**
 * A collection of `async` functions for manipulating collections, such as
 * arrays and objects.
 * @module Collections
 */

/**
 * A collection of `async` functions for controlling the flow through a script.
 * @module ControlFlow
 */

/**
 * A collection of `async` utility functions.
 * @module Utils
 */

var index = {
    apply: apply,
    applyEach: applyEach,
    applyEachSeries: applyEachSeries,
    asyncify: asyncify,
    auto: auto,
    autoInject: autoInject,
    cargo: cargo,
    compose: compose,
    concat: concat,
    concatLimit: concatLimit,
    concatSeries: concatSeries,
    constant: constant,
    detect: detect,
    detectLimit: detectLimit,
    detectSeries: detectSeries,
    dir: dir,
    doDuring: doDuring,
    doUntil: doUntil,
    doWhilst: doWhilst,
    during: during,
    each: eachLimit,
    eachLimit: eachLimit$1,
    eachOf: eachOf,
    eachOfLimit: eachOfLimit,
    eachOfSeries: eachOfSeries,
    eachSeries: eachSeries,
    ensureAsync: ensureAsync,
    every: every,
    everyLimit: everyLimit,
    everySeries: everySeries,
    filter: filter,
    filterLimit: filterLimit,
    filterSeries: filterSeries,
    forever: forever,
    groupBy: groupBy,
    groupByLimit: groupByLimit,
    groupBySeries: groupBySeries,
    log: log,
    map: map,
    mapLimit: mapLimit,
    mapSeries: mapSeries,
    mapValues: mapValues,
    mapValuesLimit: mapValuesLimit,
    mapValuesSeries: mapValuesSeries,
    memoize: memoize,
    nextTick: nextTick,
    parallel: parallelLimit,
    parallelLimit: parallelLimit$1,
    priorityQueue: priorityQueue,
    queue: queue$1,
    race: race,
    reduce: reduce,
    reduceRight: reduceRight,
    reflect: reflect,
    reflectAll: reflectAll,
    reject: reject,
    rejectLimit: rejectLimit,
    rejectSeries: rejectSeries,
    retry: retry,
    retryable: retryable,
    seq: seq,
    series: series,
    setImmediate: setImmediate$1,
    some: some,
    someLimit: someLimit,
    someSeries: someSeries,
    sortBy: sortBy,
    timeout: timeout,
    times: times,
    timesLimit: timeLimit,
    timesSeries: timesSeries,
    transform: transform,
    tryEach: tryEach,
    unmemoize: unmemoize,
    until: until,
    waterfall: waterfall,
    whilst: whilst,

    // aliases
    all: every,
    allLimit: everyLimit,
    allSeries: everySeries,
    any: some,
    anyLimit: someLimit,
    anySeries: someSeries,
    find: detect,
    findLimit: detectLimit,
    findSeries: detectSeries,
    forEach: eachLimit,
    forEachSeries: eachSeries,
    forEachLimit: eachLimit$1,
    forEachOf: eachOf,
    forEachOfSeries: eachOfSeries,
    forEachOfLimit: eachOfLimit,
    inject: reduce,
    foldl: reduce,
    foldr: reduceRight,
    select: filter,
    selectLimit: filterLimit,
    selectSeries: filterSeries,
    wrapSync: asyncify
};

exports['default'] = index;
exports.apply = apply;
exports.applyEach = applyEach;
exports.applyEachSeries = applyEachSeries;
exports.asyncify = asyncify;
exports.auto = auto;
exports.autoInject = autoInject;
exports.cargo = cargo;
exports.compose = compose;
exports.concat = concat;
exports.concatLimit = concatLimit;
exports.concatSeries = concatSeries;
exports.constant = constant;
exports.detect = detect;
exports.detectLimit = detectLimit;
exports.detectSeries = detectSeries;
exports.dir = dir;
exports.doDuring = doDuring;
exports.doUntil = doUntil;
exports.doWhilst = doWhilst;
exports.during = during;
exports.each = eachLimit;
exports.eachLimit = eachLimit$1;
exports.eachOf = eachOf;
exports.eachOfLimit = eachOfLimit;
exports.eachOfSeries = eachOfSeries;
exports.eachSeries = eachSeries;
exports.ensureAsync = ensureAsync;
exports.every = every;
exports.everyLimit = everyLimit;
exports.everySeries = everySeries;
exports.filter = filter;
exports.filterLimit = filterLimit;
exports.filterSeries = filterSeries;
exports.forever = forever;
exports.groupBy = groupBy;
exports.groupByLimit = groupByLimit;
exports.groupBySeries = groupBySeries;
exports.log = log;
exports.map = map;
exports.mapLimit = mapLimit;
exports.mapSeries = mapSeries;
exports.mapValues = mapValues;
exports.mapValuesLimit = mapValuesLimit;
exports.mapValuesSeries = mapValuesSeries;
exports.memoize = memoize;
exports.nextTick = nextTick;
exports.parallel = parallelLimit;
exports.parallelLimit = parallelLimit$1;
exports.priorityQueue = priorityQueue;
exports.queue = queue$1;
exports.race = race;
exports.reduce = reduce;
exports.reduceRight = reduceRight;
exports.reflect = reflect;
exports.reflectAll = reflectAll;
exports.reject = reject;
exports.rejectLimit = rejectLimit;
exports.rejectSeries = rejectSeries;
exports.retry = retry;
exports.retryable = retryable;
exports.seq = seq;
exports.series = series;
exports.setImmediate = setImmediate$1;
exports.some = some;
exports.someLimit = someLimit;
exports.someSeries = someSeries;
exports.sortBy = sortBy;
exports.timeout = timeout;
exports.times = times;
exports.timesLimit = timeLimit;
exports.timesSeries = timesSeries;
exports.transform = transform;
exports.tryEach = tryEach;
exports.unmemoize = unmemoize;
exports.until = until;
exports.waterfall = waterfall;
exports.whilst = whilst;
exports.all = every;
exports.allLimit = everyLimit;
exports.allSeries = everySeries;
exports.any = some;
exports.anyLimit = someLimit;
exports.anySeries = someSeries;
exports.find = detect;
exports.findLimit = detectLimit;
exports.findSeries = detectSeries;
exports.forEach = eachLimit;
exports.forEachSeries = eachSeries;
exports.forEachLimit = eachLimit$1;
exports.forEachOf = eachOf;
exports.forEachOfSeries = eachOfSeries;
exports.forEachOfLimit = eachOfLimit;
exports.inject = reduce;
exports.foldl = reduce;
exports.foldr = reduceRight;
exports.select = filter;
exports.selectLimit = filterLimit;
exports.selectSeries = filterSeries;
exports.wrapSync = asyncify;

Object.defineProperty(exports, '__esModule', { value: true });

})));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(74).setImmediate, __webpack_require__(0), __webpack_require__(1), __webpack_require__(10)(module)))

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/*!
* Copyright 2017 by ChartIQ, Inc.
* All rights reserved.
*/

var FSBLUtils = __webpack_require__(6);
var Logger = __webpack_require__(2);
/**
 *
 *
/**
 *
 *
/**
 *
 *
/**
 *
 *
 */
var ConfigUtil = function () {

	var self = this;

	/**
  * @introduction
  * <h2>Finsemble Configuration Utility Functions</h2>
  * @private
  * @class ConfigUtil
  */
	// run through the configuration object and resolve any variables definitions (i.e. $applicationRoot)
	this.resolveConfigVariables = function (finsembleConfig, startingConfigObject) {
		var pass = 0;
		var needsAnotherPass = true;

		// resolve a variable within a config string
		function resolveString(configString) {
			var seperators = /[/\\:?=&]/; // list of seperators in regex form (will add other seperators if needed)
			var tokens = configString.split(seperators);
			for (var i = 0; i < tokens.length; i++) {
				if (tokens[i][0] === "$") {
					// special variable character $ has to first char in string
					var variableReference = tokens[i].substring(1); // string off the leading $
					var variableResolution = finsembleConfig[variableReference]; // the variable value is another config property, which already must be set
					var newValue = configString.replace(tokens[i], variableResolution); // replace the variable reference with new value
					Logger.system.info("forceObjectsToLogger", "ConfigUtil.resolveConfigVariables:resolveString configString", tokens[i], variableReference, variableResolution, "oldvalue=", configString, "value=", newValue);
					needsAnotherPass = true; // <<-- here is the only place needsAnotherPass is set, since still resolving variables
					configString = newValue;
				}
			}
			return configString;
		}

		// process an array of config items looking for variables to resolve (a recursive routine)
		function resolveArray(configArray, pass, recursionLevel) {
			Logger.system.info("forceObjectsToLogger", "resolveArray", "pass", pass, "recursionLevel", recursionLevel, "configArray:", configArray);
			for (var i = 0; i < configArray.length; i++) {
				var value = configArray[i];
				if (typeof value === "string" && value.indexOf("$") > -1) {
					configArray[i] = resolveString(value);
				} else if (value instanceof Array) {
					resolveArray(value, pass, recursionLevel + 1); // array reference passed so don't need return value
				} else if (typeof value === "object") {
					resolveObject(value, pass, recursionLevel + 1); // object reference passed so don't need return value
				}
			}
		}

		// process an object of config properties looking for variables to resolve (a recursive routine)
		function resolveObject(configObject, pass, recursionLevel) {
			configObject = configObject || {}; // don't error on bad config
			Logger.system.info("forceObjectsToLogger", "ConfigUtil.resolveConfigVariables:resolveObject", "pass", pass, "recursionLevel", recursionLevel, "configObject:", configObject);
			Object.keys(configObject).forEach(function (key) {
				var value = configObject[key];
				if (typeof value === "string" && value.indexOf("$") > -1) {
					configObject[key] = resolveString(value);
				} else if (value instanceof Array) {
					resolveArray(value, pass, recursionLevel + 1); // array reference passed so don't need return value
				} else if (typeof value === "object") {
					resolveObject(value, pass, recursionLevel + 1); // object reference passed so don't need return value
				}
			});
		}

		// since variables may be nested, keep resolving till no more left
		while (needsAnotherPass) {
			needsAnotherPass = false; // don't need another pass afterwards unless a variable is resolved somewhere in finsembleConfig
			resolveObject(startingConfigObject, ++pass, 1);
		}
	};

	// This does mimimal processing of the manifest, just enough to support getting the router up, which is only expanding variables (e.g. moduleRoot) in the raw manifest
	this.getExpandedRawManifest = function (callback) {
		Logger.system.debug("ConfigUtil.getExpandedRawManifest starting");

		function getRawManifest(callback, application, level) {
			Logger.system.debug("forceObjectsToLogger", "ConfigUtil.getExpandedRawManifest:getRawManifest", application, level);

			application.getManifest(function (manifest) {
				// get raw openfin manifest
				Logger.system.debug("forceObjectsToLogger", "ConfigUtil.getExpandedRawManifest:getExpandedRawManifest: manifest retrieved. Pre-variable resolution", manifest);
				self.resolveConfigVariables(manifest.finsemble, manifest.finsemble); // resolve variables first time so can fild config config location
				Logger.system.debug("forceObjectsToLogger", "ConfigUtil.getExpandedRawManifest:getExpandedRawManifest:Complete. post-variable resolution", manifest);
				callback(manifest);
			}, function (err) {
				if (err) {
					Logger.system.error("ConfigUtil.getExpandedRawManifest:application.getManifest:err", err);
				}
				// no manifest so try parent
				application.getParentUuid(function (parentUuid) {
					var parentApplication = fin.desktop.Application.wrap(parentUuid);
					Logger.system.debug("forceObjectsToLogger", "uuid", parentUuid, "parentApplication", parentApplication);
					if (level < 10) {
						getRawManifest(callback, parentApplication, ++level);
					} else {
						// still could find so must be a problem (i.e. avoid infinite loop)
						callback("could not find manifest in parent applications");
					}
				});
			});
		}

		fin.desktop.main(function () {
			// make sure openfin is ready
			var application = fin.desktop.Application.getCurrent();
			getRawManifest(callback, application, 1);
		});
	};

	// async read of JSON config file
	this.readConfigFile = function (coreConfigFile, importCallback) {
		Logger.system.debug("fetching " + coreConfigFile);
		fetch(coreConfigFile, {
			credentials: "include"
		}).then(function (response) {
			return response.json();
		}).catch(function (err) {
			importCallback("failure importing: " + err, null);
		}).then(function (importObject) {
			importCallback(null, importObject);
		});
	};

	// This does a "first stage" processing of the manifest, providing enought config to start finsemble.
	// Pull in the initial manifest, which includes gettig the "hiddlen" core config file along with its import definitions, and expand all variables.
	// However, the full config processing, incluing actually doing the imports, is only done in the Config Service.
	this.getInitialManifest = function (callback) {

		fin.desktop.main(function () {
			// make sure openfin is ready
			var application = fin.desktop.Application.getCurrent();
			application.getManifest(function (manifest) {
				// get raw openfin manifest
				manifest.finsemble = manifest.finsemble || {}; // don't error on bad config
				self.resolveConfigVariables(manifest.finsemble, manifest.finsemble); // resolve variables first time so can find config config location
				let CORE_CONFIG = manifest.finsemble.moduleRoot + "/configs/core/config.json"; // <<<--- here is the "hidden" core config file
				self.readConfigFile(CORE_CONFIG, function (error, newFinsembleConfigObject) {
					// fetch the core config file
					if (!error) {
						Object.keys(newFinsembleConfigObject).forEach(function (key) {
							if (key === "importConfig") {
								// add any importConfig items from the core to the existing importConifg
								manifest.finsemble.importConfig = manifest.finsemble.importConfig || [];
								for (let i = 0; i < newFinsembleConfigObject.importConfig.length; i++) {
									manifest.finsemble.importConfig.unshift(newFinsembleConfigObject.importConfig[i]);
								}
							} else if (key === "importThirdPartyConfig") {
								// add any importThirdPartyConfig items from the core to the existing importConifg
								manifest.finsemble.importThirdPartyConfig = manifest.finsemble.importThirdPartyConfig || [];
								for (let i = 0; i < newFinsembleConfigObject.importThirdPartyConfig.length; i++) {
									manifest.finsemble.importThirdPartyConfig.unshift(newFinsembleConfigObject.importThirdPartyConfig[i]);
								}
							} else {
								manifest.finsemble[key] = newFinsembleConfigObject[key];
							}
						});
						self.resolveConfigVariables(manifest.finsemble, manifest.finsemble); // resolve variables with finsemble config
						Logger.system.debug("forceObjectsToLogger", "ConfigUtil.getInitialManifest:getCoreConfig:Initial Manifest after variables Resolved", manifest);
					} else {
						Logger.system.error("ConfigUtil.getInitialManifest:getCoreConfig:failed importing into finsemble config", error);
					}
					callback(manifest);
				});
			});
		});
	};

	// output JSON objecvt to file
	this.promptAndSaveJSONToLocalFile = function (filename, jsonObject) {
		Logger.system.debug("saveJSONToLocalFile", filename, jsonObject);

		let dataStr = JSON.stringify(jsonObject, null, "\t");
		let dataUri = "data:application/json;charset=utf-8," + encodeURIComponent(dataStr);

		let exportFileDefaultName = filename + ".json";

		let linkElement = document.createElement("a");
		linkElement.setAttribute("href", dataUri);
		linkElement.setAttribute("download", exportFileDefaultName);
		linkElement.click();
	};

	// utility function for future use
	this.configFormatForExport = function (typeOfConfig, configObject) {
		Logger.system.debug("configFormatForExport starting", typeOfConfig, configObject);
		var exportConfig = FSBLUtils.clone(configObject);

		if (typeOfConfig === "raw") {
			// do nothing since config is ready to export as is
		} else if (typeOfConfig === "all") {
			delete exportConfig.importConfig;
			delete exportConfig.comment;
		} else if (typeOfConfig === "application") {
			delete exportConfig.importConfig;
			delete exportConfig.comment;
			delete exportConfig.system;
			delete exportConfig.services;
		} else if (typeOfConfig === "workspace") {
			exportConfig = { workspace: exportConfig };
		} else if (typeOfConfig === "workspaceTemplate") {
			let workspaceDefinition = {};
			workspaceDefinition[exportConfig.name] = exportConfig;
			exportConfig = { workspaceTemplates: workspaceDefinition };
		} else if (typeOfConfig === "services") {
			exportConfig = exportConfig.services;
		} else if (typeOfConfig === "components") {
			exportConfig = exportConfig.components;
		}

		return exportConfig;
	};

	/////////////////////////////////////////////////////////////////////////
	/////////////// Remaining code is for config verification ///////////////
	/////////////////////////////////////////////////////////////////////////

	// convenience constructor to return record used in configVerifyObject.
	this.VerifyConfigRecord = function (propertyType, propertyCondition) {
		this._verify = {
			type: propertyType,
			condition: propertyCondition
		};
	};

	// convenience constants for definiting verification object. See example usage in ServiceManager or ConfigService.
	// Required means startup will break without it, so error.
	// Optional means startup will not break without it; however, it is documented and expected as part of the config that should always be there.  So warning message only.
	// Deprecated mean startup will no break but old config format is used and should be updated.
	this.REQUIRED_STRING = new this.VerifyConfigRecord("string", "required");
	this.REQUIRED_OBJECT = new this.VerifyConfigRecord("object", "required");
	this.REQUIRED_BOOLEAN = new this.VerifyConfigRecord("boolean", "required");
	this.REQUIRED_ARRAY = new this.VerifyConfigRecord("array", "required");
	this.OPTIONAL_EXPECTED_STRING = new this.VerifyConfigRecord("string", "optional");
	this.OPTIONAL_EXPECTED_OBJECT = new this.VerifyConfigRecord("object", "optional");
	this.OPTIONAL_EXPECTED_BOOLEAN = new this.VerifyConfigRecord("boolean", "optional");
	this.OPTIONAL_EXPECTED_ARRAY = new this.VerifyConfigRecord("array", "optional");
	this.DEPRECATED_STRING = new this.VerifyConfigRecord("string", "DEPRECATED");
	this.DEPRECATED_OBJECT = new this.VerifyConfigRecord("object", "DEPRECATED");
	this.DEPRECATED_BOOLEAN = new this.VerifyConfigRecord("boolean", "DEPRECATED");
	this.DEPRECATED_ARRAY = new this.VerifyConfigRecord("array", "DEPRECATED");

	// check type of one config property. Return true if ok; otherwise false. Must handle null configProperty (returning false).
	function checkType(configProperty, type) {
		var typeOk = true;
		if (configProperty) {
			if (type == "array") {
				if (!Array.isArray(configProperty)) {
					typeOk = false;
				}
			} else {
				// note "array" type is being distinguished from "object" type, so configProperty type shouldn't be an array
				if (Array.isArray(configProperty) || typeof configProperty !== type) {
					typeOk = false;
				}
			}
		} else {
			typeOk = false;
		}
		return typeOk;
	}

	// Verifies one config property given it's corresponding verifyRecord and returns appropriate result.
	function verifyConfigProperty(fullPathName, configProperty, verifyRecord) {
		Logger.system.verbose(`verifyConfigProperty for ${fullPathName}`, configProperty, verifyRecord);
		var resultOk = true;
		switch (verifyRecord._verify.condition) {
			case "required":
				resultOk = checkType(configProperty, verifyRecord._verify.type);
				if (!resultOk) {
					// required must exist and have correct type
					Logger.system.error(`Illegally formatted configuration.  Type of ${fullPathName} is not an expected ${verifyRecord._verify.type}`, configProperty, verifyRecord);
				}
				break;
			case "optional":
				if (!configProperty) {
					// missing optional only generates warning
					Logger.system.warn(`CONFIGURATION WARNING: Expected configuration missing for ${fullPathName}.`, configProperty, verifyRecord);
				} else {
					resultOk = checkType(configProperty, verifyRecord._verify.type);
					if (!resultOk) {
						// optional only errors with wrong type
						Logger.system.error(`Illegally formatted configuration. Type of ${fullPathName} is not an expected ${verifyRecord._verify.type}`, configProperty, verifyRecord);
					}
				}
				break;
			case "DEPRECATED":
				if (configProperty) {
					// DEPRECATED generates warning
					Logger.system.warn(`CONFIGURATION WARNING: DEPRECATED configuration ${fullPathName}.`, configProperty, verifyRecord);
					resultOk = checkType(configProperty, verifyRecord._verify.type);
					if (!resultOk) {
						// DEPRECATED only errors with wrong type
						Logger.system.error(`Config ${fullPathName} is DEPRECATED and illegally formatted.  Expected type is ${verifyRecord._verify.type}.`, configProperty, verifyRecord);
					}
				}
				break;
			default:
				Logger.system.error(`Illegally formatted config record.  Condition ${verifyRecord._verify.condition} unknown`, configProperty, verifyRecord);
		}
		return resultOk;
	}

	/**
  * Verifies config is correct and logs messages as needed. Recursively walks configObject and configVerifyObject.
  *
  * @param {object} fullPathName path name of config being verfied (e.g. "manifest", "manifest.finsemble"); used for error messages
  * @param {object} configObject the configuration object to verify (typically the manifest object or manifest.finsemble object)
  * @param {object} configVerifyObject object to drive the verification; data driven.
  *
  * Example configVerifyObject below.
  * 		Note verification records (e.g. REQUIRED_STRING) only go at the leaf level, but code must handle corresponding undefined config at all levels.
  *
  * 		var configVerifyObject = {
  *		finsemble: {
  *			applicationRoot: REQUIRED_STRING,
  *			moduleRoot: REQUIRED_STRING,
  *			system: {
  *				FSBLVersion: REQUIRED_STRING,
  *				requiredServicesConfig: REQUIRED_OBJECT,
  *			},
  *			splinteringConfig: {
  *				splinterAgents: OPTIONAL_EXPECTED_ARRAY
  *			},
  *			storage: {
  *				LocalStorageAdapter: DEPRECATED_STRING
  *			},
  *		}
  *	};
 	 *
  *
  * @returns If correct, return true (with no log messages generated); return false otherwise. For optional or DEPRECATED generate warning if not defined, but no error unless if wrong type.
  *
  * @example See ConfigService for example usuage.
  *
  * @private
  */
	this.verifyConfigObject = function (fullPathName, configObject, configVerifyObject) {
		Logger.system.verbose(`verifyConfigObject for ${fullPathName}`, configObject, configVerifyObject);
		var verifyConfigObjectOk = true;

		if (configVerifyObject._verify) {
			// currently config records only defined at leaf level (could enhance by allowing at any level)
			verifyConfigObjectOk = verifyConfigProperty(fullPathName, configObject, configVerifyObject);
		} else {
			if (!configVerifyObject) {
				// shouldn't happen unless by api input
				Logger.system.error(`configUtil.verify: configVerifyObject not defined for ${fullPathName}`, configObject, configVerifyObject);
			} else {
				var propertyList = Object.keys(configVerifyObject);
				if (!propertyList) {
					// shouldn't happen unless by api input
					Logger.system.error(`configUtil.verify: illegally formatted verification record for ${fullPathName}`, configObject, configVerifyObject);
				} else {
					// not at leaf level so recursively iterate though all the properties
					for (let i = 0; i < propertyList.length; i++) {
						let property = propertyList[i];
						let thisPropertyPath = fullPathName + "." + property;
						let thisConfigProperty = null;
						if (configObject && property in configObject) {
							thisConfigProperty = configObject[property];
						}
						// the order of the conditional (i.e. "&&") insures verification will continue after error(s)
						verifyConfigObjectOk = this.verifyConfigObject(thisPropertyPath, thisConfigProperty, configVerifyObject[property]) && verifyConfigObjectOk;
					}
				}
			}
		}
		return verifyConfigObjectOk;
	};

	/**
  * Convenience function to get a default value from config.
  *
  * @param {object} base base path of config object
  * @param {string} path path string of config property
  * @param {any} defaultValue if path value not defined or null, then use default value
  *
  * @returns return config value or default value
  *
  * @example
  *
  *		defaultAdaptor = ConfigUtil.getDefault(manifest, "manifest.finsemble.defaultStorage", "LocalStorageAdapter");
  *		sameDomainTransport = ConfigUtil.getDefault(finConfig, "finConfig.router.sameDomainTransport", "SharedWorker");
  *		var serverAddress = getDefault(params, "params.transportSettings.FinsembleTransport.serverAddress", "wss://localhost.chartiq.com:3376");
  *
  */
	this.getDefault = function (base, path, defaultValue) {
		var result = defaultValue;
		if (base) {
			try {
				let properties = path.split(".");
				let currentValue = base;
				for (let i = 1; i < properties.length; i++) {
					currentValue = currentValue[properties[i]];
				}
				result = currentValue;
			} catch (err) {
				result = defaultValue;
			}

			if (typeof result === "undefined") result = defaultValue;
		}
		return result;
	};
};

module.exports = new ConfigUtil();

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\common\\configUtil.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\common\\configUtil.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 14 */
/***/ (function(module, exports) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}


/***/ }),
/* 15 */
/***/ (function(module, exports) {

/**
 * Compiles a querystring
 * Returns string representation of the object
 *
 * @param {Object}
 * @api private
 */

exports.encode = function (obj) {
  var str = '';

  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      if (str.length) str += '&';
      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
    }
  }

  return str;
};

/**
 * Parses a simple querystring into an object
 *
 * @param {String} qs
 * @api private
 */

exports.decode = function(qs){
  var qry = {};
  var pairs = qs.split('&');
  for (var i = 0, l = pairs.length; i < l; i++) {
    var pair = pairs[i].split('=');
    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
  }
  return qry;
};


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Module dependencies.
 */

var parser = __webpack_require__(5);
var Emitter = __webpack_require__(8);

/**
 * Module exports.
 */

module.exports = Transport;

/**
 * Transport abstract constructor.
 *
 * @param {Object} options.
 * @api private
 */

function Transport (opts) {
  this.path = opts.path;
  this.hostname = opts.hostname;
  this.port = opts.port;
  this.secure = opts.secure;
  this.query = opts.query;
  this.timestampParam = opts.timestampParam;
  this.timestampRequests = opts.timestampRequests;
  this.readyState = '';
  this.agent = opts.agent || false;
  this.socket = opts.socket;
  this.enablesXDR = opts.enablesXDR;

  // SSL options for Node.js client
  this.pfx = opts.pfx;
  this.key = opts.key;
  this.passphrase = opts.passphrase;
  this.cert = opts.cert;
  this.ca = opts.ca;
  this.ciphers = opts.ciphers;
  this.rejectUnauthorized = opts.rejectUnauthorized;
  this.forceNode = opts.forceNode;

  // other options for Node.js client
  this.extraHeaders = opts.extraHeaders;
  this.localAddress = opts.localAddress;
}

/**
 * Mix in `Emitter`.
 */

Emitter(Transport.prototype);

/**
 * Emits an error.
 *
 * @param {String} str
 * @return {Transport} for chaining
 * @api public
 */

Transport.prototype.onError = function (msg, desc) {
  var err = new Error(msg);
  err.type = 'TransportError';
  err.description = desc;
  this.emit('error', err);
  return this;
};

/**
 * Opens the transport.
 *
 * @api public
 */

Transport.prototype.open = function () {
  if ('closed' === this.readyState || '' === this.readyState) {
    this.readyState = 'opening';
    this.doOpen();
  }

  return this;
};

/**
 * Closes the transport.
 *
 * @api private
 */

Transport.prototype.close = function () {
  if ('opening' === this.readyState || 'open' === this.readyState) {
    this.doClose();
    this.onClose();
  }

  return this;
};

/**
 * Sends multiple packets.
 *
 * @param {Array} packets
 * @api private
 */

Transport.prototype.send = function (packets) {
  if ('open' === this.readyState) {
    this.write(packets);
  } else {
    throw new Error('Transport not open');
  }
};

/**
 * Called upon open
 *
 * @api private
 */

Transport.prototype.onOpen = function () {
  this.readyState = 'open';
  this.writable = true;
  this.emit('open');
};

/**
 * Called with data.
 *
 * @param {String} data
 * @api private
 */

Transport.prototype.onData = function (data) {
  var packet = parser.decodePacket(data, this.socket.binaryType);
  this.onPacket(packet);
};

/**
 * Called with a decoded packet.
 */

Transport.prototype.onPacket = function (packet) {
  this.emit('packet', packet);
};

/**
 * Called upon close.
 *
 * @api private
 */

Transport.prototype.onClose = function () {
  this.readyState = 'closed';
  this.emit('close');
};


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {// browser shim for xmlhttprequest module

var hasCORS = __webpack_require__(41);

module.exports = function (opts) {
  var xdomain = opts.xdomain;

  // scheme must be same when usign XDomainRequest
  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
  var xscheme = opts.xscheme;

  // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.
  // https://github.com/Automattic/engine.io-client/pull/217
  var enablesXDR = opts.enablesXDR;

  // XMLHttpRequest can be disabled on IE
  try {
    if ('undefined' !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {
      return new XMLHttpRequest();
    }
  } catch (e) { }

  // Use XDomainRequest for IE8 if enablesXDR is true
  // because loading bar keeps flashing when using jsonp-polling
  // https://github.com/yujiosaka/socke.io-ie8-loading-example
  try {
    if ('undefined' !== typeof XDomainRequest && !xscheme && enablesXDR) {
      return new XDomainRequest();
    }
  } catch (e) { }

  if (!xdomain) {
    try {
      return new global[['Active'].concat('Object').join('X')]('Microsoft.XMLHTTP');
    } catch (e) { }
  }
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Module dependencies.
 */

var debug = __webpack_require__(62)('socket.io-parser');
var json = __webpack_require__(42);
var Emitter = __webpack_require__(61);
var binary = __webpack_require__(60);
var isBuf = __webpack_require__(31);

/**
 * Protocol version.
 *
 * @api public
 */

exports.protocol = 4;

/**
 * Packet types.
 *
 * @api public
 */

exports.types = [
  'CONNECT',
  'DISCONNECT',
  'EVENT',
  'ACK',
  'ERROR',
  'BINARY_EVENT',
  'BINARY_ACK'
];

/**
 * Packet type `connect`.
 *
 * @api public
 */

exports.CONNECT = 0;

/**
 * Packet type `disconnect`.
 *
 * @api public
 */

exports.DISCONNECT = 1;

/**
 * Packet type `event`.
 *
 * @api public
 */

exports.EVENT = 2;

/**
 * Packet type `ack`.
 *
 * @api public
 */

exports.ACK = 3;

/**
 * Packet type `error`.
 *
 * @api public
 */

exports.ERROR = 4;

/**
 * Packet type 'binary event'
 *
 * @api public
 */

exports.BINARY_EVENT = 5;

/**
 * Packet type `binary ack`. For acks with binary arguments.
 *
 * @api public
 */

exports.BINARY_ACK = 6;

/**
 * Encoder constructor.
 *
 * @api public
 */

exports.Encoder = Encoder;

/**
 * Decoder constructor.
 *
 * @api public
 */

exports.Decoder = Decoder;

/**
 * A socket.io Encoder instance
 *
 * @api public
 */

function Encoder() {}

/**
 * Encode a packet as a single string if non-binary, or as a
 * buffer sequence, depending on packet type.
 *
 * @param {Object} obj - packet object
 * @param {Function} callback - function to handle encodings (likely engine.write)
 * @return Calls callback with Array of encodings
 * @api public
 */

Encoder.prototype.encode = function(obj, callback){
  debug('encoding packet %j', obj);

  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
    encodeAsBinary(obj, callback);
  }
  else {
    var encoding = encodeAsString(obj);
    callback([encoding]);
  }
};

/**
 * Encode packet as string.
 *
 * @param {Object} packet
 * @return {String} encoded
 * @api private
 */

function encodeAsString(obj) {
  var str = '';
  var nsp = false;

  // first is type
  str += obj.type;

  // attachments if we have them
  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
    str += obj.attachments;
    str += '-';
  }

  // if we have a namespace other than `/`
  // we append it followed by a comma `,`
  if (obj.nsp && '/' != obj.nsp) {
    nsp = true;
    str += obj.nsp;
  }

  // immediately followed by the id
  if (null != obj.id) {
    if (nsp) {
      str += ',';
      nsp = false;
    }
    str += obj.id;
  }

  // json data
  if (null != obj.data) {
    if (nsp) str += ',';
    str += json.stringify(obj.data);
  }

  debug('encoded %j as %s', obj, str);
  return str;
}

/**
 * Encode packet as 'buffer sequence' by removing blobs, and
 * deconstructing packet into object with placeholders and
 * a list of buffers.
 *
 * @param {Object} packet
 * @return {Buffer} encoded
 * @api private
 */

function encodeAsBinary(obj, callback) {

  function writeEncoding(bloblessData) {
    var deconstruction = binary.deconstructPacket(bloblessData);
    var pack = encodeAsString(deconstruction.packet);
    var buffers = deconstruction.buffers;

    buffers.unshift(pack); // add packet info to beginning of data list
    callback(buffers); // write all the buffers
  }

  binary.removeBlobs(obj, writeEncoding);
}

/**
 * A socket.io Decoder instance
 *
 * @return {Object} decoder
 * @api public
 */

function Decoder() {
  this.reconstructor = null;
}

/**
 * Mix in `Emitter` with Decoder.
 */

Emitter(Decoder.prototype);

/**
 * Decodes an ecoded packet string into packet JSON.
 *
 * @param {String} obj - encoded packet
 * @return {Object} packet
 * @api public
 */

Decoder.prototype.add = function(obj) {
  var packet;
  if ('string' == typeof obj) {
    packet = decodeString(obj);
    if (exports.BINARY_EVENT == packet.type || exports.BINARY_ACK == packet.type) { // binary packet's json
      this.reconstructor = new BinaryReconstructor(packet);

      // no attachments, labeled binary but no binary data to follow
      if (this.reconstructor.reconPack.attachments === 0) {
        this.emit('decoded', packet);
      }
    } else { // non-binary full packet
      this.emit('decoded', packet);
    }
  }
  else if (isBuf(obj) || obj.base64) { // raw binary data
    if (!this.reconstructor) {
      throw new Error('got binary data when not reconstructing a packet');
    } else {
      packet = this.reconstructor.takeBinaryData(obj);
      if (packet) { // received final buffer
        this.reconstructor = null;
        this.emit('decoded', packet);
      }
    }
  }
  else {
    throw new Error('Unknown type: ' + obj);
  }
};

/**
 * Decode a packet String (JSON data)
 *
 * @param {String} str
 * @return {Object} packet
 * @api private
 */

function decodeString(str) {
  var p = {};
  var i = 0;

  // look up type
  p.type = Number(str.charAt(0));
  if (null == exports.types[p.type]) return error();

  // look up attachments if type binary
  if (exports.BINARY_EVENT == p.type || exports.BINARY_ACK == p.type) {
    var buf = '';
    while (str.charAt(++i) != '-') {
      buf += str.charAt(i);
      if (i == str.length) break;
    }
    if (buf != Number(buf) || str.charAt(i) != '-') {
      throw new Error('Illegal attachments');
    }
    p.attachments = Number(buf);
  }

  // look up namespace (if any)
  if ('/' == str.charAt(i + 1)) {
    p.nsp = '';
    while (++i) {
      var c = str.charAt(i);
      if (',' == c) break;
      p.nsp += c;
      if (i == str.length) break;
    }
  } else {
    p.nsp = '/';
  }

  // look up id
  var next = str.charAt(i + 1);
  if ('' !== next && Number(next) == next) {
    p.id = '';
    while (++i) {
      var c = str.charAt(i);
      if (null == c || Number(c) != c) {
        --i;
        break;
      }
      p.id += str.charAt(i);
      if (i == str.length) break;
    }
    p.id = Number(p.id);
  }

  // look up json data
  if (str.charAt(++i)) {
    p = tryParse(p, str.substr(i));
  }

  debug('decoded %s as %j', str, p);
  return p;
}

function tryParse(p, str) {
  try {
    p.data = json.parse(str);
  } catch(e){
    return error();
  }
  return p; 
};

/**
 * Deallocates a parser's resources
 *
 * @api public
 */

Decoder.prototype.destroy = function() {
  if (this.reconstructor) {
    this.reconstructor.finishedReconstruction();
  }
};

/**
 * A manager of a binary event's 'buffer sequence'. Should
 * be constructed whenever a packet of type BINARY_EVENT is
 * decoded.
 *
 * @param {Object} packet
 * @return {BinaryReconstructor} initialized reconstructor
 * @api private
 */

function BinaryReconstructor(packet) {
  this.reconPack = packet;
  this.buffers = [];
}

/**
 * Method to be called when binary data received from connection
 * after a BINARY_EVENT packet.
 *
 * @param {Buffer | ArrayBuffer} binData - the raw binary data received
 * @return {null | Object} returns null if more binary data is expected or
 *   a reconstructed packet object if all buffers have been received.
 * @api private
 */

BinaryReconstructor.prototype.takeBinaryData = function(binData) {
  this.buffers.push(binData);
  if (this.buffers.length == this.reconPack.attachments) { // done with buffer list
    var packet = binary.reconstructPacket(this.reconPack, this.buffers);
    this.finishedReconstruction();
    return packet;
  }
  return null;
};

/**
 * Cleans up binary packet reconstruction variables.
 *
 * @api private
 */

BinaryReconstructor.prototype.finishedReconstruction = function() {
  this.reconPack = null;
  this.buffers = [];
};

function error(data){
  return {
    type: exports.ERROR,
    data: 'parser error'
  };
}


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var EventEmitter = __webpack_require__(14).EventEmitter;
var RouterClient = __webpack_require__(3);
var Logger = __webpack_require__(2);

class FSBLWindow extends EventEmitter {

	constructor(params) {
		super();
		//because we were doing this[i]=params[i] in the constructor jscrambler was creating a reference to 'this' above _super_, causing everything to break and it made me cry.
		this.doConstruction(params);
	}

	doConstruction(params) {
		//TODO this is the same as wrap (eventually this should spawn)
		if (!params.setWindowType && !params.windowType || params.windowType === "OpenFinApplication") {
			//Default WindowType
			params.windowType = "OpenFinWindow";
		}
		if (params.windowType) {
			//We need to make a specific kind of Window
			params.setWindowType = params.windowType;
			delete params.windowType; //Prevent infinite loop
			var childClassObject = new FSBLWindow.types[params.setWindowType](params);
			//childClassObject.windowType = windowType;
			return childClassObject;
		} else {
			//We are a specfic kind of window
			if (params) {
				for (var i in params) {
					this[i] = params[i];
				}
			}
			if (!this.name) this.name = params.windowName;
			this.windowType = this.setWindowType;
			this.Group = __webpack_require__(83);
		}
	}
	static registerType(name, type) {
		if (!FSBLWindow.types) {
			FSBLWindow.types = {};
		}
		FSBLWindow.types[name] = type;
	}

	static wrap(params) {
		if (!params.setWindowType && !params.windowType || params.windowType === "OpenFinApplication") {
			//Default WindowType
			params.windowType = "OpenFinWindow";
		}
		if (params.windowType) {
			//We need to make a specific kind of Window
			params.setWindowType = params.windowType;
			delete params.windowType; //Prevent infinite loop
			var childClassObject = new FSBLWindow.types[params.setWindowType](params);
			//childClassObject.windowType = windowType;
			return childClassObject;
		}
	}

	minimize(cb) {
		let err = "Minimize is Not Implemented";
		console.error(err);
		if (cb) cb(err);
	}

	maximize(cb) {
		let err = "Maximize is Not Implemented";
		console.error(err);
		if (cb) cb(err);
	}

	restore(cb) {
		let err = "Restore is Not Implemented";
		console.error(err);
		if (cb) cb(err);
	}

	focus(cb) {
		let err = "Focus is Not Implemented";
		console.error(err);
		if (cb) cb(err);
	}

	bringToFront(cb) {
		let err = "BringToFront is Not Implemented";
		console.error(err);
		if (cb) cb(err);
	}

	/**
  * Invoked to indicate an operation (e.g. dragging out of tab region) has started. This signals the Docking service to start tracking the mouse location and invoking tiling behavior as needed.
  * @param {object} params for future use
  *
  * @example
  *	// dragging tab example using tracking and group
  * 	FSBLWindow.startTabTileMonitoring();
  *	// if dragging tab is in a group, then remove it given tracking results will decide what to do with the window
  * 	FSBLWindow.Group.getGroupID(this.windowIdentifier, function (err, tileGroupId) {
  * 		if (!err) { // if no error then must be in a tile group
  *			self.Group.removeWindow(this.windowIdentifier);
  *		}
  *	});
  */
	startTabTileMonitoring(params) {
		Logger.system.info("startTabTileMonitoring");
		RouterClient.transmit("TabTile.startTabTile", { params });
	}

	/**
  * Invoked by client originating a dragStart that it has has ended.
  * @param {object} params for future use
 	 * @param {function=} callback option callback that support overriding default behavior
  *
  * 	FSBLWindow.stopTabTileMonitoring(params, function(err, results, defaultTabTileAction) {
  * 		// . . . custom code goes here . . .
  *		defaultTabTileAction(results); // now take default action or call your own function instead
  * 	});
  *
  */
	stopTabTileMonitoring(params, callback) {
		Logger.system.info("stopTabTileMonitoring", params);
		RouterClient.query("TabTile.stopTabTile", { params }, function (err, queryResponseMessage) {
			if (err) {
				Logger.system.warn("TabTile.stopTabTile: query failed", err);
			} else {
				Logger.system.debug("TabTile.stopTabTile results", queryResponseMessage.data);
			}
			var stopTabTileResults = queryResponseMessage.data;
			if (callback) {
				callback(err, stopTabTileResults, this.defaultStopTrackingAction);
			} else {
				this.defaultTabTileAction(stopTabTileResults);
			}
		});
	}

	/**
  * Defines default TabTile action for stopTabTileMonitoring.  May be overriden by client -- see example in stopTabTileMonitoring
  *
  * @param {any} stopTabTileResults
  * @memberof FSBLWindow
  *
  * @private
  */
	defaultTabTileAction(stopTabTileResults) {
		switch (stopTabTileResults.stoppedLocation) {
			case "OutsideWindow":
				// move window to drop location (since for now assuming only single-tabbed windows)
				break;
			case "TabSection":
				// WindowStack.addWindowToStack(callback) // for when we get to tabbing
				break;
			case "InsideWindow":
				if (stopTabTileResults.tileGroupId) {
					// if dropped in an existing tile group (which might be the same it was dragging from)
					self.Group.addWindow(this.windowIdentifier, stopTabTileResults.tileGroupId, stopTabTileResults.dropCoordinates);
				} else {
					// if dropped in a seperate window outside a tile group
					self.Group.createGroup(function (newGroupId) {
						// add dragging window to new tile group, but specify the dropped on window as the starting window in the tile group
						self.Group.addWindow(this.windowIdentifier, newGroupId, stopTabTileResults.dropCoordinates, { startingWindowIdentifier: stopTabTileResults.droppedOnWindowIdentifier });
					});
				}
				break;
			default:
				Logger.system.error("stopTracking returned an unknown stoppedLocation result", stopTabTileResults);
		}
	}

	/**
  * Cancels startTabTileMonitoring. Example use is a user "excapes" out of a drag operation.
  *
  * @param {object} params for future use
  * @memberof FSBLWindow
  */
	cancelTabTileMonitoring(params) {
		Logger.system.info("cancelTabTileMonitoring", params);
		RouterClient.transmit("TabTile.cancelTabTile", { params });
	}

}

FSBLWindow.WINDOWSTATE = {
	NORMAL: 0,
	MINIMIZED: 1,
	MAXIMIZED: 2
};

module.exports = FSBLWindow;

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\common\\window\\FSBLWindow.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\common\\window\\FSBLWindow.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {const EventEmitter = __webpack_require__(14).EventEmitter;
const RouterClient = __webpack_require__(3);
const STARTUP_TIMEOUT_DURATION = 10000;

/**
 * Small class to hold on to dependencies and callbacks. Also emits a timeout event that the startupManager is listening for. When it times out, the startupManager catches the event and generates a message that includes all of the offline clients and services. It then causes this class to emit an  err event that the baseService is listening for. This arrangement is set up for a couple of reasons.
 * 1. I can't use the logger in here because the logger uses the startupManager, and there'd be a circular dependency.
 * 2. FSBLDependencyManager is a singleton, and there can be multiple services living in a single window. I didn't want them all to log that they were offline if they weren't (e.g., if I'd put the emitter on the StartupManager instead of this class).
 */
class StartupDependency extends EventEmitter {
	constructor(params) {
		super();
		this.callback = params.callback;
		this.dependencies = params.dependencies;
		this.startupTimer = null;
		this.setStartupTimer = this.setStartupTimer.bind(this);
		this.clearStartupTimer = this.clearStartupTimer.bind(this);
		this.setStartupTimer(params.id);
	}

	/**
  * Removes the startup timer (because the dependency was resolved within the allotted time);
  */
	clearStartupTimer() {
		clearTimeout(this.startupTimer);
		delete this.startupTimer;
	}
	/**
  * If the dependency hasn't resolved within STARTUP_TIMEOUT_DURATION, emit a timeout event that the StartupManager can catch.
  */
	setStartupTimer() {
		let self = this;
		this.startupTimer = setTimeout(() => {
			self.emit("timeout");
		}, STARTUP_TIMEOUT_DURATION);
	}
}

/**
 * Used to generate a unique ID for the list of dependencies.
 */
function uuidv4() {
	return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
		var r = Math.random() * 16 | 0,
		    v = c === "x" ? r : r & 0x3 | 0x8;
		return v.toString(16);
	});
}
/**
 * @private
 */
class StartupManager {
	/**
  * @private
  */
	constructor() {
		this.onlineClients = [];
		this.onlineServices = [];
		this.dependencies = {};
		this.AuthorizationCompleted = false;
		this.startupTimers = {};
		this.startupTimerFired = false;
		this.bindCorrectContext();
	}
	/**
  * This function and `checkDependencies` are the most important parts of this class. This function accepts a FinsembleDependency object and a callback to be invoked when all required depenencies are ready.
  *
  * @param {FinsembleDependency} dependencies
  * @param {any} callback
  * @memberof StartupManager
  */
	waitFor(dependencies, callback) {
		let id = uuidv4();

		//Set defaults to an empty array if they aren't passed in.
		if (!dependencies.services) dependencies.services = [];
		if (!dependencies.clients) dependencies.clients = [];
		//The dependency manager can pass in a name to the dependency. If it does, we'll use it. If not, we won't.

		if (dependencies.clients.length) {
			if (this.AuthorizationCompleted === false && dependencies.clients.includes("authenticationClient")) {
				dependencies.clients.splice(dependencies.clients.indexOf("authenticationClient"), 1);
			}
			//Lowercase the first letter of the client.
			dependencies.clients = dependencies.clients.map(clientName => {
				return clientName.charAt(0).toLowerCase() + clientName.slice(1);
			});
		}

		let dependency = new StartupDependency({ id, dependencies, callback });

		//If the dependency times out, throw an error that the baseService can catch. It will then log out why it's not online.
		dependency.on("timeout", () => {
			this.onDependencyTimeout(dependency);
		});

		this.dependencies[id] = dependency;
		this.checkDependencies();
		return dependency;
	}

	/**
  * This method generates a helpful error message giving possible reasons for why the service is offline. After the message is generated, it emits an event on the dependency that's passed in as a parameter. The BaseService is listening for this event, and logs the error message to the central logger.
  * @param {Dependency} dependency
  */
	onDependencyTimeout(dependency) {
		const NEW_LINE = "\n",
		      TAB = "\u0009",
		      BULLET = "\u2022",
		      BULLET_POINT = NEW_LINE + TAB + BULLET,
		      STORAGE_ADAPTER_ERROR = "The default storage adapter failed to fully initialize, or has a syntax error. Ensure that the default storage adapter is up, connected, and sending/receiving data properly.";

		const HELPFUL_MESSAGES = {
			preferencesService: [`PreferencesService failed to start.${BULLET_POINT}Typically this is caused by a failure to retrieve data from your default storage adapter. ${STORAGE_ADAPTER_ERROR}`],
			storageService: [`StorageService failed to start. Here are some common reasons for failure:${BULLET_POINT}${STORAGE_ADAPTER_ERROR}${BULLET_POINT}The data coming back from your adapter is improperly formatted or otherwise corrupted. Try clearing your storage and restarting. If the problem persists, the issue may not be in your adapter.`],
			routerService: ["RouterService failed to start. This is a fatal error. Contact finsemble support."],
			workspaceService: [`WorkspaceService failed to start. Here are some common reasons for failure:${BULLET_POINT}${STORAGE_ADAPTER_ERROR}.${BULLET_POINT}Your active workspace is corrupted.`],
			assimilationService: ["AssimilationService failed to start. Check to see that the 'FinsembleAssimilation' is active in your taskManager. If it is, please contact finsemble support."]
		};

		let offlineClients = this.getOfflineClients();
		let offlineServices = this.getOfflineServices();
		let errorMessage = `APPLICATION LIFECYCLE:STARTUP:Dependency not online after ${STARTUP_TIMEOUT_DURATION / 1000} seconds.`;

		if (offlineClients.length) {
			errorMessage += ` Waiting for these clients: ${offlineClients.join(", ")}.`;
		}
		if (offlineServices.length) {
			errorMessage += ` Waiting for these services: ${offlineServices.join(", ")}.`;
		}

		//For every service that's offline, check to see if we have any helpful messages for it. If so, iterate through the array and append to the error message.
		offlineServices.forEach(service => {
			if (HELPFUL_MESSAGES[service]) {
				HELPFUL_MESSAGES[service].forEach(msg => {
					errorMessage += NEW_LINE + NEW_LINE + msg + NEW_LINE;
				});
				//puts a line between our helpful messages and the log stack.
				errorMessage += NEW_LINE;
			}
		});

		//The BaseService is listening for this event, and will log the errorMessage to the central logger.
		dependency.emit("err", errorMessage);
	}
	/**
  * This function loops through all of the registered dependencies and checks to see if the conditions have been met. If so, it invokes the callback and removes the reference to the dependency.
  *
  * @memberof StartupManager
  */
	checkDependencies() {
		for (let id in this.dependencies) {
			let dependency = this.dependencies[id];
			let { dependencies, callback } = dependency;
			if (dependencies.services.length) {
				let servicesAreAllOnline = this.checkServices(dependencies.services);
				if (!servicesAreAllOnline) {
					continue;
				}
				//all are online, skip next time around.
				dependencies.services = [];
			}

			if (dependencies.clients.length) {
				let clientsAreAllOnline = this.checkClients(dependencies.clients);
				if (!clientsAreAllOnline) {
					continue;
				}
				//all are online, skip next time around.
				dependencies.clients = [];
			}
			delete this.dependencies[id];
			dependency.clearStartupTimer();
			if (callback) {
				callback();
			}
		}
	}

	getOfflineClients() {
		let offlineClients = [];
		for (let id in this.dependencies) {
			let { dependencies } = this.dependencies[id];
			offlineClients = offlineClients.concat(dependencies.clients.filter(dep => !this.onlineClients.includes(dep)));
		}
		//return deduped list.
		return offlineClients.filter((client, i) => offlineClients.indexOf(client) === i);
	}

	getOfflineServices() {
		let offlineServices = [];
		for (let id in this.dependencies) {
			let { dependencies } = this.dependencies[id];
			offlineServices = offlineServices.concat(dependencies.services.filter(dep => !this.onlineServices.includes(dep)));
		}
		return offlineServices.filter((client, i) => offlineServices.indexOf(client) === i);
	}
	/**
  * Iterates through required service list, returns false if any required service is offline.
  *
  * @param {any} serviceList
  * @memberof StartupManager
  */
	checkServices(serviceList) {
		return serviceList.every(service => this.onlineServices.includes(service));
	}
	/**
  * Iterates through required client list, returns false if any required client is offline.
  *
  * @param {any} clientList
 
  * @memberof StartupManager
  */
	checkClients(clientList) {
		return clientList.every(client => this.onlineClients.includes(client));
	}

	/**
  * When a service comes online, we push it onto our array of online services, and run through all of the registered dependencies.
  *
  * @param {any} serviceName
  * @memberof StartupManager
  */
	setServiceOnline(serviceName) {
		this.onlineServices.push(serviceName);
		this.checkDependencies();
	}
	/**
  * Sets an array of services online. Only happens once at startup.
  *
  * @param {any} serviceList
  * @memberof StartupManager
  */
	setServicesOnline(serviceList) {
		this.onlineServices = this.onlineServices.concat(serviceList);
		this.checkDependencies();
	}
	/**
  *
  *
  * @param {any} clientName
 
  * @memberof StartupManager
  */
	setClientOnline(clientName) {
		//This check is done because multiple clients of the same type can be on a page.
		if (this.onlineClients.includes(clientName)) {
			return;
		}
		this.onlineClients.push(clientName);
		this.checkDependencies();
	}
	/**
  * Returns the array of online clients.
  *
 
  * @memberof StartupManager
  */
	getOnlineClients() {
		return this.onlineClients;
	}
	/**
  * Returns the array of online services.
  *
 
  * @memberof StartupManager
  */
	getOnlineServices() {
		return this.onlineServices;
	}
	/**
  * Method to make sure that `this` is correct when the callbacks are invoked.
  *
  * @memberof StartupManager
  */
	bindCorrectContext() {
		this.checkDependencies = this.checkDependencies.bind(this);
		this.checkServices = this.checkServices.bind(this);
		this.checkClients = this.checkClients.bind(this);
		this.getOfflineClients = this.getOfflineClients.bind(this);
		this.getOfflineServices = this.getOfflineServices.bind(this);
		this.onDependencyTimeout = this.onDependencyTimeout.bind(this);
		this.waitFor = this.waitFor.bind(this);
	}
}
/**
 * @private
 */
class ShutdownManager {
	/**
  * @private
  */
	constructor() {
		this.offlineServices = [];
		this.dependencies = {};
		this.checkDependencies = this.checkDependencies.bind(this);
	}

	/**
  * This function and `checkDependencies` are the most important parts of this class. This function accepts a FinsembleDependency object and a callback to be invoked when all required depenencies are ready.
  *
  * @param {FinsembleDependency} dependencies
  * @param {any} callback
  * @memberof StartupManager
  */
	waitFor(dependencies, callback) {
		//Set defaults to an empty array if they aren't passed in.
		if (!dependencies.services) {
			dependencies.services = [];
		}

		let id = uuidv4();

		this.dependencies[id] = { dependencies, callback };
	}
	/**
  * This function loops through all of the registered dependencies and checks to see if the conditions have been met. If so, it invokes the callback and removes the reference to the dependency.
  *
  * @memberof ShutdownDependencies
  */
	checkDependencies() {
		console.debug("checkDependencies", this.dependencies);
		if (Object.keys(this.dependencies)) {
			for (let id in this.dependencies) {
				let { dependencies, callback } = this.dependencies[id];
				if (dependencies.services.length) {
					let servicesAreAllOffline = this.checkServices(dependencies.services);
					if (!servicesAreAllOffline) {
						continue;
					}
				}
				console.debug("checkDependencies callback");
				delete this.dependencies[id];
				if (callback) {
					callback();
				}
			}
		}
	}
	/**
  * Iterates through required service list, returns false if any required service is offline.
  *
  * @param {any} serviceList
 
  * @memberof StartupManager
  */
	checkServices(serviceList) {
		return serviceList.every(service => this.offlineServices.includes(service));
	}

	setServiceOffline(service) {
		console.debug("setServiceOffline", service);
		this.offlineServices.push(service);
		this.checkDependencies();
	}

}
/**
 * This is a class that handles FSBL client/service dependnecy management. Given a list of services and/or clients, it will invoke a callback when all dependencies are ready. This is a singleton.
 * @shouldBePublished false
 * @private
 * @class FSBLDepdenencyManager
 */
class FSBLDepdenencyManager extends EventEmitter {
	/**
  * Binds context, and listens for services to come online.
  * Creates an instance of FSBLDepdenencyManager.
  * @private
  * @memberof FSBLDepdenencyManager
  */
	constructor() {
		super();
		this.startup = new StartupManager();
		this.shutdown = new ShutdownManager();
		this.RouterClient = RouterClient;
		this.AuthorizationCompleted = false;
		this.bindCorrectContext();
		this.onAuthorizationCompleted(this.startup.checkDependencies);
		RouterClient.onReady(this.listenForServices);
	}
	/**
 * Method to make sure that `this` is correct when the callbacks are invoked.
 *
 * @memberof StartupManager
 */
	bindCorrectContext() {
		this.listenForServices = this.listenForServices.bind(this);
		this.onAuthorizationCompleted = this.onAuthorizationCompleted.bind(this);
	}

	setClientOnline(client) {
		this.startup.setClientOnline(client);
	}
	/**
  * Listens on the router for services to come online. The first subscriber gets the activeServices as of object instantiation. The 2nd subscriber listens for services to come online after the object is created. We should consider make this all one subscriber, though I see the advantage of having this setup.
  *
  * @memberof StartupManager
  */
	listenForServices() {
		console.debug("dependency manager: listenForServices");
		let self = this;

		this.RouterClient.subscribe("Finsemble.ServiceManager.getActiveServices", function (err, event) {
			self.startup.setServicesOnline(event.data);
		});

		this.RouterClient.subscribe("Finsemble.serviceOnline", function (err, event) {
			self.startup.setServiceOnline(event.data);
		});

		this.RouterClient.addListener("Finsemble.serviceOffline", function (err, event) {
			self.shutdown.setServiceOffline(event.data.name);
		});

		this.RouterClient.addListener("Application.shutdownRequest", function () {
			self.shutdown.checkDependencies();
		});
		this.RouterClient.subscribe("AuthorizationState", (err, response) => {
			if (response.data.state !== "done") return;
			console.debug("Authorization Completed");
			self.AuthorizationCompleted = true;
			self.startup.AuthorizationCompleted = true;
			self.emit("AuthorizationCompleted");
		});
	}

	onAuthorizationCompleted(callback) {
		if (this.AuthorizationCompleted) {
			callback();
		} else {
			this.addListener("AuthorizationCompleted", callback);
		}
	}

}

/**
 * A dependency object.
 * @typedef {object} FinsembleDependency
 * @property {array} services - List of services required to be ready before callback is invoked.
 * @property {array} clients - list of clients required to be ready before callback is invoked.
 */
module.exports = new FSBLDepdenencyManager();

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\common\\dependencyManager.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\common\\dependencyManager.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 21 */
/***/ (function(module, exports) {

/**
 * Slice reference.
 */

var slice = [].slice;

/**
 * Bind `obj` to `fn`.
 *
 * @param {Object} obj
 * @param {Function|String} fn or string
 * @return {Function}
 * @api public
 */

module.exports = function(obj, fn){
  if ('string' == typeof fn) fn = obj[fn];
  if ('function' != typeof fn) throw new Error('bind() requires a function');
  var args = slice.call(arguments, 2);
  return function(){
    return fn.apply(obj, args.concat(slice.call(arguments)));
  }
};


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
/*
 * Module requirements.
 */

var isArray = __webpack_require__(40);

/**
 * Module exports.
 */

module.exports = hasBinary;

/**
 * Checks for binary data.
 *
 * Right now only Buffer and ArrayBuffer are supported..
 *
 * @param {Object} anything
 * @api public
 */

function hasBinary(data) {

  function _hasBinary(obj) {
    if (!obj) return false;

    if ( (global.Buffer && global.Buffer.isBuffer && global.Buffer.isBuffer(obj)) ||
         (global.ArrayBuffer && obj instanceof ArrayBuffer) ||
         (global.Blob && obj instanceof Blob) ||
         (global.File && obj instanceof File)
        ) {
      return true;
    }

    if (isArray(obj)) {
      for (var i = 0; i < obj.length; i++) {
          if (_hasBinary(obj[i])) {
              return true;
          }
      }
    } else if (obj && 'object' == typeof obj) {
      // see: https://github.com/Automattic/has-binary/pull/4
      if (obj.toJSON && 'function' == typeof obj.toJSON) {
        obj = obj.toJSON();
      }

      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key) && _hasBinary(obj[key])) {
          return true;
        }
      }
    }

    return false;
  }

  return _hasBinary(data);
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 23 */
/***/ (function(module, exports) {


var indexOf = [].indexOf;

module.exports = function(arr, obj){
  if (indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};

/***/ }),
/* 24 */
/***/ (function(module, exports) {

/**
 * Parses an URI
 *
 * @author Steven Levithan <stevenlevithan.com> (MIT license)
 * @api private
 */

var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

var parts = [
    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'
];

module.exports = function parseuri(str) {
    var src = str,
        b = str.indexOf('['),
        e = str.indexOf(']');

    if (b != -1 && e != -1) {
        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
    }

    var m = re.exec(str || ''),
        uri = {},
        i = 14;

    while (i--) {
        uri[parts[i]] = m[i] || '';
    }

    if (b != -1 && e != -1) {
        uri.source = src;
        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
        uri.ipv6uri = true;
    }

    return uri;
};


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/*!
* Copyright 2017 by ChartIQ, Inc.
* All rights reserved.
*/

/**
 * @introduction
 * <h2>Finsemble system wide settings for use by all components and services</h2>
 *
 */

/**
 * Constructor for Finsemble SystemSettings
 * @private
 * @constructor
 */
var SystemSettings = function () {
	var currentDiagLevel = 3;

	/**
  * Returns diagnostic level
  *
  *@returns current diagnostic level
  */
	this.diagLevel = function () {
		return currentDiagLevel;
	};

	/**
  * Returns diagnostic level
  *
  *@returns current diagnostic level
  */
	this.setDiagLevel = function (level) {
		currentDiagLevel = level;
	};

	/**
  * Returns true if parameter validation is enabled
  *
  *@returns true if enable
  */
	this.validationEnabled = function () {
		return currentDiagLevel >= 4;
	};
};

module.exports = new SystemSettings();

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\common\\systemSettings.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\common\\systemSettings.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Module dependencies.
 */

var eio = __webpack_require__(51);
var Socket = __webpack_require__(28);
var Emitter = __webpack_require__(8);
var parser = __webpack_require__(18);
var on = __webpack_require__(27);
var bind = __webpack_require__(21);
var debug = __webpack_require__(4)('socket.io-client:manager');
var indexOf = __webpack_require__(23);
var Backoff = __webpack_require__(37);

/**
 * IE6+ hasOwnProperty
 */

var has = Object.prototype.hasOwnProperty;

/**
 * Module exports
 */

module.exports = Manager;

/**
 * `Manager` constructor.
 *
 * @param {String} engine instance or engine uri/opts
 * @param {Object} options
 * @api public
 */

function Manager (uri, opts) {
  if (!(this instanceof Manager)) return new Manager(uri, opts);
  if (uri && ('object' === typeof uri)) {
    opts = uri;
    uri = undefined;
  }
  opts = opts || {};

  opts.path = opts.path || '/socket.io';
  this.nsps = {};
  this.subs = [];
  this.opts = opts;
  this.reconnection(opts.reconnection !== false);
  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
  this.reconnectionDelay(opts.reconnectionDelay || 1000);
  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
  this.randomizationFactor(opts.randomizationFactor || 0.5);
  this.backoff = new Backoff({
    min: this.reconnectionDelay(),
    max: this.reconnectionDelayMax(),
    jitter: this.randomizationFactor()
  });
  this.timeout(null == opts.timeout ? 20000 : opts.timeout);
  this.readyState = 'closed';
  this.uri = uri;
  this.connecting = [];
  this.lastPing = null;
  this.encoding = false;
  this.packetBuffer = [];
  this.encoder = new parser.Encoder();
  this.decoder = new parser.Decoder();
  this.autoConnect = opts.autoConnect !== false;
  if (this.autoConnect) this.open();
}

/**
 * Propagate given event to sockets and emit on `this`
 *
 * @api private
 */

Manager.prototype.emitAll = function () {
  this.emit.apply(this, arguments);
  for (var nsp in this.nsps) {
    if (has.call(this.nsps, nsp)) {
      this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);
    }
  }
};

/**
 * Update `socket.id` of all sockets
 *
 * @api private
 */

Manager.prototype.updateSocketIds = function () {
  for (var nsp in this.nsps) {
    if (has.call(this.nsps, nsp)) {
      this.nsps[nsp].id = this.engine.id;
    }
  }
};

/**
 * Mix in `Emitter`.
 */

Emitter(Manager.prototype);

/**
 * Sets the `reconnection` config.
 *
 * @param {Boolean} true/false if it should automatically reconnect
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnection = function (v) {
  if (!arguments.length) return this._reconnection;
  this._reconnection = !!v;
  return this;
};

/**
 * Sets the reconnection attempts config.
 *
 * @param {Number} max reconnection attempts before giving up
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionAttempts = function (v) {
  if (!arguments.length) return this._reconnectionAttempts;
  this._reconnectionAttempts = v;
  return this;
};

/**
 * Sets the delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionDelay = function (v) {
  if (!arguments.length) return this._reconnectionDelay;
  this._reconnectionDelay = v;
  this.backoff && this.backoff.setMin(v);
  return this;
};

Manager.prototype.randomizationFactor = function (v) {
  if (!arguments.length) return this._randomizationFactor;
  this._randomizationFactor = v;
  this.backoff && this.backoff.setJitter(v);
  return this;
};

/**
 * Sets the maximum delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionDelayMax = function (v) {
  if (!arguments.length) return this._reconnectionDelayMax;
  this._reconnectionDelayMax = v;
  this.backoff && this.backoff.setMax(v);
  return this;
};

/**
 * Sets the connection timeout. `false` to disable
 *
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.timeout = function (v) {
  if (!arguments.length) return this._timeout;
  this._timeout = v;
  return this;
};

/**
 * Starts trying to reconnect if reconnection is enabled and we have not
 * started reconnecting yet
 *
 * @api private
 */

Manager.prototype.maybeReconnectOnOpen = function () {
  // Only try to reconnect if it's the first time we're connecting
  if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {
    // keeps reconnection from firing twice for the same reconnection loop
    this.reconnect();
  }
};

/**
 * Sets the current transport `socket`.
 *
 * @param {Function} optional, callback
 * @return {Manager} self
 * @api public
 */

Manager.prototype.open =
Manager.prototype.connect = function (fn, opts) {
  debug('readyState %s', this.readyState);
  if (~this.readyState.indexOf('open')) return this;

  debug('opening %s', this.uri);
  this.engine = eio(this.uri, this.opts);
  var socket = this.engine;
  var self = this;
  this.readyState = 'opening';
  this.skipReconnect = false;

  // emit `open`
  var openSub = on(socket, 'open', function () {
    self.onopen();
    fn && fn();
  });

  // emit `connect_error`
  var errorSub = on(socket, 'error', function (data) {
    debug('connect_error');
    self.cleanup();
    self.readyState = 'closed';
    self.emitAll('connect_error', data);
    if (fn) {
      var err = new Error('Connection error');
      err.data = data;
      fn(err);
    } else {
      // Only do this if there is no fn to handle the error
      self.maybeReconnectOnOpen();
    }
  });

  // emit `connect_timeout`
  if (false !== this._timeout) {
    var timeout = this._timeout;
    debug('connect attempt will timeout after %d', timeout);

    // set timer
    var timer = setTimeout(function () {
      debug('connect attempt timed out after %d', timeout);
      openSub.destroy();
      socket.close();
      socket.emit('error', 'timeout');
      self.emitAll('connect_timeout', timeout);
    }, timeout);

    this.subs.push({
      destroy: function () {
        clearTimeout(timer);
      }
    });
  }

  this.subs.push(openSub);
  this.subs.push(errorSub);

  return this;
};

/**
 * Called upon transport open.
 *
 * @api private
 */

Manager.prototype.onopen = function () {
  debug('open');

  // clear old subs
  this.cleanup();

  // mark as open
  this.readyState = 'open';
  this.emit('open');

  // add new subs
  var socket = this.engine;
  this.subs.push(on(socket, 'data', bind(this, 'ondata')));
  this.subs.push(on(socket, 'ping', bind(this, 'onping')));
  this.subs.push(on(socket, 'pong', bind(this, 'onpong')));
  this.subs.push(on(socket, 'error', bind(this, 'onerror')));
  this.subs.push(on(socket, 'close', bind(this, 'onclose')));
  this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));
};

/**
 * Called upon a ping.
 *
 * @api private
 */

Manager.prototype.onping = function () {
  this.lastPing = new Date();
  this.emitAll('ping');
};

/**
 * Called upon a packet.
 *
 * @api private
 */

Manager.prototype.onpong = function () {
  this.emitAll('pong', new Date() - this.lastPing);
};

/**
 * Called with data.
 *
 * @api private
 */

Manager.prototype.ondata = function (data) {
  this.decoder.add(data);
};

/**
 * Called when parser fully decodes a packet.
 *
 * @api private
 */

Manager.prototype.ondecoded = function (packet) {
  this.emit('packet', packet);
};

/**
 * Called upon socket error.
 *
 * @api private
 */

Manager.prototype.onerror = function (err) {
  debug('error', err);
  this.emitAll('error', err);
};

/**
 * Creates a new socket for the given `nsp`.
 *
 * @return {Socket}
 * @api public
 */

Manager.prototype.socket = function (nsp, opts) {
  var socket = this.nsps[nsp];
  if (!socket) {
    socket = new Socket(this, nsp, opts);
    this.nsps[nsp] = socket;
    var self = this;
    socket.on('connecting', onConnecting);
    socket.on('connect', function () {
      socket.id = self.engine.id;
    });

    if (this.autoConnect) {
      // manually call here since connecting evnet is fired before listening
      onConnecting();
    }
  }

  function onConnecting () {
    if (!~indexOf(self.connecting, socket)) {
      self.connecting.push(socket);
    }
  }

  return socket;
};

/**
 * Called upon a socket close.
 *
 * @param {Socket} socket
 */

Manager.prototype.destroy = function (socket) {
  var index = indexOf(this.connecting, socket);
  if (~index) this.connecting.splice(index, 1);
  if (this.connecting.length) return;

  this.close();
};

/**
 * Writes a packet.
 *
 * @param {Object} packet
 * @api private
 */

Manager.prototype.packet = function (packet) {
  debug('writing packet %j', packet);
  var self = this;
  if (packet.query && packet.type === 0) packet.nsp += '?' + packet.query;

  if (!self.encoding) {
    // encode, then write to engine with result
    self.encoding = true;
    this.encoder.encode(packet, function (encodedPackets) {
      for (var i = 0; i < encodedPackets.length; i++) {
        self.engine.write(encodedPackets[i], packet.options);
      }
      self.encoding = false;
      self.processPacketQueue();
    });
  } else { // add packet to the queue
    self.packetBuffer.push(packet);
  }
};

/**
 * If packet buffer is non-empty, begins encoding the
 * next packet in line.
 *
 * @api private
 */

Manager.prototype.processPacketQueue = function () {
  if (this.packetBuffer.length > 0 && !this.encoding) {
    var pack = this.packetBuffer.shift();
    this.packet(pack);
  }
};

/**
 * Clean up transport subscriptions and packet buffer.
 *
 * @api private
 */

Manager.prototype.cleanup = function () {
  debug('cleanup');

  var subsLength = this.subs.length;
  for (var i = 0; i < subsLength; i++) {
    var sub = this.subs.shift();
    sub.destroy();
  }

  this.packetBuffer = [];
  this.encoding = false;
  this.lastPing = null;

  this.decoder.destroy();
};

/**
 * Close the current socket.
 *
 * @api private
 */

Manager.prototype.close =
Manager.prototype.disconnect = function () {
  debug('disconnect');
  this.skipReconnect = true;
  this.reconnecting = false;
  if ('opening' === this.readyState) {
    // `onclose` will not fire because
    // an open event never happened
    this.cleanup();
  }
  this.backoff.reset();
  this.readyState = 'closed';
  if (this.engine) this.engine.close();
};

/**
 * Called upon engine close.
 *
 * @api private
 */

Manager.prototype.onclose = function (reason) {
  debug('onclose');

  this.cleanup();
  this.backoff.reset();
  this.readyState = 'closed';
  this.emit('close', reason);

  if (this._reconnection && !this.skipReconnect) {
    this.reconnect();
  }
};

/**
 * Attempt a reconnection.
 *
 * @api private
 */

Manager.prototype.reconnect = function () {
  if (this.reconnecting || this.skipReconnect) return this;

  var self = this;

  if (this.backoff.attempts >= this._reconnectionAttempts) {
    debug('reconnect failed');
    this.backoff.reset();
    this.emitAll('reconnect_failed');
    this.reconnecting = false;
  } else {
    var delay = this.backoff.duration();
    debug('will wait %dms before reconnect attempt', delay);

    this.reconnecting = true;
    var timer = setTimeout(function () {
      if (self.skipReconnect) return;

      debug('attempting reconnect');
      self.emitAll('reconnect_attempt', self.backoff.attempts);
      self.emitAll('reconnecting', self.backoff.attempts);

      // check again for the case socket closed in above events
      if (self.skipReconnect) return;

      self.open(function (err) {
        if (err) {
          debug('reconnect attempt error');
          self.reconnecting = false;
          self.reconnect();
          self.emitAll('reconnect_error', err.data);
        } else {
          debug('reconnect success');
          self.onreconnect();
        }
      });
    }, delay);

    this.subs.push({
      destroy: function () {
        clearTimeout(timer);
      }
    });
  }
};

/**
 * Called upon successful reconnect.
 *
 * @api private
 */

Manager.prototype.onreconnect = function () {
  var attempt = this.backoff.attempts;
  this.reconnecting = false;
  this.backoff.reset();
  this.updateSocketIds();
  this.emitAll('reconnect', attempt);
};


/***/ }),
/* 27 */
/***/ (function(module, exports) {


/**
 * Module exports.
 */

module.exports = on;

/**
 * Helper for subscriptions.
 *
 * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`
 * @param {String} event name
 * @param {Function} callback
 * @api public
 */

function on (obj, ev, fn) {
  obj.on(ev, fn);
  return {
    destroy: function () {
      obj.removeListener(ev, fn);
    }
  };
}


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Module dependencies.
 */

var parser = __webpack_require__(18);
var Emitter = __webpack_require__(8);
var toArray = __webpack_require__(65);
var on = __webpack_require__(27);
var bind = __webpack_require__(21);
var debug = __webpack_require__(4)('socket.io-client:socket');
var hasBin = __webpack_require__(22);

/**
 * Module exports.
 */

module.exports = exports = Socket;

/**
 * Internal events (blacklisted).
 * These events can't be emitted by the user.
 *
 * @api private
 */

var events = {
  connect: 1,
  connect_error: 1,
  connect_timeout: 1,
  connecting: 1,
  disconnect: 1,
  error: 1,
  reconnect: 1,
  reconnect_attempt: 1,
  reconnect_failed: 1,
  reconnect_error: 1,
  reconnecting: 1,
  ping: 1,
  pong: 1
};

/**
 * Shortcut to `Emitter#emit`.
 */

var emit = Emitter.prototype.emit;

/**
 * `Socket` constructor.
 *
 * @api public
 */

function Socket (io, nsp, opts) {
  this.io = io;
  this.nsp = nsp;
  this.json = this; // compat
  this.ids = 0;
  this.acks = {};
  this.receiveBuffer = [];
  this.sendBuffer = [];
  this.connected = false;
  this.disconnected = true;
  if (opts && opts.query) {
    this.query = opts.query;
  }
  if (this.io.autoConnect) this.open();
}

/**
 * Mix in `Emitter`.
 */

Emitter(Socket.prototype);

/**
 * Subscribe to open, close and packet events
 *
 * @api private
 */

Socket.prototype.subEvents = function () {
  if (this.subs) return;

  var io = this.io;
  this.subs = [
    on(io, 'open', bind(this, 'onopen')),
    on(io, 'packet', bind(this, 'onpacket')),
    on(io, 'close', bind(this, 'onclose'))
  ];
};

/**
 * "Opens" the socket.
 *
 * @api public
 */

Socket.prototype.open =
Socket.prototype.connect = function () {
  if (this.connected) return this;

  this.subEvents();
  this.io.open(); // ensure open
  if ('open' === this.io.readyState) this.onopen();
  this.emit('connecting');
  return this;
};

/**
 * Sends a `message` event.
 *
 * @return {Socket} self
 * @api public
 */

Socket.prototype.send = function () {
  var args = toArray(arguments);
  args.unshift('message');
  this.emit.apply(this, args);
  return this;
};

/**
 * Override `emit`.
 * If the event is in `events`, it's emitted normally.
 *
 * @param {String} event name
 * @return {Socket} self
 * @api public
 */

Socket.prototype.emit = function (ev) {
  if (events.hasOwnProperty(ev)) {
    emit.apply(this, arguments);
    return this;
  }

  var args = toArray(arguments);
  var parserType = parser.EVENT; // default
  if (hasBin(args)) { parserType = parser.BINARY_EVENT; } // binary
  var packet = { type: parserType, data: args };

  packet.options = {};
  packet.options.compress = !this.flags || false !== this.flags.compress;

  // event ack callback
  if ('function' === typeof args[args.length - 1]) {
    debug('emitting packet with ack id %d', this.ids);
    this.acks[this.ids] = args.pop();
    packet.id = this.ids++;
  }

  if (this.connected) {
    this.packet(packet);
  } else {
    this.sendBuffer.push(packet);
  }

  delete this.flags;

  return this;
};

/**
 * Sends a packet.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.packet = function (packet) {
  packet.nsp = this.nsp;
  this.io.packet(packet);
};

/**
 * Called upon engine `open`.
 *
 * @api private
 */

Socket.prototype.onopen = function () {
  debug('transport is open - connecting');

  // write connect packet if necessary
  if ('/' !== this.nsp) {
    if (this.query) {
      this.packet({type: parser.CONNECT, query: this.query});
    } else {
      this.packet({type: parser.CONNECT});
    }
  }
};

/**
 * Called upon engine `close`.
 *
 * @param {String} reason
 * @api private
 */

Socket.prototype.onclose = function (reason) {
  debug('close (%s)', reason);
  this.connected = false;
  this.disconnected = true;
  delete this.id;
  this.emit('disconnect', reason);
};

/**
 * Called with socket packet.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onpacket = function (packet) {
  if (packet.nsp !== this.nsp) return;

  switch (packet.type) {
    case parser.CONNECT:
      this.onconnect();
      break;

    case parser.EVENT:
      this.onevent(packet);
      break;

    case parser.BINARY_EVENT:
      this.onevent(packet);
      break;

    case parser.ACK:
      this.onack(packet);
      break;

    case parser.BINARY_ACK:
      this.onack(packet);
      break;

    case parser.DISCONNECT:
      this.ondisconnect();
      break;

    case parser.ERROR:
      this.emit('error', packet.data);
      break;
  }
};

/**
 * Called upon a server event.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onevent = function (packet) {
  var args = packet.data || [];
  debug('emitting event %j', args);

  if (null != packet.id) {
    debug('attaching ack callback to event');
    args.push(this.ack(packet.id));
  }

  if (this.connected) {
    emit.apply(this, args);
  } else {
    this.receiveBuffer.push(args);
  }
};

/**
 * Produces an ack callback to emit with an event.
 *
 * @api private
 */

Socket.prototype.ack = function (id) {
  var self = this;
  var sent = false;
  return function () {
    // prevent double callbacks
    if (sent) return;
    sent = true;
    var args = toArray(arguments);
    debug('sending ack %j', args);

    var type = hasBin(args) ? parser.BINARY_ACK : parser.ACK;
    self.packet({
      type: type,
      id: id,
      data: args
    });
  };
};

/**
 * Called upon a server acknowlegement.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onack = function (packet) {
  var ack = this.acks[packet.id];
  if ('function' === typeof ack) {
    debug('calling ack %s with %j', packet.id, packet.data);
    ack.apply(this, packet.data);
    delete this.acks[packet.id];
  } else {
    debug('bad ack %s', packet.id);
  }
};

/**
 * Called upon server connect.
 *
 * @api private
 */

Socket.prototype.onconnect = function () {
  this.connected = true;
  this.disconnected = false;
  this.emit('connect');
  this.emitBuffered();
};

/**
 * Emit buffered events (received and emitted).
 *
 * @api private
 */

Socket.prototype.emitBuffered = function () {
  var i;
  for (i = 0; i < this.receiveBuffer.length; i++) {
    emit.apply(this, this.receiveBuffer[i]);
  }
  this.receiveBuffer = [];

  for (i = 0; i < this.sendBuffer.length; i++) {
    this.packet(this.sendBuffer[i]);
  }
  this.sendBuffer = [];
};

/**
 * Called upon server disconnect.
 *
 * @api private
 */

Socket.prototype.ondisconnect = function () {
  debug('server disconnect (%s)', this.nsp);
  this.destroy();
  this.onclose('io server disconnect');
};

/**
 * Called upon forced client/server side disconnections,
 * this method ensures the manager stops tracking us and
 * that reconnections don't get triggered for this.
 *
 * @api private.
 */

Socket.prototype.destroy = function () {
  if (this.subs) {
    // clean subscriptions to avoid reconnections
    for (var i = 0; i < this.subs.length; i++) {
      this.subs[i].destroy();
    }
    this.subs = null;
  }

  this.io.destroy(this);
};

/**
 * Disconnects the socket manually.
 *
 * @return {Socket} self
 * @api public
 */

Socket.prototype.close =
Socket.prototype.disconnect = function () {
  if (this.connected) {
    debug('performing disconnect (%s)', this.nsp);
    this.packet({ type: parser.DISCONNECT });
  }

  // remove socket from pool
  this.destroy();

  if (this.connected) {
    // fire events
    this.onclose('io client disconnect');
  }
  return this;
};

/**
 * Sets the compress flag.
 *
 * @param {Boolean} if `true`, compresses the sending data
 * @return {Socket} self
 * @api public
 */

Socket.prototype.compress = function (compress) {
  this.flags = this.flags || {};
  this.flags.compress = compress;
  return this;
};


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * Module dependencies
 */

var XMLHttpRequest = __webpack_require__(17);
var XHR = __webpack_require__(55);
var JSONP = __webpack_require__(54);
var websocket = __webpack_require__(56);

/**
 * Export transports.
 */

exports.polling = polling;
exports.websocket = websocket;

/**
 * Polling transport polymorphic constructor.
 * Decides on xhr vs jsonp based on feature detection.
 *
 * @api private
 */

function polling (opts) {
  var xhr;
  var xd = false;
  var xs = false;
  var jsonp = false !== opts.jsonp;

  if (global.location) {
    var isSSL = 'https:' === location.protocol;
    var port = location.port;

    // some user agents have empty `location.port`
    if (!port) {
      port = isSSL ? 443 : 80;
    }

    xd = opts.hostname !== location.hostname || port !== opts.port;
    xs = opts.secure !== isSSL;
  }

  opts.xdomain = xd;
  opts.xscheme = xs;
  xhr = new XMLHttpRequest(opts);

  if ('open' in xhr && !opts.forceJSONP) {
    return new XHR(opts);
  } else {
    if (!jsonp) throw new Error('JSONP disabled');
    return new JSONP(opts);
  }
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Module dependencies.
 */

var Transport = __webpack_require__(16);
var parseqs = __webpack_require__(15);
var parser = __webpack_require__(5);
var inherit = __webpack_require__(11);
var yeast = __webpack_require__(32);
var debug = __webpack_require__(4)('engine.io-client:polling');

/**
 * Module exports.
 */

module.exports = Polling;

/**
 * Is XHR2 supported?
 */

var hasXHR2 = (function () {
  var XMLHttpRequest = __webpack_require__(17);
  var xhr = new XMLHttpRequest({ xdomain: false });
  return null != xhr.responseType;
})();

/**
 * Polling interface.
 *
 * @param {Object} opts
 * @api private
 */

function Polling (opts) {
  var forceBase64 = (opts && opts.forceBase64);
  if (!hasXHR2 || forceBase64) {
    this.supportsBinary = false;
  }
  Transport.call(this, opts);
}

/**
 * Inherits from Transport.
 */

inherit(Polling, Transport);

/**
 * Transport name.
 */

Polling.prototype.name = 'polling';

/**
 * Opens the socket (triggers polling). We write a PING message to determine
 * when the transport is open.
 *
 * @api private
 */

Polling.prototype.doOpen = function () {
  this.poll();
};

/**
 * Pauses polling.
 *
 * @param {Function} callback upon buffers are flushed and transport is paused
 * @api private
 */

Polling.prototype.pause = function (onPause) {
  var self = this;

  this.readyState = 'pausing';

  function pause () {
    debug('paused');
    self.readyState = 'paused';
    onPause();
  }

  if (this.polling || !this.writable) {
    var total = 0;

    if (this.polling) {
      debug('we are currently polling - waiting to pause');
      total++;
      this.once('pollComplete', function () {
        debug('pre-pause polling complete');
        --total || pause();
      });
    }

    if (!this.writable) {
      debug('we are currently writing - waiting to pause');
      total++;
      this.once('drain', function () {
        debug('pre-pause writing complete');
        --total || pause();
      });
    }
  } else {
    pause();
  }
};

/**
 * Starts polling cycle.
 *
 * @api public
 */

Polling.prototype.poll = function () {
  debug('polling');
  this.polling = true;
  this.doPoll();
  this.emit('poll');
};

/**
 * Overloads onData to detect payloads.
 *
 * @api private
 */

Polling.prototype.onData = function (data) {
  var self = this;
  debug('polling got data %s', data);
  var callback = function (packet, index, total) {
    // if its the first message we consider the transport open
    if ('opening' === self.readyState) {
      self.onOpen();
    }

    // if its a close packet, we close the ongoing requests
    if ('close' === packet.type) {
      self.onClose();
      return false;
    }

    // otherwise bypass onData and handle the message
    self.onPacket(packet);
  };

  // decode payload
  parser.decodePayload(data, this.socket.binaryType, callback);

  // if an event did not trigger closing
  if ('closed' !== this.readyState) {
    // if we got data we're not polling
    this.polling = false;
    this.emit('pollComplete');

    if ('open' === this.readyState) {
      this.poll();
    } else {
      debug('ignoring poll - transport state "%s"', this.readyState);
    }
  }
};

/**
 * For polling, send a close packet.
 *
 * @api private
 */

Polling.prototype.doClose = function () {
  var self = this;

  function close () {
    debug('writing close packet');
    self.write([{ type: 'close' }]);
  }

  if ('open' === this.readyState) {
    debug('transport open - closing');
    close();
  } else {
    // in case we're trying to close while
    // handshaking is in progress (GH-164)
    debug('transport not open - deferring close');
    this.once('open', close);
  }
};

/**
 * Writes a packets payload.
 *
 * @param {Array} data packets
 * @param {Function} drain callback
 * @api private
 */

Polling.prototype.write = function (packets) {
  var self = this;
  this.writable = false;
  var callbackfn = function () {
    self.writable = true;
    self.emit('drain');
  };

  parser.encodePayload(packets, this.supportsBinary, function (data) {
    self.doWrite(data, callbackfn);
  });
};

/**
 * Generates uri for connection.
 *
 * @api private
 */

Polling.prototype.uri = function () {
  var query = this.query || {};
  var schema = this.secure ? 'https' : 'http';
  var port = '';

  // cache busting is forced
  if (false !== this.timestampRequests) {
    query[this.timestampParam] = yeast();
  }

  if (!this.supportsBinary && !query.sid) {
    query.b64 = 1;
  }

  query = parseqs.encode(query);

  // avoid port if default for schema
  if (this.port && (('https' === schema && Number(this.port) !== 443) ||
     ('http' === schema && Number(this.port) !== 80))) {
    port = ':' + this.port;
  }

  // prepend ? to query
  if (query.length) {
    query = '?' + query;
  }

  var ipv6 = this.hostname.indexOf(':') !== -1;
  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
};


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
module.exports = isBuf;

/**
 * Returns true if obj is a buffer or an arraybuffer.
 *
 * @api private
 */

function isBuf(obj) {
  return (global.Buffer && global.Buffer.isBuffer(obj)) ||
         (global.ArrayBuffer && obj instanceof ArrayBuffer);
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split('')
  , length = 64
  , map = {}
  , seed = 0
  , i = 0
  , prev;

/**
 * Return a string representing the specified number.
 *
 * @param {Number} num The number to convert.
 * @returns {String} The string representation of the number.
 * @api public
 */
function encode(num) {
  var encoded = '';

  do {
    encoded = alphabet[num % length] + encoded;
    num = Math.floor(num / length);
  } while (num > 0);

  return encoded;
}

/**
 * Return the integer value specified by the given string.
 *
 * @param {String} str The string to convert.
 * @returns {Number} The integer value represented by the string.
 * @api public
 */
function decode(str) {
  var decoded = 0;

  for (i = 0; i < str.length; i++) {
    decoded = decoded * length + map[str.charAt(i)];
  }

  return decoded;
}

/**
 * Yeast: A tiny growing id generator.
 *
 * @returns {String} A unique id.
 * @api public
 */
function yeast() {
  var now = encode(+new Date());

  if (now !== prev) return seed = 0, prev = now;
  return now +'.'+ encode(seed++);
}

//
// Map each character to its index.
//
for (; i < length; i++) map[alphabet[i]] = i;

//
// Expose the `yeast`, `encode` and `decode` functions.
//
yeast.encode = encode;
yeast.decode = decode;
module.exports = yeast;


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var EventEmitter = __webpack_require__(14).EventEmitter;
class Monitors extends EventEmitter {
	constructor(readyCB, changeCB) {
		super();
		this.bindAllFunctions();
		this.refreshMonitors(readyCB);

		fin.desktop.System.addEventListener("monitor-info-changed", () => {
			this.refreshMonitors(changeCB);
		});
	}

	bindAllFunctions() {
		let self = this;
		for (let name of Object.getOwnPropertyNames(Object.getPrototypeOf(self))) {
			let method = self[name];
			// skip constructor
			if (!(method instanceof Function) || method === Monitors) continue;
			self[name] = self[name].bind(self);
		}
	}

	asyncIt(data, cb) {
		cb(data);
		return data;
	}

	rationalizeMonitor(monitor) {
		monitor.monitorRect.width = monitor.monitorRect.right - monitor.monitorRect.left;
		monitor.monitorRect.height = monitor.monitorRect.bottom - monitor.monitorRect.top;
		monitor.availableRect.width = monitor.availableRect.right - monitor.availableRect.left;
		monitor.availableRect.height = monitor.availableRect.bottom - monitor.availableRect.top;
	}

	calculateMonitorScale(dipRect, scaledRect) {
		return (scaledRect.right - scaledRect.left) / (dipRect.right - dipRect.left);
	}

	refreshMonitors(cb = function () {}) {
		fin.desktop.System.getMonitorInfo(monitorInfo => {
			//console.log("getAllMonitors");
			this.allMonitors = [];
			var primaryMonitor = monitorInfo.primaryMonitor;
			this.primaryMonitor = primaryMonitor;
			primaryMonitor.whichMonitor = "primary";
			primaryMonitor.deviceScaleFactor = this.calculateMonitorScale(primaryMonitor.monitor.dipRect, primaryMonitor.monitor.scaledRect);

			primaryMonitor.position = 0;
			this.allMonitors.push(primaryMonitor);
			for (let i = 0; i < monitorInfo.nonPrimaryMonitors.length; i++) {
				let monitor = monitorInfo.nonPrimaryMonitors[i];
				monitor.deviceScaleFactor = this.calculateMonitorScale(monitor.monitor.dipRect, monitor.monitor.scaledRect);
				monitor.whichMonitor = i;
				monitor.position = i + 1;
				this.allMonitors.push(monitor);
			}
			for (let i = 0; i < this.allMonitors.length; i++) {
				let monitor = this.allMonitors[i];
				this.rationalizeMonitor(monitor);
			}
			cb(this.allMonitors);
			this.ready = true;
			this.emit("monitors-changed", this.allMonitors);
		});
	}

	/**
  * Gets All Monitors.
  * @param {*} cb
  */
	getAllMonitors(cb = function () {}) {
		if (!this.ready) {
			if (cb) this.refreshMonitors(cb);else return "not ready";
		} else {
			return this.asyncIt(this.allMonitors, cb);
		}
	}

	/**
  * Gets the monitor on which the point is or null if not on any monitor. This assumes scaled dimensions for the monitor (For example from Openfin or WPF directly).
  * @param {*} x
  * @param {*} y
  * @param {*} cb
  */
	getMonitorFromScaledXY(x, y, cb = function () {}) {
		if (!this.ready) {
			this.refreshMonitors(() => {
				this.getMonitorFromScaledXY(x, y, cb);
			});
			return "not ready";
		}
		var monitors = this.allMonitors;
		for (var i = 0; i < monitors.length; i++) {
			var monitor = monitors[i];
			var monitorRect = monitor.monitorRect;
			// Are our coordinates inside the monitor? Note that
			// left and top are inclusive. right and bottom are exclusive
			// In OpenFin, two adjacent monitors will share a right and left pixel value!
			if (x >= monitorRect.left && x < monitorRect.right && y >= monitorRect.top && y < monitorRect.bottom) {
				return this.asyncIt(monitor, cb);
			}
		}
		return this.asyncIt(null, cb);
	}

	/**
  * Gets the monitor on which the point is or null if not on any monitor. This assumes unscaled positions of x,y (for example from windows API).
  *
  * @param {any} x
  * @param {any} y
  * @param {any} [cb=function () { }]
  * @returns monitor if found or null
  * @memberof Monitors
  */
	getMonitorFromUnscaledXY(x, y, cb = function () {}) {
		if (!this.ready) {
			this.refreshMonitors(() => {
				this.getMonitorFromUnscaledXY(x, y, cb);
			});
			return "not ready";
		}
		var monitors = this.allMonitors;
		for (var i = 0; i < monitors.length; i++) {
			var monitor = monitors[i];
			var monitorRect = monitor.monitor.scaledRect;
			if (x >= monitorRect.left && x < monitorRect.right && y >= monitorRect.top && y < monitorRect.bottom) {
				return this.asyncIt(monitor, cb);
			}
		}
		return this.asyncIt(null, cb);
	}

	/**
  * Converts Point from scaled (e.g. from OpenFin/WPF) to unscaled (e.g. to give Windows API) position
  *
  * @param {any} point
  * @param {any} [cb=function () { }]
  * @returns monitor if found or null
  * @memberof Monitors
  */
	translatePointFromScaled(params, cb = function () {}) {
		if (!this.ready) {
			this.refreshMonitors(() => {
				this.translatePointFromScaled(params, cb);
			});
			return "not ready";
		}
		var point;
		if (params.point) point = params.point;else point = params;
		var monitor = params.monitor || this.getMonitorFromScaledXY(point.x, point.y);
		if (!monitor) return this.asyncIt(null, cb);
		var relativeX = point.x - monitor.monitorRect.left;
		var relativeY = point.y - monitor.monitorRect.top;
		var unscaledRelativeX = relativeX * monitor.deviceScaleFactor;
		var unscaledRelativeY = relativeY * monitor.deviceScaleFactor;
		var unscaledPoint = {
			x: unscaledRelativeX + monitor.monitor.scaledRect.left,
			y: unscaledRelativeY + monitor.monitor.scaledRect.top
		};
		return this.asyncIt(unscaledPoint, cb);
	}

	/**
  * Converts Point to scaled (e.g. from OpenFin/WPF) from unscaled (e.g. to give Windows API) position
  *
  * @param {any} point
  * @param {any} [cb=function () { }]
  * @returns point if on monitor or null
  * @memberof Monitors
  */
	translatePointToScaled(params, cb = function () {}) {
		if (!this.ready) {
			this.refreshMonitors(() => {
				this.translatePointToScaled(params, cb);
			});
			return "not ready";
		}
		var point;
		if (params.point) point = params.point;else point = params;
		var monitor = params.monitor || this.getMonitorFromUnscaledXY(point.x, point.y);
		if (!monitor) return this.asyncIt(null, cb);
		var relativeX = point.x - monitor.monitor.scaledRect.left;
		var relativeY = point.y - monitor.monitor.scaledRect.top;
		var scaledRelativeX = relativeX / monitor.deviceScaleFactor;
		var scaledRelativeY = relativeY / monitor.deviceScaleFactor;
		var scaledPoint = {
			x: scaledRelativeX + monitor.monitorRect.left,
			y: scaledRelativeY + monitor.monitorRect.top
		};
		return this.asyncIt(scaledPoint, cb);
	}

	/**
  * Converts Rectangle (top, left, bottom, right) from unscaled to scaled. Mainly for use to translate window locations to/from Windows API.
  *
  * @param {any} rect
  * @param {any} [cb=function () { }]
  * @returns rect
  * @memberof Monitors
  */
	translateRectToScaled(rect, cb = function () {}) {
		if (!this.ready) {
			this.refreshMonitors(() => {
				this.translateRectToScaled(rect, cb);
			});
			return "not ready";
		}
		var topLeft = this.translatePointToScaled({ x: rect.left, y: rect.top });
		var bottomRight = this.translatePointToScaled({ x: rect.right, y: rect.bottom });
		if (!topLeft && bottomRight) {
			topLeft = this.translatePointToScaled({
				monitor: this.getMonitorFromScaledXY(bottomRight),
				point: { x: rect.left, y: rect.top }
			});
		}
		if (!bottomRight && topLeft) {
			bottomRight = this.translatePointToScaled({
				monitor: this.getMonitorFromScaledXY(topLeft),
				point: { x: rect.right, y: rect.bottom }
			});
		}
		return this.asyncIt({
			top: topLeft ? topLeft.y : null,
			left: topLeft ? topLeft.x : null,
			bottom: bottomRight ? bottomRight.y : null,
			right: bottomRight ? bottomRight.x : null,
			height: topLeft && bottomRight ? bottomRight.y - topLeft.y : null,
			width: topLeft && bottomRight ? bottomRight.x - topLeft.x : null
		}, cb);
	}

	/**
  * Converts Rectangle (top, left, bottom, right) to unscaled from scaled. Mainly for use to translate window locations to/from Windows API.
  *
  * @param {any} rect
  * @param {any} [cb=function () { }]
  * @returns rect
  * @memberof Monitors
  */
	translateRectFromScaled(rect, cb = function () {}) {
		if (!this.ready) {
			this.refreshMonitors(() => {
				this.translateRectFromScaled(rect, cb);
			});
			return "not ready";
		}
		var topLeft = this.translatePointFromScaled({ x: rect.left, y: rect.top });
		var bottomRight = this.translatePointFromScaled({ x: rect.right, y: rect.bottom });
		if (!topLeft && bottomRight) {
			topLeft = this.translatePointFromScaled({
				monitor: this.getMonitorFromUnscaledXY(bottomRight),
				point: { x: rect.left, y: rect.top }
			});
		}
		if (!bottomRight && topLeft) {
			bottomRight = this.translatePointFromScaled({
				monitor: this.getMonitorFromUnscaledXY(topLeft),
				point: { x: rect.right, y: rect.bottom }
			});
		}
		return this.asyncIt({
			top: topLeft ? topLeft.y : null,
			left: topLeft ? topLeft.x : null,
			bottom: bottomRight ? bottomRight.y : null,
			right: bottomRight ? bottomRight.x : null,
			height: topLeft && bottomRight ? bottomRight.y - topLeft.y : null,
			width: topLeft && bottomRight ? bottomRight.x - topLeft.x : null
		}, cb);
	}
}
module.exports = Monitors;

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\common\\MonitorsAndScaling.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\common\\MonitorsAndScaling.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/*!
* Copyright 2017 by ChartIQ, Inc.
* All rights reserved.
*/

var Logger = __webpack_require__(2);
var ConfigUtil = __webpack_require__(13);

"use strict";

/**
 * @hideConstructor true
 * @constructor
 */
var UserNotification = function () {
	var alertOnceSinceStartUp = {};
	var alertCurrentCount = {};
	var defaultTemplateURL = null;

	/**
  * Gets the default template URL from the manifest at finsemble->notificationURL. If that doesn't exist then it falls back to the system template location.
  * @private
  */
	this.getDefaultTemplateURL = function (cb) {
		if (defaultTemplateURL) {
			setTimeout(function () {
				cb(defaultTemplateURL);
			}, 0);
		} else {
			FSBL.Clients.ConfigClient.get({ field: "finsemble" }, function (err, finConfig) {
				defaultTemplateURL = ConfigUtil.getDefault(finConfig, "finsemble.notificationURL", finConfig.moduleRoot + "/components/system/notification/notification.html");
				cb(defaultTemplateURL);
			});
		}
	};

	/**
  * Conditionally alerts the end user using a desktop notification.
  *
  * @param {string} topic specifies a category for the notification. Topic is currently unused, but in the future it will be used to filter notifications (e.g. applying regEx's defined in config to determine which notifications are displayed). Any topic string can be specified; however "system" is the recommended topic for system notifications applicable both to end uses and to developers. "dev" is the recommended topic for notifications applicable only during development (e.g. a notification that config.json has an illegal value).
  * @param {string} frequency Either "ALWAYS", "ONCE-SINCE-STARTUP", or "MAX-COUNT" to determine if alert should be displayed. Note, the frequencies are based on the number of notifications emitted from a window (as opposed to system wide.)
  * @param {string} identifier uniquely identifies this specific notification message. Used when "frequency" is set to "ONCE-SINCE-STARTUP" or "MAX-COUNT"
  * @param {any} message message to display in the notification. Typically a string. Finsemble's built in templating accepts and object. See src-built-in/components/notification/notification.html.
  * @param {object=} params
  * @param {number} params.maxCount specifies the max number of notifications to display for specified identifier when frequency="MAX-COUNT" (default is 1)
  * @param {number} params.duration time in milliseconds before auto-dismissing the notification (defaults to 24 hours)
  * @param {number} params.url url for notification HTML. If not provided then the system default will be used. This url should be coded as required for OpenFin notifications (see OpenFin Documentation). Defaults to Finsemble's built-in version at "/finsemble/components/system/notification/notification.html".
  * 
  * @example
  *		UserNotification.alert("system", "ONCE-SINCE-STARTUP", "MANIFEST-Error", message);
 *		UserNotification.alert("dev", "ALWAYS", "Config-Error", message, { url: notificationURL, duration: 1000 * 5 });
 *		UserNotification.alert("dev", "MAX-COUNT", "Transport-Failure", message, { url: notificationURL, maxCount: 2 });
 */

	this.alert = function (topic, frequency, identifier, message, params) {
		var self = this;
		// If the url for the template is passed in then don't bother fetching the config
		if (params && params.url) {
			this.alertInternal(topic, frequency, identifier, message, params, params.url);
		} else {
			// If no url, then we need to get the template from config
			this.getDefaultTemplateURL(function (url) {
				self.alertInternal(topic, frequency, identifier, message, params, url);
			});
		}
	};

	/**
  * @private
  */
	this.alertInternal = function (topic, frequency, identifier, message, params, url) {
		params = params || {};
		var alertUser = false;
		var key = "UserNotification.alert." + identifier;
		var duration = params.duration || 1000 * 60 * 60 * 24;

		switch (frequency) {
			case "ONCE-SINCE-STARTUP":
				if (key in alertOnceSinceStartUp) {
					alertUser = false;
				} else {
					// if no key then must be first time
					alertUser = true;
					alertOnceSinceStartUp[key] = true;
				}
				break;
			case "MAX-COUNT":
				let currentCount = 0;
				let maxCount = params.maxCount || 1;
				if (key in alertCurrentCount) {
					currentCount = alertCurrentCount[key];
				}
				alertCurrentCount[key] = ++currentCount; // increment and store
				if (currentCount <= maxCount) {
					alertUser = true;
				}
				break;
			default:
				// default to "ALWAYS"
				alertUser = true;
		}

		Logger.log("UserNotification.alert", topic, alertUser, frequency, identifier, message, params);
		console.log("UserNotification.alert", topic, alertUser, frequency, identifier, message, params);

		if (alertUser) {
			var notifyObject = {
				url: url,
				message: message,
				timeout: duration
			};
			new fin.desktop.Notification(notifyObject);
		}
	};
};

module.exports = new UserNotification();

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\common\\userNotification.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\common\\userNotification.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/*!
* Copyright 2017 by ChartIQ, Inc.
* All rights reserved.
*/

// This routerTransport module is shared between router clients and the router service.  It supports
// the addition of new transports without any change to the router code. Each transport is
// point-to-point between a router client and the router service (i.e. hub and spoke).  Each router
// client can use a different transport (i.e. the router service connects to them all).



var ConfigUtils = __webpack_require__(13);
var Logger = __webpack_require__(2);
var WebSocketClient = __webpack_require__(47);

/**
 * @introduction
 * <h2>Router Transport</h2>
 * **Service-Level Module**.  Manages and contains the point-to-point transports (i.e., Layer 2) supported by Finsemble.
 * Each transport communicates between a Finsemble services or component (i.e. a router client on one end) and the Finsemble router service (another router client on the other end).
 *
 * Integration into routerService.js is automatic on startup.
 *
 * Developer Notes on Adding New Transport:
 * 1) Create new transport constructor.
 * 2) Call RouterTransport.addTransport() to make the transport constructor (see the bottom of this file)
 *
 * Each transport constructor must be implemented with the following interface:
 *
 *	ExampleTransportConstructor(params, parentMessageHandler, source, destination) where
 *
 * 			params is a passed in object including data that may (or may not) be needed for implementing the transport
 * 					params.FinsembleUUID: globally unique identifier for Finsemble (one per host machine)
 *					params.applicationRoot:  value of manifest.finsemble.applicationRoot,
 *					params.routerDomainRoot: value of manifest.finsemble.moduleRoot,
 *					params.sameDomainTransport: transport to use for same domain clients
 *					params.crossDomainTransport: transport to use for cross domain clients
 *					params.transportSettings: transport settings from finsemble.router.transportSettings if defined, otherwise an empty object
 *
 * 			parentMessageHandler(incomingTransportInfo, routerMessage) where
 * 					incomingTransportInfo is a transport-specific object containing essential information to route back to the same client.
 * 						The same object will be returned on a send() so the transport can use to send the message to that client.
 * 						It's up to the developer to decide what to put in the incomingTransportInfo object. The RouterService never
 * 						directly uses the object, except to do a property-based comparison for equality (so equality must be based on the top-level properties within the object.)
 * 					routerMessage is an object containing a single router message. The transport generally does not need to know the contents --
 * 						it only sends and receives these messages. However, the router's header (routerMessage.header) is available to the transport if needed.
 *
 * 			source is either the source's client name or "RouterService" (when the RouterService is the source)
 *
 * 			destination is either the destination's client name or "RouterService" (when the RouterService is the desgination)
 *
 * 			callback(this) returns the constructor.  Normally a constructor is not asyncronous, but support in case the constructed transport requires async initialization.
 *
 * The transport constructor must implement two functions.
 * 		1) send(transport, routerMessage) -- transport object contains destination transport info; routerMessage is the message to send
 * 		2) identifier() -- returns transport's name
 *
 * These functions along with the parentMessageHandler callback all that's needed to interface with the higher-level router (either a client or router service):
 *
 * The three transports implemented at the bottom of this file can serve as examples.
 *
 * @namespace RouterTransport
 */
var RouterTransport = {

	activeTransports: {},

	/**
  * Adds a new type of router transport to pass message between RouterClient and RouterService.
  *
  * @param {string} transportName identifies the new transport
  * @param {object} transportConstructor returns an instance of the new transport
  */
	addTransport: function (transportName, transportConstructor) {
		this.activeTransports[transportName] = transportConstructor;
		Logger.system.log(`RouterTransport ${transportName} added to activeTransports`);
	},

	/**
  * Gets array of active transports.  What is active depends both on config and what is supported by the environment. Typically, if OF IAB is defined then the IAB transport is added to active list.  Likewise, if SharedWorker defined, then SharedWork transport added to the active list.  Special transports that don't have backwards compatability (e.g. FinsembleTransport) are only added if specified in the config.
  *
  * @param {string} params transport paramters
  *
  * @returns array of active transport names
  */
	getActiveTransports: function (params) {
		var transportNames = [];

		// convenience funciton to add transport to active list only if it's not already in the list
		function addToActive(transportName) {
			if (transportNames.indexOf(transportName) === -1) {
				// if not already in the list, then add it
				transportNames.push(transportName);
			}
		}

		// if OpenFin IAB available, then add IAB to active list
		if (fin && fin.desktop && fin.desktop.InterApplicationBus) addToActive("OpenFinBus");

		// if shared worker available, then add shared-worker transport to active list
		if (SharedWorker) addToActive("SharedWorker");

		// add whatever the sameDomainTrasnport is to the active list
		addToActive(params.sameDomainTransport);

		// add whatever the crossDomainTrasnport is to the active list
		addToActive(params.crossDomainTransport);

		Logger.system.log("getActiveTransports", transportNames);
		return transportNames;
	},

	/**
  * Get default transport for event router&mdash;this is the most reliable transport across all contexts.
  *
 	 * @param {object} params parameters for transport
  * @param {any} incomingMessageHandler
  * @param {any} source
  * @param {any} destination
  * @returns the transport object
  */
	getDefaultTransport: function (params, incomingMessageHandler, source, destination) {
		return RouterTransport.getTransport(params, "OpenFinBus", incomingMessageHandler, source, destination);
	},

	/**
  * Get best client transport based on the run-time context. Will only return cross-domain transport if current context is inter-domain.
  *
 	 * @param {object} params parameters for transport
  * @param {any} incomingMessageHandler
  * @param {any} source
  * @param {any} destination
  * @returns the transport object
  */
	getRecommendedTransport: function (params, incomingMessageHandler, source, destination) {

		// returns true if this window's location is in another domain
		function crossDomain() {
			var parser = document.createElement("a");
			parser.href = params.routerDomainRoot;

			var isSameHost = window.location.hostname === parser.hostname;

			var isSameProtocol = window.location.protocol === parser.protocol;

			var wport = window.location.port === undefined ? window.location.port : 80;
			var pport = parser.port === undefined ? parser.port : 80;
			var isSamePort = wport === pport;

			var isCrossDomain = !(isSameHost && isSamePort && isSameProtocol);
			Logger.system.debug("Transport crossDomain=" + isCrossDomain + " (" + isSameHost + ":" + isSameProtocol + ":" + isSamePort + ")");
			return isCrossDomain;
		}

		// returns name of the best transport for communicating with router service
		function recommendedTransportName() {
			var sameDomainTransport = params.sameDomainTransport;
			var crossDomainTransport = params.crossDomainTransport;

			var selectedTransport = sameDomainTransport;
			if (crossDomain()) {
				selectedTransport = crossDomainTransport;
			}

			Logger.system.log(`Transport Info: Selected=${selectedTransport} SameDomainDefault=${sameDomainTransport} CrossDomainDefault=${crossDomainTransport}`);
			console.log(`Transport Info: Selected=${selectedTransport} SameDomainDefault=${sameDomainTransport} CrossDomainDefault=${crossDomainTransport}`);

			return selectedTransport;
		}

		var transportName = recommendedTransportName();
		return RouterTransport.getTransport(params, transportName, incomingMessageHandler, source, destination);
	},

	/**
  * Get a specific transport by name. The transport must be in list of the active transports (i.e. previously added).
  *
 	 * @param {object} params parameters for transport
  * @param {any} transportName
  * @param {any} incomingMessageHandler
  * @param {any} source
  * @param {any} destination
  * @returns the transport object
  */
	getTransport: function (params, transportName, incomingMessageHandler, source, destination) {
		var self = this;
		return new Promise(function (resolve, reject) {
			var transportConstructor = self.activeTransports[transportName];
			if (transportConstructor) {
				new transportConstructor(params, incomingMessageHandler, source, destination, function (newTransport) {
					resolve(newTransport);
				});
			} else {
				reject("unknown router transport name: " + transportName);
			}
		});
	}
};

//////////////////////////////////////////////////////////////
// Below all transports are defined then added to active list
//////////////////////////////////////////////////////////////

var RouterTransportImplementation = {}; // a convenience namespace for router-transport implementations

/*
 * Implements the SharedWorker Transport.
 *
 * Required Functions (used by transport clients):
 * 		send(routerMessage) -- transports the event
 * 		identifier() -- returns transport name/identifier
 *
 * @param {object} params various parms to support transports
 * @param {any} parentMessageHandler callback for incoming event
 * @param {any} source either the client name or "RouterService"
 * @param {any} destination either the client name or "RouterService" (unused in SharedWorker)
 */
RouterTransportImplementation.SharedWorkerTransport = function (params, parentMessageHandler, source, destination, callback) {
	var routerThread;
	var self = this;

	// receives incoming shared-worker messages then passes on to parent with correct "wrapper"
	function sharedWorkerMessageHandler(swMessage) {
		var port = swMessage.data[0];
		var routerMessage = swMessage.data[1];
		var incomingTransportInfo = { "transportID": self.identifier(), "port": port };
		Logger.system.verbose("SharedWorkerTransport Incoming Transport", incomingTransportInfo, "Message", routerMessage);
		parentMessageHandler(incomingTransportInfo, routerMessage);
	}

	//required function for parent (i.e. routeClient or routeService)
	this.send = function (transport, routerMessage) {
		// handle optional transport parm
		if (arguments.length === 1) {
			// clients use just one parm -- routerMessage
			routerMessage = arguments[0];
			transport = null;
		} else {
			// router services uses both parameters
			transport = arguments[0];
			routerMessage = arguments[1];
		}
		Logger.system.verbose("SharedWorkerTransport Outgoing Transport", routerMessage);

		try {
			routerThread.port.postMessage([transport, routerMessage]);
		} catch (e) {
			Logger.system.error("SharedWorkerTransport: post message failed: " + JSON.stringify(e), "Probable cause is sending illegal data type (e.g. function).");
		}
	};

	//required function for parent (i.e. routeClient or routeService)
	this.identifier = function () {
		return "SharedWorker";
	};

	var workerPath = params.transportSettings.SharedWorker && params.transportSettings.SharedWorker.workerPath ? params.transportSettings.SharedWorker.workerPath : params.routerDomainRoot + "/common/routerSharedWorker.js";

	Logger.system.log(`SharedWorker Transport Initializing for ${source} using ${workerPath}`);
	console.log(`SharedWorker Transport Initializing for ${source} using ${workerPath}`);

	routerThread = new SharedWorker(workerPath, { name: "Finsemble", credentials: "included" });
	routerThread.port.onmessage = sharedWorkerMessageHandler;
	routerThread.onerror = function (e) {
		Logger.system.error("SharedWorkerTransport Transport Error" + JSON.stringify(e));
	};
	routerThread.port.start();

	if (source === "RouterService") {
		// send first message though shared worker to identify router service
		routerThread.port.postMessage({ data: "connect", source: "RouterService" });
	}

	callback(this);
};

/*
 * Implements the OpenFin Bus Transport.
 *
 * Required Functions (used by transport clients):
 * 		send(transport, routerMessage) -- transport object contains destination transport info; routerMessage is the message to send
 * 		identifier() -- returns transport's name
 *
 * @param {object} params unused in OpenFin transport
 * @param {any} parentMessageHandler callback for incoming event
 * @param {any} source either the client name or "RouterService"
 * @param {any} destination either the client name or "RouterService"
 */
RouterTransportImplementation.OpenFinTransport = function (params, parentMessageHandler, source, destination, callback) {
	var uuid = fin.desktop.Application.getCurrent().uuid;
	var self = this;

	// receives incoming OpenFin bus messages then passes on to parent with correct "wrapper"
	function openFinMessageHandler(routerMessage, senderUuid) {
		var incomingTransportInfo = { "transportID": self.identifier(), "senderUuid": senderUuid, "name": routerMessage.header.origin };
		Logger.system.verbose("OpenFinTransport Incoming Transport", incomingTransportInfo, "Message", routerMessage);
		parentMessageHandler(incomingTransportInfo, routerMessage);
	}

	function subscribeFailure(reason) {
		Logger.system.error("OpenFinBus Subscribe Failure: " + reason);
	}

	//required function for the parent (i.e. routeClient or routeService)
	this.send = function (transport, routerMessage) {
		var destTopic;

		// handle optional transport parm
		if (arguments.length === 1) {
			// client use just one parameter - routerMessage
			destTopic = destination;
			routerMessage = arguments[0];
		} else {
			// router service uses both parameters
			destTopic = transport.name;
			routerMessage = arguments[1];
		}

		Logger.system.verbose("OpenFinTransport Outgoing Transport", uuid, destTopic, "Message", routerMessage);
		fin.desktop.InterApplicationBus.publish(destTopic, routerMessage, function () {}, function (err) {});
	};

	//required function for the parent (i.e. routeClient or routeService)
	this.identifier = function () {
		return "OpenFinBus";
	};

	Logger.system.log(`OpenFinBus Transport Initializing for ${source}`);
	console.log(`OpenFinBus Transport Initializing for ${source}`);
	fin.desktop.InterApplicationBus.subscribe("*", source, openFinMessageHandler, null, subscribeFailure);

	callback(this);
};

/*
 * Implements the FinsembleTransport (alternative to IAB without iFrame problems with supporting server commonly running on local server).
 *
 * Required Functions (used by transport clients):
 * 		send(event) -- transports the event
 * 		identifier() -- returns transport name/identifier
 *
 * @param {object} params various parms to support transports
 * @param {any} parentMessageHandler callback for incoming event
 * @param {any} source either the client name or "RouterService"
 * @param {any} destination either the client name or "RouterService" (unused in FinsembleTransport)
 */
RouterTransportImplementation.FinsembleTransport = function (params, parentMessageHandler, source, destination, callback) {
	var serverAddress = ConfigUtils.getDefault(params, "params.transportSettings.FinsembleTransport.serverAddress", "wss://localhost.chartiq.com:3376");
	const SOCKET_SERVER_ADDRESS = serverAddress + "/router"; // "router" is the socket namespace used on server

	var self = this;

	// receives incoming messages then passes on to parent (what's passed to parent should be same routerMessage received in send()
	function finsembleMessageHandler(routerMessage) {
		var incomingTransportInfo = { "transportID": self.identifier(), "client": routerMessage.clientMessage.header.origin };
		Logger.system.verbose("FinsembleTransport Incoming Transport", incomingTransportInfo, "Message", routerMessage);
		parentMessageHandler(incomingTransportInfo, routerMessage.clientMessage);
	}

	// Both sending and receiving is based on the following routing functionality located in a local node server (the below is a copy of the node server code)
	// 		// destination is RouterClient (message.client)
	//  	client.on('ROUTER_CLIENT', function(message) {
	// 			routerServer.emit(message.client, message);
	// 		});
	// 		// destination is RouterService
	// 		client.on('ROUTER_SERVICE', function(message) {
	// 			routerServer.emit('ROUTER_SERVICE_IN', message);
	// 		});

	//required function for the parent (i.e. routeClient or routeService)
	this.send = function (transport, routerMessage) {
		var dest;
		var newMessage;

		// decide how to route the message based on whether client or routerservice is sending
		if (arguments.length === 1) {
			// clients use just one parameter, so send client message to RouterService
			dest = "ROUTER_SERVICE";
			routerMessage = arguments[0];
			newMessage = { clientMessage: routerMessage }; // no client property needed to route on server since always going to router service
		} else {
			// router service uses both parameters, so send router-service mssage to a client
			dest = "ROUTER_CLIENT";
			routerMessage = arguments[1];
			newMessage = { client: transport.client, clientMessage: routerMessage }; // client property used to router on server
		}

		Logger.system.verbose("FinsembleTransport Outgoing Transport", dest, "NewMessage", newMessage);
		routerServerSocket.emit(dest, newMessage);
	};

	//required function for the parent (i.e. routeClient or routeService)
	this.identifier = function () {
		return "FinsembleTransport";
	};

	Logger.system.log(`FinsembleTransport Transport Initializing for ${source} using ${SOCKET_SERVER_ADDRESS}`);
	console.log(`FinsembleTransport Transport Initializing for ${source} using ${SOCKET_SERVER_ADDRESS}`);

	function connectTimeoutHandler() {
		Logger.system.error(`FinsembleTransport Connection Timeout for ${source}`);
		callback(self);
	}

	// set up for receiving incoming messages
	var routerServerSocket;
	if (SOCKET_SERVER_ADDRESS.indexOf("ws:") !== -1 || SOCKET_SERVER_ADDRESS.indexOf("wss:") !== -1) {
		routerServerSocket = WebSocketClient.connect(SOCKET_SERVER_ADDRESS, { transports: ["websocket"], upgrade: false }); // if websocket address then use ws transport
	} else {
		routerServerSocket = WebSocketClient.connect(SOCKET_SERVER_ADDRESS, {}); // if not ws then http
	}
	var connectTimer = setTimeout(connectTimeoutHandler, 3000); // cleared in setServiceOnline

	routerServerSocket.on("connect", function () {
		clearTimeout(connectTimer);
		Logger.system.log("FinsembleTransport Connected to Server");
		console.log("FinsembleTransport Connected to Server");
		if (source === "RouterService") {
			// if this transport is for router service, use hardcoded socket address ("ROUTER_SERVICE_IN")
			routerServerSocket.on("ROUTER_SERVICE_IN", function (data) {
				finsembleMessageHandler(data);
			});
		} else {
			// for all other clients, the source == client name, so each socket address is based on client name
			routerServerSocket.on(source, function (data) {
				finsembleMessageHandler(data);
			});
		}
		callback(self);
	});
};

/*
 * Implements the FinsembleCloudTransport (a version of FinsembleTransport with server commonly running on remote server).
 *
 * Required Functions (used by transport clients):
 * 		send(event) -- transports the event
 * 		identifier() -- returns transport name/identifier
 *
 * @param {object} params various parms to support transports
 * @param {any} parentMessageHandler callback for incoming event
 * @param {any} source either the client name or "RouterService"
 * @param {any} destination either the client name or "RouterService" (unused in FinsembleCloudTransport)
 */
RouterTransportImplementation.FinsembleCloudTransport = function (params, parentMessageHandler, source, destination, callback) {
	var serverAddress;
	var defaultAddress = ConfigUtils.getDefault(params, "params.transportSettings.FinsembleCloudTransport.serverAddress", params.applicationRoot);
	var FinsembleUUID = params.FinsembleUUID;

	if (defaultAddress.substr(defaultAddress.length - 1) === "/") {
		serverAddress = defaultAddress.substring(0, defaultAddress.length - 1); // truncate and trailing slash because it causes problem with socket.io namespace
	} else {
		serverAddress = defaultAddress;
	}

	const SOCKET_SERVER_ADDRESS = serverAddress + "/router"; // "router" is the socket namespace used on server

	var self = this;

	// receives incoming messages then passes on to parent (what's passed to parent should be same routerMessage received in send()
	function finsembleMessageHandler(routerMessage) {
		var incomingTransportInfo = { "transportID": self.identifier(), "client": routerMessage.clientMessage.header.origin };
		Logger.system.verbose("FinsembleCloudTransport Incoming Transport", incomingTransportInfo, "Message", routerMessage);
		parentMessageHandler(incomingTransportInfo, routerMessage.clientMessage);
	}

	//required function for the parent (i.e. routeClient or routeService)
	this.send = function (transport, routerMessage) {
		var dest;
		var newMessage;

		// decide how to route the message based on whether client or routerservice is sending
		if (arguments.length === 1) {
			// clients use just one parameter, so send client message to RouterService
			dest = "ROUTER_SERVICE";
			routerMessage = arguments[0];
			newMessage = { FinsembleUUID, clientMessage: routerMessage }; // no client property needed to route on server since always going to router service
		} else {
			// router service uses both parameters, so send router-service mssage to a client
			dest = "ROUTER_CLIENT";
			routerMessage = arguments[1];
			newMessage = { FinsembleUUID, client: transport.client, clientMessage: routerMessage }; // client property used to router on server
		}

		Logger.system.verbose("FinsembleCloudTransport Outgoing Transport", dest, "NewMessage", newMessage);
		routerServerSocket.emit(dest, newMessage);
	};

	//required function for the parent (i.e. routeClient or routeService)
	this.identifier = function () {
		return "FinsembleCloudTransport";
	};

	Logger.system.log(`FinsembleCloudTransport Transport Initializing for ${source} using ${SOCKET_SERVER_ADDRESS}`);
	console.log(`FinsembleCloudTransport Transport Initializing for ${source} using ${SOCKET_SERVER_ADDRESS}`);

	function connectTimeoutHandler() {
		Logger.system.error(`FinsembleCloudTransport Connection Timeout for ${source}`);
		callback(self);
	}

	// set up for receiving incoming messages
	var routerServerSocket;
	if (SOCKET_SERVER_ADDRESS.indexOf("ws:") !== -1) {
		routerServerSocket = WebSocketClient.connect(SOCKET_SERVER_ADDRESS, { transports: ["websocket"], upgrade: false }); // if websocket address then use ws transport
	} else {
		routerServerSocket = WebSocketClient.connect(SOCKET_SERVER_ADDRESS, {}); // if not ws then http
	}
	var connectTimer = setTimeout(connectTimeoutHandler, 3000); // cleared in setServiceOnline

	routerServerSocket.on("connect", function () {
		clearTimeout(connectTimer);
		Logger.system.log("FinsembleCloudTransport Connected to Server", FinsembleUUID);
		console.log("FinsembleCloudTransport Connected to Server");
		if (source === "RouterService") {
			// if this transport is for router service, use hardcoded socket address ("ROUTER_SERVICE_IN") along with FinsembleUUID
			Logger.system.debug("Setting Up Socket Connection", "ROUTER_SERVICE_IN" + FinsembleUUID);
			console.log("Setting Up Socket Connection", "ROUTER_SERVICE_IN" + FinsembleUUID);
			routerServerSocket.on("ROUTER_SERVICE_IN" + FinsembleUUID, function (data) {
				finsembleMessageHandler(data);
			});
		} else {
			// for all other clients, the source == client name, so each socket address is based on client name along with FinsembleUUID
			Logger.system.debug("Setting Up Socket Connection", source + FinsembleUUID);
			console.log("SETTING UP Socket CONNECTION", source + FinsembleUUID);
			routerServerSocket.on(source + FinsembleUUID, function (data) {
				finsembleMessageHandler(data);
			});
		}
		callback(self);
	});
};

// add the transports to the available/active list
RouterTransport.addTransport("SharedWorker", RouterTransportImplementation.SharedWorkerTransport);
RouterTransport.addTransport("OpenFinBus", RouterTransportImplementation.OpenFinTransport);
RouterTransport.addTransport("FinsembleTransport", RouterTransportImplementation.FinsembleTransport);

module.exports = RouterTransport;

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\common\\routerTransport.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\common\\routerTransport.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 36 */
/***/ (function(module, exports) {

module.exports = after

function after(count, callback, err_cb) {
    var bail = false
    err_cb = err_cb || noop
    proxy.count = count

    return (count === 0) ? callback() : proxy

    function proxy(err, result) {
        if (proxy.count <= 0) {
            throw new Error('after called too many times')
        }
        --proxy.count

        // after first error, rest are passed to err_cb
        if (err) {
            bail = true
            callback(err)
            // future error callbacks will go to error handler
            callback = err_cb
        } else if (proxy.count === 0 && !bail) {
            callback(null, result)
        }
    }
}

function noop() {}


/***/ }),
/* 37 */
/***/ (function(module, exports) {


/**
 * Expose `Backoff`.
 */

module.exports = Backoff;

/**
 * Initialize backoff timer with `opts`.
 *
 * - `min` initial timeout in milliseconds [100]
 * - `max` max timeout [10000]
 * - `jitter` [0]
 * - `factor` [2]
 *
 * @param {Object} opts
 * @api public
 */

function Backoff(opts) {
  opts = opts || {};
  this.ms = opts.min || 100;
  this.max = opts.max || 10000;
  this.factor = opts.factor || 2;
  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
  this.attempts = 0;
}

/**
 * Return the backoff duration.
 *
 * @return {Number}
 * @api public
 */

Backoff.prototype.duration = function(){
  var ms = this.ms * Math.pow(this.factor, this.attempts++);
  if (this.jitter) {
    var rand =  Math.random();
    var deviation = Math.floor(rand * this.jitter * ms);
    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;
  }
  return Math.min(ms, this.max) | 0;
};

/**
 * Reset the number of attempts.
 *
 * @api public
 */

Backoff.prototype.reset = function(){
  this.attempts = 0;
};

/**
 * Set the minimum duration
 *
 * @api public
 */

Backoff.prototype.setMin = function(min){
  this.ms = min;
};

/**
 * Set the maximum duration
 *
 * @api public
 */

Backoff.prototype.setMax = function(max){
  this.max = max;
};

/**
 * Set the jitter
 *
 * @api public
 */

Backoff.prototype.setJitter = function(jitter){
  this.jitter = jitter;
};



/***/ }),
/* 38 */
/***/ (function(module, exports) {

/*
 * base64-arraybuffer
 * https://github.com/niklasvh/base64-arraybuffer
 *
 * Copyright (c) 2012 Niklas von Hertzen
 * Licensed under the MIT license.
 */
(function(){
  "use strict";

  var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

  // Use a lookup table to find the index.
  var lookup = new Uint8Array(256);
  for (var i = 0; i < chars.length; i++) {
    lookup[chars.charCodeAt(i)] = i;
  }

  exports.encode = function(arraybuffer) {
    var bytes = new Uint8Array(arraybuffer),
    i, len = bytes.length, base64 = "";

    for (i = 0; i < len; i+=3) {
      base64 += chars[bytes[i] >> 2];
      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
      base64 += chars[bytes[i + 2] & 63];
    }

    if ((len % 3) === 2) {
      base64 = base64.substring(0, base64.length - 1) + "=";
    } else if (len % 3 === 1) {
      base64 = base64.substring(0, base64.length - 2) + "==";
    }

    return base64;
  };

  exports.decode =  function(base64) {
    var bufferLength = base64.length * 0.75,
    len = base64.length, i, p = 0,
    encoded1, encoded2, encoded3, encoded4;

    if (base64[base64.length - 1] === "=") {
      bufferLength--;
      if (base64[base64.length - 2] === "=") {
        bufferLength--;
      }
    }

    var arraybuffer = new ArrayBuffer(bufferLength),
    bytes = new Uint8Array(arraybuffer);

    for (i = 0; i < len; i+=4) {
      encoded1 = lookup[base64.charCodeAt(i)];
      encoded2 = lookup[base64.charCodeAt(i+1)];
      encoded3 = lookup[base64.charCodeAt(i+2)];
      encoded4 = lookup[base64.charCodeAt(i+3)];

      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
    }

    return arraybuffer;
  };
})();


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * Create a blob builder even when vendor prefixes exist
 */

var BlobBuilder = global.BlobBuilder
  || global.WebKitBlobBuilder
  || global.MSBlobBuilder
  || global.MozBlobBuilder;

/**
 * Check if Blob constructor is supported
 */

var blobSupported = (function() {
  try {
    var a = new Blob(['hi']);
    return a.size === 2;
  } catch(e) {
    return false;
  }
})();

/**
 * Check if Blob constructor supports ArrayBufferViews
 * Fails in Safari 6, so we need to map to ArrayBuffers there.
 */

var blobSupportsArrayBufferView = blobSupported && (function() {
  try {
    var b = new Blob([new Uint8Array([1,2])]);
    return b.size === 2;
  } catch(e) {
    return false;
  }
})();

/**
 * Check if BlobBuilder is supported
 */

var blobBuilderSupported = BlobBuilder
  && BlobBuilder.prototype.append
  && BlobBuilder.prototype.getBlob;

/**
 * Helper function that maps ArrayBufferViews to ArrayBuffers
 * Used by BlobBuilder constructor and old browsers that didn't
 * support it in the Blob constructor.
 */

function mapArrayBufferViews(ary) {
  for (var i = 0; i < ary.length; i++) {
    var chunk = ary[i];
    if (chunk.buffer instanceof ArrayBuffer) {
      var buf = chunk.buffer;

      // if this is a subarray, make a copy so we only
      // include the subarray region from the underlying buffer
      if (chunk.byteLength !== buf.byteLength) {
        var copy = new Uint8Array(chunk.byteLength);
        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));
        buf = copy.buffer;
      }

      ary[i] = buf;
    }
  }
}

function BlobBuilderConstructor(ary, options) {
  options = options || {};

  var bb = new BlobBuilder();
  mapArrayBufferViews(ary);

  for (var i = 0; i < ary.length; i++) {
    bb.append(ary[i]);
  }

  return (options.type) ? bb.getBlob(options.type) : bb.getBlob();
};

function BlobConstructor(ary, options) {
  mapArrayBufferViews(ary);
  return new Blob(ary, options || {});
};

module.exports = (function() {
  if (blobSupported) {
    return blobSupportsArrayBufferView ? global.Blob : BlobConstructor;
  } else if (blobBuilderSupported) {
    return BlobBuilderConstructor;
  } else {
    return undefined;
  }
})();

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 40 */
/***/ (function(module, exports) {

module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};


/***/ }),
/* 41 */
/***/ (function(module, exports) {


/**
 * Module exports.
 *
 * Logic borrowed from Modernizr:
 *
 *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
 */

try {
  module.exports = typeof XMLHttpRequest !== 'undefined' &&
    'withCredentials' in new XMLHttpRequest();
} catch (err) {
  // if XMLHttp support is disabled in IE then it will throw
  // when trying to create
  module.exports = false;
}


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! JSON v3.3.2 | http://bestiejs.github.io/json3 | Copyright 2012-2014, Kit Cambridge | http://kit.mit-license.org */
;(function () {
  // Detect the `define` function exposed by asynchronous module loaders. The
  // strict `define` check is necessary for compatibility with `r.js`.
  var isLoader = "function" === "function" && __webpack_require__(69);

  // A set of types used to distinguish objects from primitives.
  var objectTypes = {
    "function": true,
    "object": true
  };

  // Detect the `exports` object exposed by CommonJS implementations.
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  // Use the `global` object exposed by Node (including Browserify via
  // `insert-module-globals`), Narwhal, and Ringo as the default context,
  // and the `window` object in browsers. Rhino exports a `global` function
  // instead.
  var root = objectTypes[typeof window] && window || this,
      freeGlobal = freeExports && objectTypes[typeof module] && module && !module.nodeType && typeof global == "object" && global;

  if (freeGlobal && (freeGlobal["global"] === freeGlobal || freeGlobal["window"] === freeGlobal || freeGlobal["self"] === freeGlobal)) {
    root = freeGlobal;
  }

  // Public: Initializes JSON 3 using the given `context` object, attaching the
  // `stringify` and `parse` functions to the specified `exports` object.
  function runInContext(context, exports) {
    context || (context = root["Object"]());
    exports || (exports = root["Object"]());

    // Native constructor aliases.
    var Number = context["Number"] || root["Number"],
        String = context["String"] || root["String"],
        Object = context["Object"] || root["Object"],
        Date = context["Date"] || root["Date"],
        SyntaxError = context["SyntaxError"] || root["SyntaxError"],
        TypeError = context["TypeError"] || root["TypeError"],
        Math = context["Math"] || root["Math"],
        nativeJSON = context["JSON"] || root["JSON"];

    // Delegate to the native `stringify` and `parse` implementations.
    if (typeof nativeJSON == "object" && nativeJSON) {
      exports.stringify = nativeJSON.stringify;
      exports.parse = nativeJSON.parse;
    }

    // Convenience aliases.
    var objectProto = Object.prototype,
        getClass = objectProto.toString,
        isProperty, forEach, undef;

    // Test the `Date#getUTC*` methods. Based on work by @Yaffle.
    var isExtended = new Date(-3509827334573292);
    try {
      // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical
      // results for certain dates in Opera >= 10.53.
      isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&
        // Safari < 2.0.2 stores the internal millisecond time value correctly,
        // but clips the values returned by the date methods to the range of
        // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).
        isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
    } catch (exception) {}

    // Internal: Determines whether the native `JSON.stringify` and `parse`
    // implementations are spec-compliant. Based on work by Ken Snyder.
    function has(name) {
      if (has[name] !== undef) {
        // Return cached feature test result.
        return has[name];
      }
      var isSupported;
      if (name == "bug-string-char-index") {
        // IE <= 7 doesn't support accessing string characters using square
        // bracket notation. IE 8 only supports this for primitives.
        isSupported = "a"[0] != "a";
      } else if (name == "json") {
        // Indicates whether both `JSON.stringify` and `JSON.parse` are
        // supported.
        isSupported = has("json-stringify") && has("json-parse");
      } else {
        var value, serialized = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';
        // Test `JSON.stringify`.
        if (name == "json-stringify") {
          var stringify = exports.stringify, stringifySupported = typeof stringify == "function" && isExtended;
          if (stringifySupported) {
            // A test function object with a custom `toJSON` method.
            (value = function () {
              return 1;
            }).toJSON = value;
            try {
              stringifySupported =
                // Firefox 3.1b1 and b2 serialize string, number, and boolean
                // primitives as object literals.
                stringify(0) === "0" &&
                // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object
                // literals.
                stringify(new Number()) === "0" &&
                stringify(new String()) == '""' &&
                // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or
                // does not define a canonical JSON representation (this applies to
                // objects with `toJSON` properties as well, *unless* they are nested
                // within an object or array).
                stringify(getClass) === undef &&
                // IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and
                // FF 3.1b3 pass this test.
                stringify(undef) === undef &&
                // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,
                // respectively, if the value is omitted entirely.
                stringify() === undef &&
                // FF 3.1b1, 2 throw an error if the given value is not a number,
                // string, array, object, Boolean, or `null` literal. This applies to
                // objects with custom `toJSON` methods as well, unless they are nested
                // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`
                // methods entirely.
                stringify(value) === "1" &&
                stringify([value]) == "[1]" &&
                // Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of
                // `"[null]"`.
                stringify([undef]) == "[null]" &&
                // YUI 3.0.0b1 fails to serialize `null` literals.
                stringify(null) == "null" &&
                // FF 3.1b1, 2 halts serialization if an array contains a function:
                // `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3
                // elides non-JSON values from objects and arrays, unless they
                // define custom `toJSON` methods.
                stringify([undef, getClass, null]) == "[null,null,null]" &&
                // Simple serialization test. FF 3.1b1 uses Unicode escape sequences
                // where character escape codes are expected (e.g., `\b` => `\u0008`).
                stringify({ "a": [value, true, false, null, "\x00\b\n\f\r\t"] }) == serialized &&
                // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.
                stringify(null, value) === "1" &&
                stringify([1, 2], null, 1) == "[\n 1,\n 2\n]" &&
                // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly
                // serialize extended years.
                stringify(new Date(-8.64e15)) == '"-271821-04-20T00:00:00.000Z"' &&
                // The milliseconds are optional in ES 5, but required in 5.1.
                stringify(new Date(8.64e15)) == '"+275760-09-13T00:00:00.000Z"' &&
                // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative
                // four-digit years instead of six-digit years. Credits: @Yaffle.
                stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' &&
                // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond
                // values less than 1000. Credits: @Yaffle.
                stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
            } catch (exception) {
              stringifySupported = false;
            }
          }
          isSupported = stringifySupported;
        }
        // Test `JSON.parse`.
        if (name == "json-parse") {
          var parse = exports.parse;
          if (typeof parse == "function") {
            try {
              // FF 3.1b1, b2 will throw an exception if a bare literal is provided.
              // Conforming implementations should also coerce the initial argument to
              // a string prior to parsing.
              if (parse("0") === 0 && !parse(false)) {
                // Simple parsing test.
                value = parse(serialized);
                var parseSupported = value["a"].length == 5 && value["a"][0] === 1;
                if (parseSupported) {
                  try {
                    // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.
                    parseSupported = !parse('"\t"');
                  } catch (exception) {}
                  if (parseSupported) {
                    try {
                      // FF 4.0 and 4.0.1 allow leading `+` signs and leading
                      // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow
                      // certain octal literals.
                      parseSupported = parse("01") !== 1;
                    } catch (exception) {}
                  }
                  if (parseSupported) {
                    try {
                      // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal
                      // points. These environments, along with FF 3.1b1 and 2,
                      // also allow trailing commas in JSON objects and arrays.
                      parseSupported = parse("1.") !== 1;
                    } catch (exception) {}
                  }
                }
              }
            } catch (exception) {
              parseSupported = false;
            }
          }
          isSupported = parseSupported;
        }
      }
      return has[name] = !!isSupported;
    }

    if (!has("json")) {
      // Common `[[Class]]` name aliases.
      var functionClass = "[object Function]",
          dateClass = "[object Date]",
          numberClass = "[object Number]",
          stringClass = "[object String]",
          arrayClass = "[object Array]",
          booleanClass = "[object Boolean]";

      // Detect incomplete support for accessing string characters by index.
      var charIndexBuggy = has("bug-string-char-index");

      // Define additional utility methods if the `Date` methods are buggy.
      if (!isExtended) {
        var floor = Math.floor;
        // A mapping between the months of the year and the number of days between
        // January 1st and the first of the respective month.
        var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
        // Internal: Calculates the number of days between the Unix epoch and the
        // first day of the given month.
        var getDay = function (year, month) {
          return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
        };
      }

      // Internal: Determines if a property is a direct property of the given
      // object. Delegates to the native `Object#hasOwnProperty` method.
      if (!(isProperty = objectProto.hasOwnProperty)) {
        isProperty = function (property) {
          var members = {}, constructor;
          if ((members.__proto__ = null, members.__proto__ = {
            // The *proto* property cannot be set multiple times in recent
            // versions of Firefox and SeaMonkey.
            "toString": 1
          }, members).toString != getClass) {
            // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but
            // supports the mutable *proto* property.
            isProperty = function (property) {
              // Capture and break the object's prototype chain (see section 8.6.2
              // of the ES 5.1 spec). The parenthesized expression prevents an
              // unsafe transformation by the Closure Compiler.
              var original = this.__proto__, result = property in (this.__proto__ = null, this);
              // Restore the original prototype chain.
              this.__proto__ = original;
              return result;
            };
          } else {
            // Capture a reference to the top-level `Object` constructor.
            constructor = members.constructor;
            // Use the `constructor` property to simulate `Object#hasOwnProperty` in
            // other environments.
            isProperty = function (property) {
              var parent = (this.constructor || constructor).prototype;
              return property in this && !(property in parent && this[property] === parent[property]);
            };
          }
          members = null;
          return isProperty.call(this, property);
        };
      }

      // Internal: Normalizes the `for...in` iteration algorithm across
      // environments. Each enumerated key is yielded to a `callback` function.
      forEach = function (object, callback) {
        var size = 0, Properties, members, property;

        // Tests for bugs in the current environment's `for...in` algorithm. The
        // `valueOf` property inherits the non-enumerable flag from
        // `Object.prototype` in older versions of IE, Netscape, and Mozilla.
        (Properties = function () {
          this.valueOf = 0;
        }).prototype.valueOf = 0;

        // Iterate over a new instance of the `Properties` class.
        members = new Properties();
        for (property in members) {
          // Ignore all properties inherited from `Object.prototype`.
          if (isProperty.call(members, property)) {
            size++;
          }
        }
        Properties = members = null;

        // Normalize the iteration algorithm.
        if (!size) {
          // A list of non-enumerable properties inherited from `Object.prototype`.
          members = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"];
          // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable
          // properties.
          forEach = function (object, callback) {
            var isFunction = getClass.call(object) == functionClass, property, length;
            var hasProperty = !isFunction && typeof object.constructor != "function" && objectTypes[typeof object.hasOwnProperty] && object.hasOwnProperty || isProperty;
            for (property in object) {
              // Gecko <= 1.0 enumerates the `prototype` property of functions under
              // certain conditions; IE does not.
              if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
                callback(property);
              }
            }
            // Manually invoke the callback for each non-enumerable property.
            for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));
          };
        } else if (size == 2) {
          // Safari <= 2.0.4 enumerates shadowed properties twice.
          forEach = function (object, callback) {
            // Create a set of iterated properties.
            var members = {}, isFunction = getClass.call(object) == functionClass, property;
            for (property in object) {
              // Store each property name to prevent double enumeration. The
              // `prototype` property of functions is not enumerated due to cross-
              // environment inconsistencies.
              if (!(isFunction && property == "prototype") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {
                callback(property);
              }
            }
          };
        } else {
          // No bugs detected; use the standard `for...in` algorithm.
          forEach = function (object, callback) {
            var isFunction = getClass.call(object) == functionClass, property, isConstructor;
            for (property in object) {
              if (!(isFunction && property == "prototype") && isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
                callback(property);
              }
            }
            // Manually invoke the callback for the `constructor` property due to
            // cross-environment inconsistencies.
            if (isConstructor || isProperty.call(object, (property = "constructor"))) {
              callback(property);
            }
          };
        }
        return forEach(object, callback);
      };

      // Public: Serializes a JavaScript `value` as a JSON string. The optional
      // `filter` argument may specify either a function that alters how object and
      // array members are serialized, or an array of strings and numbers that
      // indicates which properties should be serialized. The optional `width`
      // argument may be either a string or number that specifies the indentation
      // level of the output.
      if (!has("json-stringify")) {
        // Internal: A map of control characters and their escaped equivalents.
        var Escapes = {
          92: "\\\\",
          34: '\\"',
          8: "\\b",
          12: "\\f",
          10: "\\n",
          13: "\\r",
          9: "\\t"
        };

        // Internal: Converts `value` into a zero-padded string such that its
        // length is at least equal to `width`. The `width` must be <= 6.
        var leadingZeroes = "000000";
        var toPaddedString = function (width, value) {
          // The `|| 0` expression is necessary to work around a bug in
          // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
          return (leadingZeroes + (value || 0)).slice(-width);
        };

        // Internal: Double-quotes a string `value`, replacing all ASCII control
        // characters (characters with code unit values between 0 and 31) with
        // their escaped equivalents. This is an implementation of the
        // `Quote(value)` operation defined in ES 5.1 section 15.12.3.
        var unicodePrefix = "\\u00";
        var quote = function (value) {
          var result = '"', index = 0, length = value.length, useCharIndex = !charIndexBuggy || length > 10;
          var symbols = useCharIndex && (charIndexBuggy ? value.split("") : value);
          for (; index < length; index++) {
            var charCode = value.charCodeAt(index);
            // If the character is a control character, append its Unicode or
            // shorthand escape sequence; otherwise, append the character as-is.
            switch (charCode) {
              case 8: case 9: case 10: case 12: case 13: case 34: case 92:
                result += Escapes[charCode];
                break;
              default:
                if (charCode < 32) {
                  result += unicodePrefix + toPaddedString(2, charCode.toString(16));
                  break;
                }
                result += useCharIndex ? symbols[index] : value.charAt(index);
            }
          }
          return result + '"';
        };

        // Internal: Recursively serializes an object. Implements the
        // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.
        var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {
          var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;
          try {
            // Necessary for host object support.
            value = object[property];
          } catch (exception) {}
          if (typeof value == "object" && value) {
            className = getClass.call(value);
            if (className == dateClass && !isProperty.call(value, "toJSON")) {
              if (value > -1 / 0 && value < 1 / 0) {
                // Dates are serialized according to the `Date#toJSON` method
                // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
                // for the ISO 8601 date time string format.
                if (getDay) {
                  // Manually compute the year, month, date, hours, minutes,
                  // seconds, and milliseconds if the `getUTC*` methods are
                  // buggy. Adapted from @Yaffle's `date-shim` project.
                  date = floor(value / 864e5);
                  for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);
                  for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);
                  date = 1 + date - getDay(year, month);
                  // The `time` value specifies the time within the day (see ES
                  // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
                  // to compute `A modulo B`, as the `%` operator does not
                  // correspond to the `modulo` operation for negative numbers.
                  time = (value % 864e5 + 864e5) % 864e5;
                  // The hours, minutes, seconds, and milliseconds are obtained by
                  // decomposing the time within the day. See section 15.9.1.10.
                  hours = floor(time / 36e5) % 24;
                  minutes = floor(time / 6e4) % 60;
                  seconds = floor(time / 1e3) % 60;
                  milliseconds = time % 1e3;
                } else {
                  year = value.getUTCFullYear();
                  month = value.getUTCMonth();
                  date = value.getUTCDate();
                  hours = value.getUTCHours();
                  minutes = value.getUTCMinutes();
                  seconds = value.getUTCSeconds();
                  milliseconds = value.getUTCMilliseconds();
                }
                // Serialize extended years correctly.
                value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) +
                  "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) +
                  // Months, dates, hours, minutes, and seconds should have two
                  // digits; milliseconds should have three.
                  "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) +
                  // Milliseconds are optional in ES 5.0, but required in 5.1.
                  "." + toPaddedString(3, milliseconds) + "Z";
              } else {
                value = null;
              }
            } else if (typeof value.toJSON == "function" && ((className != numberClass && className != stringClass && className != arrayClass) || isProperty.call(value, "toJSON"))) {
              // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the
              // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3
              // ignores all `toJSON` methods on these objects unless they are
              // defined directly on an instance.
              value = value.toJSON(property);
            }
          }
          if (callback) {
            // If a replacement function was provided, call it to obtain the value
            // for serialization.
            value = callback.call(object, property, value);
          }
          if (value === null) {
            return "null";
          }
          className = getClass.call(value);
          if (className == booleanClass) {
            // Booleans are represented literally.
            return "" + value;
          } else if (className == numberClass) {
            // JSON numbers must be finite. `Infinity` and `NaN` are serialized as
            // `"null"`.
            return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
          } else if (className == stringClass) {
            // Strings are double-quoted and escaped.
            return quote("" + value);
          }
          // Recursively serialize objects and arrays.
          if (typeof value == "object") {
            // Check for cyclic structures. This is a linear search; performance
            // is inversely proportional to the number of unique nested objects.
            for (length = stack.length; length--;) {
              if (stack[length] === value) {
                // Cyclic structures cannot be serialized by `JSON.stringify`.
                throw TypeError();
              }
            }
            // Add the object to the stack of traversed objects.
            stack.push(value);
            results = [];
            // Save the current indentation level and indent one additional level.
            prefix = indentation;
            indentation += whitespace;
            if (className == arrayClass) {
              // Recursively serialize array elements.
              for (index = 0, length = value.length; index < length; index++) {
                element = serialize(index, value, callback, properties, whitespace, indentation, stack);
                results.push(element === undef ? "null" : element);
              }
              result = results.length ? (whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : ("[" + results.join(",") + "]")) : "[]";
            } else {
              // Recursively serialize object members. Members are selected from
              // either a user-specified list of property names, or the object
              // itself.
              forEach(properties || value, function (property) {
                var element = serialize(property, value, callback, properties, whitespace, indentation, stack);
                if (element !== undef) {
                  // According to ES 5.1 section 15.12.3: "If `gap` {whitespace}
                  // is not the empty string, let `member` {quote(property) + ":"}
                  // be the concatenation of `member` and the `space` character."
                  // The "`space` character" refers to the literal space
                  // character, not the `space` {width} argument provided to
                  // `JSON.stringify`.
                  results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
                }
              });
              result = results.length ? (whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : ("{" + results.join(",") + "}")) : "{}";
            }
            // Remove the object from the traversed object stack.
            stack.pop();
            return result;
          }
        };

        // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.
        exports.stringify = function (source, filter, width) {
          var whitespace, callback, properties, className;
          if (objectTypes[typeof filter] && filter) {
            if ((className = getClass.call(filter)) == functionClass) {
              callback = filter;
            } else if (className == arrayClass) {
              // Convert the property names array into a makeshift set.
              properties = {};
              for (var index = 0, length = filter.length, value; index < length; value = filter[index++], ((className = getClass.call(value)), className == stringClass || className == numberClass) && (properties[value] = 1));
            }
          }
          if (width) {
            if ((className = getClass.call(width)) == numberClass) {
              // Convert the `width` to an integer and create a string containing
              // `width` number of space characters.
              if ((width -= width % 1) > 0) {
                for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ");
              }
            } else if (className == stringClass) {
              whitespace = width.length <= 10 ? width : width.slice(0, 10);
            }
          }
          // Opera <= 7.54u2 discards the values associated with empty string keys
          // (`""`) only if they are used directly within an object member list
          // (e.g., `!("" in { "": 1})`).
          return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
        };
      }

      // Public: Parses a JSON source string.
      if (!has("json-parse")) {
        var fromCharCode = String.fromCharCode;

        // Internal: A map of escaped control characters and their unescaped
        // equivalents.
        var Unescapes = {
          92: "\\",
          34: '"',
          47: "/",
          98: "\b",
          116: "\t",
          110: "\n",
          102: "\f",
          114: "\r"
        };

        // Internal: Stores the parser state.
        var Index, Source;

        // Internal: Resets the parser state and throws a `SyntaxError`.
        var abort = function () {
          Index = Source = null;
          throw SyntaxError();
        };

        // Internal: Returns the next token, or `"$"` if the parser has reached
        // the end of the source string. A token may be a string, number, `null`
        // literal, or Boolean literal.
        var lex = function () {
          var source = Source, length = source.length, value, begin, position, isSigned, charCode;
          while (Index < length) {
            charCode = source.charCodeAt(Index);
            switch (charCode) {
              case 9: case 10: case 13: case 32:
                // Skip whitespace tokens, including tabs, carriage returns, line
                // feeds, and space characters.
                Index++;
                break;
              case 123: case 125: case 91: case 93: case 58: case 44:
                // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at
                // the current position.
                value = charIndexBuggy ? source.charAt(Index) : source[Index];
                Index++;
                return value;
              case 34:
                // `"` delimits a JSON string; advance to the next character and
                // begin parsing the string. String tokens are prefixed with the
                // sentinel `@` character to distinguish them from punctuators and
                // end-of-string tokens.
                for (value = "@", Index++; Index < length;) {
                  charCode = source.charCodeAt(Index);
                  if (charCode < 32) {
                    // Unescaped ASCII control characters (those with a code unit
                    // less than the space character) are not permitted.
                    abort();
                  } else if (charCode == 92) {
                    // A reverse solidus (`\`) marks the beginning of an escaped
                    // control character (including `"`, `\`, and `/`) or Unicode
                    // escape sequence.
                    charCode = source.charCodeAt(++Index);
                    switch (charCode) {
                      case 92: case 34: case 47: case 98: case 116: case 110: case 102: case 114:
                        // Revive escaped control characters.
                        value += Unescapes[charCode];
                        Index++;
                        break;
                      case 117:
                        // `\u` marks the beginning of a Unicode escape sequence.
                        // Advance to the first character and validate the
                        // four-digit code point.
                        begin = ++Index;
                        for (position = Index + 4; Index < position; Index++) {
                          charCode = source.charCodeAt(Index);
                          // A valid sequence comprises four hexdigits (case-
                          // insensitive) that form a single hexadecimal value.
                          if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
                            // Invalid Unicode escape sequence.
                            abort();
                          }
                        }
                        // Revive the escaped character.
                        value += fromCharCode("0x" + source.slice(begin, Index));
                        break;
                      default:
                        // Invalid escape sequence.
                        abort();
                    }
                  } else {
                    if (charCode == 34) {
                      // An unescaped double-quote character marks the end of the
                      // string.
                      break;
                    }
                    charCode = source.charCodeAt(Index);
                    begin = Index;
                    // Optimize for the common case where a string is valid.
                    while (charCode >= 32 && charCode != 92 && charCode != 34) {
                      charCode = source.charCodeAt(++Index);
                    }
                    // Append the string as-is.
                    value += source.slice(begin, Index);
                  }
                }
                if (source.charCodeAt(Index) == 34) {
                  // Advance to the next character and return the revived string.
                  Index++;
                  return value;
                }
                // Unterminated string.
                abort();
              default:
                // Parse numbers and literals.
                begin = Index;
                // Advance past the negative sign, if one is specified.
                if (charCode == 45) {
                  isSigned = true;
                  charCode = source.charCodeAt(++Index);
                }
                // Parse an integer or floating-point value.
                if (charCode >= 48 && charCode <= 57) {
                  // Leading zeroes are interpreted as octal literals.
                  if (charCode == 48 && ((charCode = source.charCodeAt(Index + 1)), charCode >= 48 && charCode <= 57)) {
                    // Illegal octal literal.
                    abort();
                  }
                  isSigned = false;
                  // Parse the integer component.
                  for (; Index < length && ((charCode = source.charCodeAt(Index)), charCode >= 48 && charCode <= 57); Index++);
                  // Floats cannot contain a leading decimal point; however, this
                  // case is already accounted for by the parser.
                  if (source.charCodeAt(Index) == 46) {
                    position = ++Index;
                    // Parse the decimal component.
                    for (; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
                    if (position == Index) {
                      // Illegal trailing decimal.
                      abort();
                    }
                    Index = position;
                  }
                  // Parse exponents. The `e` denoting the exponent is
                  // case-insensitive.
                  charCode = source.charCodeAt(Index);
                  if (charCode == 101 || charCode == 69) {
                    charCode = source.charCodeAt(++Index);
                    // Skip past the sign following the exponent, if one is
                    // specified.
                    if (charCode == 43 || charCode == 45) {
                      Index++;
                    }
                    // Parse the exponential component.
                    for (position = Index; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
                    if (position == Index) {
                      // Illegal empty exponent.
                      abort();
                    }
                    Index = position;
                  }
                  // Coerce the parsed value to a JavaScript number.
                  return +source.slice(begin, Index);
                }
                // A negative sign may only precede numbers.
                if (isSigned) {
                  abort();
                }
                // `true`, `false`, and `null` literals.
                if (source.slice(Index, Index + 4) == "true") {
                  Index += 4;
                  return true;
                } else if (source.slice(Index, Index + 5) == "false") {
                  Index += 5;
                  return false;
                } else if (source.slice(Index, Index + 4) == "null") {
                  Index += 4;
                  return null;
                }
                // Unrecognized token.
                abort();
            }
          }
          // Return the sentinel `$` character if the parser has reached the end
          // of the source string.
          return "$";
        };

        // Internal: Parses a JSON `value` token.
        var get = function (value) {
          var results, hasMembers;
          if (value == "$") {
            // Unexpected end of input.
            abort();
          }
          if (typeof value == "string") {
            if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
              // Remove the sentinel `@` character.
              return value.slice(1);
            }
            // Parse object and array literals.
            if (value == "[") {
              // Parses a JSON array, returning a new JavaScript array.
              results = [];
              for (;; hasMembers || (hasMembers = true)) {
                value = lex();
                // A closing square bracket marks the end of the array literal.
                if (value == "]") {
                  break;
                }
                // If the array literal contains elements, the current token
                // should be a comma separating the previous element from the
                // next.
                if (hasMembers) {
                  if (value == ",") {
                    value = lex();
                    if (value == "]") {
                      // Unexpected trailing `,` in array literal.
                      abort();
                    }
                  } else {
                    // A `,` must separate each array element.
                    abort();
                  }
                }
                // Elisions and leading commas are not permitted.
                if (value == ",") {
                  abort();
                }
                results.push(get(value));
              }
              return results;
            } else if (value == "{") {
              // Parses a JSON object, returning a new JavaScript object.
              results = {};
              for (;; hasMembers || (hasMembers = true)) {
                value = lex();
                // A closing curly brace marks the end of the object literal.
                if (value == "}") {
                  break;
                }
                // If the object literal contains members, the current token
                // should be a comma separator.
                if (hasMembers) {
                  if (value == ",") {
                    value = lex();
                    if (value == "}") {
                      // Unexpected trailing `,` in object literal.
                      abort();
                    }
                  } else {
                    // A `,` must separate each object member.
                    abort();
                  }
                }
                // Leading commas are not permitted, object property names must be
                // double-quoted strings, and a `:` must separate each property
                // name and value.
                if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
                  abort();
                }
                results[value.slice(1)] = get(lex());
              }
              return results;
            }
            // Unexpected token encountered.
            abort();
          }
          return value;
        };

        // Internal: Updates a traversed object member.
        var update = function (source, property, callback) {
          var element = walk(source, property, callback);
          if (element === undef) {
            delete source[property];
          } else {
            source[property] = element;
          }
        };

        // Internal: Recursively traverses a parsed JSON object, invoking the
        // `callback` function for each value. This is an implementation of the
        // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.
        var walk = function (source, property, callback) {
          var value = source[property], length;
          if (typeof value == "object" && value) {
            // `forEach` can't be used to traverse an array in Opera <= 8.54
            // because its `Object#hasOwnProperty` implementation returns `false`
            // for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).
            if (getClass.call(value) == arrayClass) {
              for (length = value.length; length--;) {
                update(value, length, callback);
              }
            } else {
              forEach(value, function (property) {
                update(value, property, callback);
              });
            }
          }
          return callback.call(source, property, value);
        };

        // Public: `JSON.parse`. See ES 5.1 section 15.12.2.
        exports.parse = function (source, callback) {
          var result, value;
          Index = 0;
          Source = "" + source;
          result = get(lex());
          // If a JSON string contains multiple tokens, it is invalid.
          if (lex() != "$") {
            abort();
          }
          // Reset the parser state.
          Index = Source = null;
          return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
        };
      }
    }

    exports["runInContext"] = runInContext;
    return exports;
  }

  if (freeExports && !isLoader) {
    // Export for CommonJS environments.
    runInContext(root, freeExports);
  } else {
    // Export for web browsers and JavaScript engines.
    var nativeJSON = root.JSON,
        previousJSON = root["JSON3"],
        isRestored = false;

    var JSON3 = runInContext(root, (root["JSON3"] = {
      // Public: Restores the original value of the global `JSON` object and
      // returns a reference to the `JSON3` object.
      "noConflict": function () {
        if (!isRestored) {
          isRestored = true;
          root.JSON = nativeJSON;
          root["JSON3"] = previousJSON;
          nativeJSON = previousJSON = null;
        }
        return JSON3;
      }
    }));

    root.JSON = {
      "parse": JSON3.parse,
      "stringify": JSON3.stringify
    };
  }

  // Export for asynchronous module loaders.
  if (isLoader) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
      return JSON3;
    }.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
}).call(this);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module), __webpack_require__(1)))

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now = function() {
  return root.Date.now();
};

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
function debounce(func, wait, options) {
  var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber(wait) || 0;
  if (isObject(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    var args = lastArgs,
        thisArg = lastThis;

    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time;
    // Start the timer for the trailing edge.
    timerId = setTimeout(timerExpired, wait);
    // Invoke the leading edge.
    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        result = wait - timeSinceLastCall;

    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
  }

  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime;

    // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.
    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
  }

  function timerExpired() {
    var time = now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    // Restart the timer.
    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined;

    // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge(now());
  }

  function debounced() {
    var time = now(),
        isInvoking = shouldInvoke(time);

    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        // Handle invocations in a tight loop.
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

/**
 * Creates a throttled function that only invokes `func` at most once per
 * every `wait` milliseconds. The throttled function comes with a `cancel`
 * method to cancel delayed `func` invocations and a `flush` method to
 * immediately invoke them. Provide `options` to indicate whether `func`
 * should be invoked on the leading and/or trailing edge of the `wait`
 * timeout. The `func` is invoked with the last arguments provided to the
 * throttled function. Subsequent calls to the throttled function return the
 * result of the last `func` invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the throttled function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.throttle` and `_.debounce`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to throttle.
 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=true]
 *  Specify invoking on the leading edge of the timeout.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new throttled function.
 * @example
 *
 * // Avoid excessively updating the position while scrolling.
 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
 *
 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
 * jQuery(element).on('click', throttled);
 *
 * // Cancel the trailing throttled invocation.
 * jQuery(window).on('popstate', throttled.cancel);
 */
function throttle(func, wait, options) {
  var leading = true,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  if (isObject(options)) {
    leading = 'leading' in options ? !!options.leading : leading;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }
  return debounce(func, wait, {
    'leading': leading,
    'maxWait': wait,
    'trailing': trailing
  });
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString.call(value) == symbolTag);
}

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

module.exports = throttle;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * JSON parse.
 *
 * @see Based on jQuery#parseJSON (MIT) and JSON2
 * @api private
 */

var rvalidchars = /^[\],:{}\s]*$/;
var rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;
var rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
var rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g;
var rtrimLeft = /^\s+/;
var rtrimRight = /\s+$/;

module.exports = function parsejson(data) {
  if ('string' != typeof data || !data) {
    return null;
  }

  data = data.replace(rtrimLeft, '').replace(rtrimRight, '');

  // Attempt to parse using the native JSON parser first
  if (global.JSON && JSON.parse) {
    return JSON.parse(data);
  }

  if (rvalidchars.test(data.replace(rvalidescape, '@')
      .replace(rvalidtokens, ']')
      .replace(rvalidbraces, ''))) {
    return (new Function('return ' + data))();
  }
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/*!
* Copyright 2017 by ChartIQ, Inc.
* All rights reserved.
*/



var RouterTransport = __webpack_require__(35);
var Utils = __webpack_require__(6);
var ConfigUtil = __webpack_require__(13);
var Validate = __webpack_require__(7); // Finsemble args validator
var UserNotification = __webpack_require__(34);
var queue = []; // should never be used, but message sent before router ready will be queue
var mockLogger = Utils.mockLogger;
var Logger = __webpack_require__(2);

// Use global data for these objects in case multiple clients running in same window (a side effect of injection and perhaps other edge conditions).
window.FSBLData = window.FSBLData || {};
window.FSBLData.clientIDCounter = window.FSBLData.clientIDCounter || 1000;
window.FSBLData.RouterClients = window.FSBLData.RouterClients || {};

/**
 * @introduction
 *
 * <h2>Router Client</h2>
 *
 * The Router Client sends and receives event messages between Finsemble components and services. See the <a href=tutorial-usingTheEventRouter.html>Router tutorial</a> for an overview of the Router's functionality.
 *
 * Router callbacks for incoming messages are **always** in the form `callback(error, event)`. If `error` is null, then the incoming data is always in `event.data`. If `error` is set, it contains a diagnostic object and message. On error, the `event` parameter is not undefined.
 *
 *
 * @constructor
 * @hideConstructor true
 * @publishedName RouterClient
 * @param {string} clientName router base client name for human readable messages (window name is concatenated to baseClientName)
 * @param {string=} transportName router transport name, currently either "SharedWorker" or "OpenFinBus" (usually this is autoconfigured internally but can be selected for testing or special configurations)
 */
// uncomment for optimization.
// console.time("FinMainStartup");
var RouterClientConstructor = function (params) {
	Validate.args(params, "object") && Validate.args2("params.clientName", params.clientName, "string", "params.transportName", params.transportName, "string=");
	// console.timeStamp("Router");
	// console.profile("Router");

	///////////////////////////
	// Private Data
	///////////////////////////
	var baseClientName = params.clientName;
	var transportName = params.transportName;
	var handshakeHandler;
	var timeCalibrationHandler;
	var mapListeners = {};
	var mapResponders = {};
	var mapPubSubResponders = {};
	var mapPubSubResponderState = {};
	var mapPubSubResponderRegEx = {};
	var pubsubListOfSubscribers = {};
	var mapSubscribersID = {};
	var mapSubscribersTopic = {};
	var mapQueryResponses = {};
	var mapQueryResponseTimeOut = {};
	var clientName;
	var transport = false;
	var isRouterReady = false;
	var parentReadyCallbackQueue = []; // must be queue because may be multiple waiters
	var self = this;
	this.startupTime = 0;
	/////////////////////////////////////////////////////////////////////
	// Private Message Contructors for Communicating with RouterService
	/////////////////////////////////////////////////////////////////////

	function InitialHandshakeMessage() {
		this.header = {
			"origin": clientName,
			"type": "initialHandshake"
		};
	}
	function TimeCalibrationHandshakeMessage(clientBaseTime, serviceBaseTime) {
		this.header = {
			"origin": clientName,
			"type": "timeCalibration"
		};
		this.clientBaseTime = clientBaseTime;
		this.serviceBaseTime = serviceBaseTime;
	}
	function AddListenerMessage(channel) {
		this.header = {
			"origin": clientName,
			"type": "addListener",
			"channel": channel
		};
	}
	function TransmitMessage(toChannel, data) {
		this.header = {
			"origin": clientName,
			"type": "transmit",
			"channel": toChannel
		};
		this.data = data;
	}
	function RemoveListenerMessage(channel) {
		this.header = {
			"origin": clientName,
			"type": "removeListener",
			"channel": channel
		};
	}
	function addResponderMessage(channel) {
		this.header = {
			"origin": clientName,
			"type": "addResponder",
			"channel": channel
		};
	}
	function QueryMessage(queryID, channel, data) {
		this.header = {
			"origin": clientName,
			"type": "query",
			"queryID": queryID,
			"channel": channel
		};
		this.data = data;
	}
	function QueryResponseMessage(queryID, error, data) {
		this.header = {
			"origin": clientName,
			"type": "queryResponse",
			"queryID": queryID,
			"error": error
		};
		this.data = data;
	}
	function RemoveResponderMessage(channel) {
		this.header = {
			"origin": clientName,
			"type": "removeResponder",
			"channel": channel
		};
	}
	function SubscribeMessage(subscribeID, topic) {
		this.header = {
			"origin": clientName,
			"type": "subscribe",
			"subscribeID": subscribeID,
			"topic": topic
		};
	}
	function UnsubscribeMessage(subscribeID, topic) {
		this.header = {
			"origin": clientName,
			"type": "unsubscribe",
			"subscribeID": subscribeID,
			"topic": topic
		};
	}
	function PublishMessage(topic, data) {
		this.header = {
			"origin": clientName,
			"type": "publish",
			"topic": topic
		};
		this.data = data;
	}
	function NotifyMessage(subscribeID, topic, error, data) {
		this.header = {
			"origin": clientName,
			"type": "notify",
			"subscribeID": subscribeID,
			"topic": topic,
			"error": error
		};
		this.data = data;
	}
	function AddPubSubResponderMessage(topic) {
		this.header = {
			"origin": clientName,
			"type": "addPubSubResponder",
			"topic": topic
		};
	}
	function RemovePubSubResponderMessage(topic) {
		this.header = {
			"origin": clientName,
			"type": "removePubSubResponder",
			"topic": topic
		};
	}
	function JoinGroupMessage(group) {
		this.header = {
			"origin": clientName,
			"type": "joinGroup",
			"group": group
		};
	}
	function LeaveGroupMessage(group) {
		this.header = {
			"origin": clientName,
			"type": "leaveGroup",
			"group": group
		};
	}
	function GroupTransmitMessage(group, toChannel, message, data) {
		this.header = {
			"origin": clientName,
			"type": "groupTransmit",
			"group": group,
			"channel": toChannel
		};
		this.data = data;
	}

	//////////////////////
	// Private Functions
	//////////////////////

	// router client is being terminated so cleanup
	function destructor(event) {
		Logger.system.info("WINDOW LIFECYCLE:Shutdown:RouterClient:Shutting down.");
		self.disconnectAll(); // this will let the router know the client is terminating
	}

	// invoked when router init is complete
	function onReadyCallBack() {
		self.startupTime = performance.now() - self.startupTime;
		Logger.system.debug("WINDOW LIFECYCLE:STARTUP:RouterClient Ready");
		isRouterReady = true;
		// console.profileEnd("Router");
		// invoke all the parent callbacks waiting for router to be ready
		while (parentReadyCallbackQueue.length > 0) {
			Logger.system.debug("WINDOW LIFECYCLE:STARTUP:RouterClient parentReady invoked");
			var nextParentCallback = parentReadyCallbackQueue.shift();
			nextParentCallback();
		}
	}

	// called once on router-client creation
	function constructor(clientName, transportName) {

		Logger.system.debug("WINDOW LIFECYCLE:STARTUP:RouterClient Constructor:Name:", clientName);
		var callbackCounter = 0;
		function processManifest(manifest) {
			Logger.system.info("WINDOW LIFECYCLE:STARTUP:RouterClient:processManifest");
			//If manifest is a string, then there was an error getting the manifest because in a seperate application
			if (!manifest || typeof manifest === "string") {
				Logger.system.error("WINDOW LIFECYCLE:STARTUP:RouterClient:processManifest failed -- fatal error", manifest);
			} else {
				asyncConnectToEventRouter(manifest, clientName, transportName, onReadyCallBack); /**** establish connection to router service ****/
			}
		}
		//This is the only place we need to wait for desktop.main
		fin.desktop.main(function () {
			// wait for openfin to be ready
			var finWindow = fin.desktop.Window.getCurrent();
			Logger.system.debug(`WINDOW LIFECYCLE:STARTUP: fin.main invoked in ${finWindow.name}`);
			window.console.debug(`WINDOW LIFECYCLE:STARTUP: fin.main invoked in ${finWindow.name}`);
			self.startupTime = performance.now();
			// uncomment for optimization.
			// console.timeEnd("FinMainStartup");
			if (callbackCounter++ === 0) {
				// this check should  not be needed; patch for OpenFin bug which invokes callback twice
				// catch "window closing" event so can cleanup
				//got rid of onClose destructors because it's handled inside of the baseService and inside of FSBL. if we disconnect all before other close handlers complete, we could end up with a hanging window.
				finWindow.getOptions(opts => {
					// now the manifest data is available in custom data for all windows except the service manager window (i.e. the first window)
					if (opts.customData && opts.customData.manifest) {
						Logger.system.debug("Router Init using custom data");
						processManifest(opts.customData.manifest);
					} else {
						ConfigUtil.getExpandedRawManifest(function (manifest) {
							Logger.system.debug("Router Init using getExpandedRawManifest");
							if (window.FinsembleUUID) {
								manifest.finsemble.FinsembleUUID = window.FinsembleUUID; // every window except serviceManager has FinsembleUUID -- this case covers the service manager,
							}
							processManifest(manifest);
						}, function (err) {
							Logger.system.error("WINDOW LIFECYCLE:STARTUP:RouterClient:manifest error", err);
						});
					}
				}, function (err) {
					Logger.system.error("WINDOW LIFECYCLE:STARTUP:finWindow.getOptions error", err);
				});
			}
		});
	}

	// connects to event-router service. will retry various ways if needed
	function asyncConnectToEventRouter(manifest, clientName, transportName, onReadyCallBack) {
		var transportNotSpecified = typeof transportName === "undefined";
		var myTimer;
		var myRetryCounter;
		var isFinished = false;
		var handshakeFailedCount = 0;
		var finConfig = manifest.finsemble;

		var routerParams = {
			FinsembleUUID: finConfig.FinsembleUUID,
			applicationRoot: finConfig.applicationRoot,
			routerDomainRoot: finConfig.moduleRoot,
			forceWindowTransport: ConfigUtil.getDefault(finConfig, "finConfig.router.forceWindowTransport", {}),
			sameDomainTransport: ConfigUtil.getDefault(finConfig, "finConfig.router.sameDomainTransport", "SharedWorker"),
			crossDomainTransport: ConfigUtil.getDefault(finConfig, "finConfig.router.crossDomainTransport", "OpenFinBus"),
			transportSettings: ConfigUtil.getDefault(finConfig, "finConfig.router.transportSettings", {})
		};

		function getClientTransport() {
			Logger.system.debug("WINDOW LIFECYCLE:STARTUP:RouterClient:getClientTransport", "ROUTER PARAMS:", routerParams);

			if (transportNotSpecified) {
				transport = RouterTransport.getRecommendedTransport(routerParams, incomingMessageHandler, clientName, "RouterService").then(transportReady).catch(errHandler);
			} else {
				// tranport specified...typically only for regression testing
				transport = RouterTransport.getTransport(routerParams, transportName, incomingMessageHandler, clientName, "RouterService").then(transportReady).catch(errHandler);
			}
		}

		function transportReady(transportObj) {
			myRetryCounter = 0;
			Logger.system.debug("WINDOW LIFECYCLE:STARTUP:RouterClient:transport ready", "TRANSPORT OBJECT", transportObj);
			transport = transportObj;
			handshakeHandler = finished; // set function to receive handshake response
			sendHandshake();
			myTimer = setInterval(sendHandshake, 100); // start time to retry if response not recieved back from router service
		}

		function handshakeFailedHandler() {
			clearInterval(myTimer);
			handshakeFailedCount++;

			if (handshakeFailedCount <= 3) {
				Logger.system.error("WINDOW LIFECYCLE:STARTUP:RouterClient: failure to connect to router service. Retrying...", handshakeFailedCount, routerParams);
				getClientTransport();
			} else {
				let failureMessage = `Router ${transport.identifier()} failure for window ${window.name} after multiple retries.`;
				Logger.system.error(failureMessage, routerParams);
				let notificationURL = ConfigUtil.getDefault(finConfig, "finConfig.notificationURL", finConfig.moduleRoot + "/components/system/notification/notification.html");
				UserNotification.alert("dev", "ONCE-SINCE-STARTUP", "FSBL-Internal-Transport-Failure", failureMessage, { url: notificationURL });
			}
		}

		function sendHandshake() {
			Logger.system.debug("WINDOW LIFECYCLE:STARTUP:RouterClient: sendHandshake", myRetryCounter);
			sendToRouterService(new InitialHandshakeMessage());
			if (myRetryCounter++ > 20) {
				handshakeFailedHandler();
			}
		}

		function finished() {
			if (!isFinished) {
				// ensure only invoked once
				Logger.system.debug("WINDOW LIFECYCLE:STARTUP:RouterClient connected: Starting " + clientName + " with transport " + transport.identifier());
				isFinished = true;
				clearInterval(myTimer);
				if (queue) {
					// this should not happen with proper startup order, which waits on routerClient to be ready
					for (var i = 0; i < queue.length; i++) {
						Logger.system.debug("RouterClient: firing queued msg");
						var msg = queue[i];
						transport.send(msg);
					}
				}
				// notify initialization is complete
				if (onReadyCallBack) {
					onReadyCallBack();
				}
			}
		}

		function errHandler(errorMessage) {
			Logger.system.error("RouterClientError", errorMessage);
		}

		// main code for this asyncConnectToEventRouter function -- only executed once
		getClientTransport();
	}

	// provides unique id within one router client for queries
	function clientID() {
		return clientName + "." + ++window.FSBLData.clientIDCounter;
	}

	// returns true if this routerClient originated the message
	function originatedHere() {
		return this.header.origin === this.header.lastClient;
	}

	// invoke client callbacks in the input array (that are attached to a specific channel and listener type)
	function invokeListenerCallbacks(map, message) {
		var clientCallbackArray = map[message.header.channel];
		if (clientCallbackArray === undefined) {
			Logger.system.warn("RouterClient: no listener for incoming transmit on channel " + message.header.channel + " from " + message.header.origin, message);
		} else {
			message.originatedHere = originatedHere; // add local function to test origin
			for (var i = 0; i < clientCallbackArray.length; i++) {
				// for each callback defined for the channel
				if (!Logger.isLogMessage(message.header.channel)) {
					// logger messages
					Logger.system.info("RouterClient: incoming transmit", "CHANNEL", message.header.channel, "FROM", message.header.origin, "MESSAGE", message);
				}
				clientCallbackArray[i](null, message); // invoke the callback; the error parameter is always null for this case
			}
		}
	}

	function sendQueryResponse(err, responseData) {
		//@todo consider removing this log. Why log it? Why not log it _only_ if the dev wants a particular message logged. This can cause problems.
		Logger.system.info("RouterClient: outgoing query response", "CHANNEL", this.header.channel, "RESPONSE DATA", responseData, "QUERY ID", this.header.queryID);
		sendToRouterService(new QueryResponseMessage(this.header.queryID, err, responseData));
	}

	// invoke responder-listener callback (attached to a specific channel)
	function invokeResponderCallback(map, queryMessage) {
		var responderCallback = map[queryMessage.header.channel];
		if (responderCallback === undefined) {
			Logger.system.warn("RouterClient: no query responder define on channel " + queryMessage.header.channel + " incoming from " + queryMessage.header.origin, queryMessage);
			responderCallback(null, queryMessage); // invoke the callback (no error), queryMessage);
		} else {
			if (!queryMessage.header.error) {
				queryMessage.originatedHere = originatedHere; // add local function to test origin
				queryMessage.sendQueryResponse = sendQueryResponse.bind(queryMessage); // add callback function to message so responder can respond to query
				Logger.system.info("RouterClient: incoming query", "CHANNEL", queryMessage.header.channel, "FROM", queryMessage.header.origin, "QUERY MESSAGE", queryMessage);
				responderCallback(null, queryMessage); // invoke the callback (no error)
			} else {
				// invoke the callback with error since  flag in message (from router service)
				Logger.system.warn("RouterClient: queryResponder error", queryMessage);
				responderCallback(queryMessage.header.error, null);
				delete map[queryMessage.header.channel]; // this is a bad responder (e.g. duplicate) so remove it
			}
		}
	}

	// add a callbackHandler into the query-response map for the given queryID
	function addQueryResponseCallBack(map, queryID, responseCallback) {
		map[queryID] = responseCallback;
	}

	// add timer to wait for query response
	function addQueryResponseTimeout(mapQueryResponseTimeOut, newQueryID, channel, timeout) {
		if (timeout > 0) {
			mapQueryResponseTimeOut[newQueryID] = setTimeout(function () {
				Logger.system.warn("RouterClient: timeout waiting on query response on channel " + channel + " for queryID " + newQueryID + " on timer " + mapQueryResponseTimeOut[newQueryID] + " timeout=" + timeout);
			}, timeout);
		}
	}

	// delete timer waiting on query response (if it exists)
	function deleteQueryResponseTimeout(mapQueryResponseTimeOut, newQueryID) {
		var theTimer = mapQueryResponseTimeOut[newQueryID];
		if (theTimer !== undefined) {
			clearTimeout(theTimer);
		}
	}

	// invoke query-response callback (that is attached to a specific channel and listener type)
	function invokeQueryResponseCallback(map, responseMessage) {
		var clientCallback = map[responseMessage.header.queryID];
		if (clientCallback === undefined) {
			Logger.system.warn("RouterClient: no handler for incoming query response", "QUERY ID", responseMessage.header.queryID);
		} else {
			// delete any existing timer waiting on the response
			deleteQueryResponseTimeout(mapQueryResponseTimeOut, responseMessage.header.queryID);

			if (!responseMessage.header.error) {
				//@todo consider removing this log. Why log it? Why not log it _only_ if the dev wants a particular message logged. This can cause problems.
				Logger.system.info("RouterClient: incoming query response", "RESPONSE MESSAGE", responseMessage, "QUERY ID", responseMessage.header.queryID);
				clientCallback(null, responseMessage); // invoke the callback passing the response message
			} else {
				Logger.system.warn("RouterClient: incoming queryResponse error", responseMessage.header, "QUERY ID", responseMessage.header.queryID);
				clientCallback(responseMessage.header.error, responseMessage); // error from router service so pass it back instead of a message
			}
			delete map[responseMessage.header.queryID];
		}
	}

	// add responder callbackHandler for the given channel
	function addResponderCallBack(map, channel, callback) {
		var status = false;
		var clientCallback = map[channel];
		if (clientCallback === undefined) {
			map[channel] = callback;
			status = true;
		}
		return status;
	}

	// support function for sendNotifyToSubscriber -- maintains local list of subscribers for pubsub responder
	function addToPubSubListOfSubscribers(pubsubListOfSubscribers, topic, subscribeID) {
		if (!(topic in pubsubListOfSubscribers)) {
			pubsubListOfSubscribers[topic] = [subscribeID];
		} else {
			pubsubListOfSubscribers[topic].push(subscribeID);
		}
	}

	// support function for addPubSubResponder -- add pubsub responder callbackHandler for the given channel
	function addPubSubResponderCallBack(topic, subscribeCallback, publishCallback, unsubscribeCallback) {
		var status = false;
		var callbacks = mapPubSubResponders[topic.toString()];
		if (callbacks === undefined) {
			if (topic instanceof RegExp) {
				mapPubSubResponderRegEx[topic.toString()] = topic;
				Logger.system.info("RouterClient: PubSub RegEx added for topic " + topic.toString()); // Note: topic may be a RegEx, so use toString() where applicable
			}
			mapPubSubResponders[topic.toString()] = { "subscribeCallback": subscribeCallback, "publishCallback": publishCallback, "unsubscribeCallback": unsubscribeCallback };
			status = true;
		}
		return status;
	}

	// callback function for invokeSubscribePubSubCallback to notify new subscriber
	function sendNotifyToSubscriber(err, notifyData) {
		//@todo consider removing this log. Why log it? Why not log it _only_ if the dev wants a particular message logged. This can cause problems.
		sendToRouterService(new NotifyMessage(this.header.subscribeID, this.header.topic, err, notifyData));
		if (!err) {
			// add new subscriber to list
			addToPubSubListOfSubscribers(pubsubListOfSubscribers, this.header.topic, this.header.subscribeID);
			Logger.system.info("RouterClient: incoming subscription added", "TOPIC", this.header.topic, "MESSAGE", this);
		} else {
			Logger.system.warn("RouterClient: incoming subscription rejected by pubsub responder", "TOPIC", this.header.topic, "MESSAGE", this);
		}
	}

	// for incoming subscribe: invoke notify callback for pubsub responder
	function invokeSubscribePubSubCallback(subscribeMessage) {
		var callbacks = mapPubSubResponders[subscribeMessage.header.topic];
		//@todo consider removing this log. Why log it? Why not log it _onlY_ if the dev wants a particular message logged. This can cause problems.
		if (callbacks === undefined) {
			// if undefined then may be a matching RegEx topic
			for (var key in mapPubSubResponderRegEx) {
				if (mapPubSubResponderRegEx[key].test(subscribeMessage.header.topic)) {
					callbacks = mapPubSubResponders[key];
					var initialState = mapPubSubResponderState[subscribeMessage.header.topic]; // may already be initial state defined from publish
					if (initialState === undefined) {
						// if there isn't already state defined then use default from regEx
						initialState = mapPubSubResponderState[key]; // initialize the state from RegEx topic
					}
					mapPubSubResponderState[subscribeMessage.header.topic] = initialState;
					break;
				}
			}
		}

		if (callbacks === undefined) {
			// if still undefined
			Logger.system.warn("RouterClient: no pubsub responder defined for incoming subscribe", subscribeMessage);
		} else {
			if (subscribeMessage.header.error) {
				// the router service uses the subscribe message in this case to return a pubsub error (ToDO: consider a generic error message)
				Logger.system.warn("RouterClient: pubsub error received from router service: " + JSON.stringify(subscribeMessage.header.error));
			} else {
				subscribeMessage.sendNotifyToSubscriber = sendNotifyToSubscriber; // add callback function to message so pubsub responder can respond with Notify message
				if (callbacks.subscribeCallback) {
					subscribeMessage.data = mapPubSubResponderState[subscribeMessage.header.topic];
					callbacks.subscribeCallback(null, subscribeMessage); // invoke the callback (no error)
				} else {
					// since no subscribe callback defined, use default functionality
					subscribeMessage.sendNotifyToSubscriber(null, mapPubSubResponderState[subscribeMessage.header.topic]); // must invoke from message to set this properly
				}
			}
		}
	}

	// support function for removeSubscriber callback --  remove one subscribeID from array for the given subscription topic
	function removeFromPubSubListOfSubscribers(pubsubListOfSubscribers, topic, subscribeID) {
		var removed = false;
		if (topic in pubsubListOfSubscribers) {
			var list = pubsubListOfSubscribers[topic];
			for (var i = 0; i < list.length; i++) {
				if (subscribeID === list[i]) {
					list.splice(i, 1);
					if (list.length === 0) {
						delete pubsubListOfSubscribers[topic];
					}
					removed = true;
					Logger.system.info("RouterClient: PubSub removeListener", "TOPIC", topic, "FROM", subscribeID);
					break;
				}
			}
		}
		if (!removed) {
			Logger.system.warn("RouterClient: tried to remove non-existance listener on " + topic + " from " + JSON.stringify(subscribeID));
		}
	}

	// callback function for invokeUnsubscribePubSubCallback to remove the subscriber from the subscription
	function removeSubscriber() {
		removeFromPubSubListOfSubscribers(pubsubListOfSubscribers, this.header.topic, this.header.subscribeID);
	}

	// for incoming unsubscribe: invoke unsubscribe callback for pubsub servier
	function invokeUnsubscribePubSubCallback(unsubscribeMessage) {
		var callbacks = mapPubSubResponders[unsubscribeMessage.header.topic];

		if (callbacks === undefined) {
			// if undefined then may be a matching RegEx topic
			for (var key in mapPubSubResponderRegEx) {
				if (mapPubSubResponderRegEx[key].test(unsubscribeMessage.header.topic)) {
					callbacks = mapPubSubResponders[key];
					break;
				}
			}
		}

		if (callbacks === undefined) {
			// if still undefined
			Logger.system.warn("RouterClient: no pubsub responder defined for incoming unsubscribe", "TOPIC", unsubscribeMessage.header.topic, "UNSUBSCRIBE MESSAGE", unsubscribeMessage);
		} else {
			unsubscribeMessage.removeSubscriber = removeSubscriber; // add callback function to message for pubsub responder (but must always remove)
			if (callbacks.unsubscribeCallback) {
				Logger.system.info("RouterClient: incoming unsubscribe callback", "TOPIC", unsubscribeMessage.header.topic, "UNSUBSCRIBE MESSAGE", unsubscribeMessage);
				callbacks.unsubscribeCallback(null, unsubscribeMessage); // invoke the callback (no error)
			} else {
				// since no unsubscribe callback defined, use default functionality
				Logger.system.info("RouterClient: incoming unsubscribe", "TOPIC", unsubscribeMessage.header.topic, "UNSUBSCRIBE MESSAGE", unsubscribeMessage);
				unsubscribeMessage.removeSubscriber();
			}
		}
	}

	// callback function for invokePublishPubSubCallback to send Notify
	function sendNotifyToAllSubscribers(err, notifyData) {
		if (!err) {
			mapPubSubResponderState[this.header.topic] = notifyData; // store new state
			var listOfSubscribers = pubsubListOfSubscribers[this.header.topic];
			if (typeof listOfSubscribers !== "undefined") {
				// confirm subscribers to send to, if none then nothing to do
				for (var i = 0; i < listOfSubscribers.length; i++) {
					Logger.system.info("RouterClient: sending pubsub notify", "TOPIC", this.header.topic, "NOTIFY DATA", notifyData);
					sendToRouterService(new NotifyMessage(listOfSubscribers[i], this.header.topic, err, notifyData));
				}
			}
		} else {
			Logger.system.warn("RouterClient: income publish rejected by pubsub responder", err, notifyData);
		}
	}

	// for incoming Publish: invoke publish callback for pubsub servier
	function invokePublishPubSubCallback(publishMessage) {
		var callbacks = mapPubSubResponders[publishMessage.header.topic];

		if (callbacks === undefined) {
			// if undefined then may be a matching RegEx topic
			for (var key in mapPubSubResponderRegEx) {
				if (mapPubSubResponderRegEx[key].test(publishMessage.header.topic)) {
					callbacks = mapPubSubResponders[key];
					break;
				}
			}
		}

		if (callbacks === undefined) {
			// if still undefined
			Logger.system.warn("RouterClient: no pubsub responder defined for incoming publish", "TOPIC", publishMessage.header.topic, "PUBLISH MESSAGE", publishMessage);
		} else {
			publishMessage.sendNotifyToAllSubscribers = sendNotifyToAllSubscribers; // add callback function to message so pubsub responder can respond to publish
			if (callbacks.publishCallback) {
				Logger.system.info("RouterClient: incoming PubSub publish callback invoked", "TOPIC", publishMessage.header.topic, "PUBLISH MESSAGE", publishMessage);
				callbacks.publishCallback(null, publishMessage); // invoke the callback (no error)
			} else {
				// since no pubish callback defined, use default functionality
				Logger.system.info("RouterClient: incoming PubSub publish", "TOPIC", publishMessage.header.topic, "PUBLISH MESSAGE", publishMessage);
				publishMessage.sendNotifyToAllSubscribers(null, publishMessage.data); // must call from publish message (like a callback) so 'this' is properly set
			}
		}
	}

	// for incoming Notify: invoke notify callback (that are attached to a specific channel and listener type)
	function invokeNotifyCallback(mapSubscribersID, notifyMessage) {
		var notifyCallback = mapSubscribersID[notifyMessage.header.subscribeID];
		if (notifyCallback === undefined) {
			Logger.system.warn("RouterClient: no subscription handler defined for incoming notify for subscriberID", notifyMessage.header.subscribeID, notifyMessage);
		} else {
			if (!notifyMessage.header.error) {
				notifyMessage.originatedHere = originatedHere; // add local function to test origin
				Logger.system.info("RouterClient: incoming PubSub notify", "SUBSCRIBER ID", notifyMessage.header.subscribeID, "NOTIFY MESSAGE", notifyMessage);
				notifyCallback(null, notifyMessage); // invoke the callback passing the response message
			} else {
				Logger.system.info("RouterClient: incoming PubSub notify error for subscriberID", "SUBSCRIBER ID", notifyMessage.header.subscribeID, "NOTIFY MESSAGE", notifyMessage);
				notifyCallback(notifyMessage.header.error, notifyMessage); // error from router service so pass it back instead of a message
			}
		}
	}

	// outgoing Unsubscribe: remove subscriber callbackHandler for the given channel
	function removeSubscriberCallBack(mapSubscribersID, subscribeID) {
		var status = false;
		var notifyCallback = mapSubscribersID[subscribeID];
		if (notifyCallback !== undefined) {
			delete mapSubscribersID[subscribeID];
			status = true;
		}
		return status;
	}

	// for outgoing addSubscriber -- add a callback Handler for the subscribe
	function addSubscriberCallBack(mapSubscribersID, subscribeID, notifyCallback, topic) {
		mapSubscribersID[subscribeID] = notifyCallback;
		mapSubscribersTopic[subscribeID] = topic;
	}

	// for removePubSubResponder: remove responder callbackHandler for the given channel
	function removeResponderCallBack(map, channel) {
		var status = false;
		var clientCallback = map[channel];
		if (clientCallback !== undefined) {
			delete map[channel];
			status = true;
		}
		return status;
	}

	// for addListener: add a callbackHandler into the specified map (which depends on listener type) for the given channel
	function addListenerCallBack(map, channel, callback) {
		var firstChannelClient = false;
		var clientCallbackArray = map[channel];
		if (clientCallbackArray === undefined || clientCallbackArray.length === 0) {
			map[channel] = [callback];
			firstChannelClient = true;
		} else {
			clientCallbackArray.push(callback);
		}
		return firstChannelClient;
	}

	// for removeListener: remove a callbackHandler from the specified map (which depends on listener type) for the given channel
	function removeListenerCallBack(map, channel, callback) {
		var lastChannelClient = false;
		var clientCallbackArray = map[channel];
		if (clientCallbackArray !== undefined) {
			var index = clientCallbackArray.indexOf(callback);
			if (index > -1) {
				clientCallbackArray.splice(index, 1);
				if (clientCallbackArray.length === 0) {
					lastChannelClient = true;
				}
			} else {
				Logger.system.warn("no listener defined for channel: " + channel);
			}
		}
		return lastChannelClient;
	}

	// route incoming message to appropriate callback, which depends on the message type and channel
	function routeIncomingMessage(incomingMessage) {
		Logger.system.info("Incoming Message Type", incomingMessage.header.type, incomingMessage);
		switch (incomingMessage.header.type) {
			case "transmit":
				invokeListenerCallbacks(mapListeners, incomingMessage);
				break;
			case "query":
				invokeResponderCallback(mapResponders, incomingMessage);
				break;
			case "queryResponse":
				invokeQueryResponseCallback(mapQueryResponses, incomingMessage);
				break;
			case "notify":
				invokeNotifyCallback(mapSubscribersID, incomingMessage);
				break;
			case "publish":
				invokePublishPubSubCallback(incomingMessage);
				break;
			case "subscribe":
				invokeSubscribePubSubCallback(incomingMessage);
				break;
			case "unsubscribe":
				invokeUnsubscribePubSubCallback(incomingMessage);
				break;
			case "timeCalibration":
				timeCalibrationHandler(incomingMessage);
				break;
			case "initialHandshakeResponse":
				handshakeHandler();
				break;
			default:
		}
	}

	// *** all incoming messages from underlying transport arrive here ***
	// although incoming transport information is available, it is not passed on because not needed
	function incomingMessageHandler(incomingTransportInfo, message) {
		// ToDo: good place to put a function to validate incoming message/data
		message.header.lastClient = clientName; // add last client for diagnostics
		message.header.incomingTransportInfo = incomingTransportInfo;
		routeIncomingMessage(message);
	}

	// *** all outbound messages exit here though the appropriate transport ***
	function sendToRouterService(message) {
		if (!transport || transport instanceof Promise) {
			Logger.system.warn("RouterClient: Queuing message since router initialization not complete", message);
			queue.push(message);
		} else {
			transport.send(message);
		}
	}

	/////////////////////////////////////////////
	// Public Functions -- The Router Client API
	/////////////////////////////////////////////

	/**
  * Get router client name.
  *
  * @param {string} newClientName string identify the client
  * FSBL.Clients.RouterClient.setClientName("MyComponent");
  * @private
  */
	this.getClientName = function () {
		Logger.system.debug("RouterClient.getClientName", clientName);
		return clientName;
	};

	/**
  * Checks if router is ready. May be invoked multiple times. Invokes cb when ready, which may be immediately.  Router is not ready until underlying transport to router service is ready.
  *
  * @param {function} cb callback function to invoke when router is ready
  */
	this.onReady = function (cb) {
		Validate.args(cb, "function");
		if (isRouterReady) {
			cb();
		} else {
			parentReadyCallbackQueue.push(cb);
		}
	};

	/**
  * Estimates offset to align the reference time with Router Service.  Does this by exchanging messages with RouterService, getting the service's time, and estimating communication delay.
  *
  * @private
  */
	this.calibrateTimeWithRouterService = function (callback) {
		const TARGET_HANDSHAKE_COUNT = 5;
		var handshakeCounter = 0;
		var timeOffset;
		var offsetForFastest;
		var fastestRRT = Infinity;

		function calibrationCalculation(finalHandshakeMessage) {
			var timeOffset = 0;
			for (var i = 1; i < TARGET_HANDSHAKE_COUNT; i++) {
				var startClientTime = finalHandshakeMessage.clientBaseTime[i - 1];
				var stopClientTime = finalHandshakeMessage.clientBaseTime[i];
				var rtt = stopClientTime - startClientTime; // round-trip time
				var serviceTime = finalHandshakeMessage.serviceBaseTime[i - 1];
				var offset = serviceTime - (startClientTime + rtt / 2);
				if (rtt < fastestRRT) {
					fastestRRT = rtt;
					offsetForFastest = offset;
				}
				timeOffset += offset;
				Logger.system.debug("calibrationCalculation Intermediate Values", "lastRRT", rtt, "lastOffset", offset, "fastestOffset", offsetForFastest, "fastestRRT", fastestRRT);
			}
			timeOffset /= TARGET_HANDSHAKE_COUNT - 1;
			Logger.system.debug("RouterClient calibrationCalculation", "Average Offset", timeOffset, "Choosen FastestOffset", offsetForFastest, finalHandshakeMessage);
			callback(offsetForFastest); // use the offset with the shortest RTT since it is often the most accurate
		}

		function timeCalibrationHandlerFunction(message) {
			handshakeCounter++;
			if (handshakeCounter > TARGET_HANDSHAKE_COUNT) {
				calibrationCalculation(message); // enough handshake data gather, so do the calibration
			} else {
				message.clientBaseTime.push(window.performance.timing.navigationStart + window.performance.now());
				sendToRouterService(new TimeCalibrationHandshakeMessage(message.clientBaseTime, message.serviceBaseTime));
			}
		}

		timeCalibrationHandler = timeCalibrationHandlerFunction; // used in routeIncomingMessage to route handshake response back to handler
		timeCalibrationHandler(new TimeCalibrationHandshakeMessage([], [])); // invoke first time to start exchanging handshakes; will be invoked each time handshake message received back from FouterService
	};

	/**
  * Backward compatibility?
  * @private
  */
	this.ready = this.onReady;
	/**
  * Add listener for incoming transmit events on specified channel. Each of the incoming events will trigger the specified event handler. The number of listeners is not limited (either local to this Finsemble window or in a seperate Finsemble window).
  *
  * See [transmit]{@link RouterClientConstructor#transmit} for sending a cooresponding event message to listener. See [removeListener]{@link RouterClientConstructor#removeListener} to remove the listener.
  *
  * @param {string} channel any unique string to identify the channel (must match correspond transmit channel name)
  * @param {function} eventHandler function (see example below)
  * @example
  *
  * FSBL.Clients.RouterClient.addListener("SomeChannelName", function (error, response) {
 		if (error) {
 			Logger.system.log("ChannelA Error: ' + JSON.stringify(error));
 		} else {
 			var data = response.data;
 			Logger.system.log("ChannelA Response: ' + JSON.stringify(response));
 		}
  * });
  *
  */
	this.addListener = function (channel, eventHandler) {
		Logger.system.info("RouterClient.addListener", "CHANNEL", channel);
		Validate.args(channel, "string", eventHandler, "function");
		var firstChannelClient = addListenerCallBack(mapListeners, channel, eventHandler);
		if (firstChannelClient) {
			sendToRouterService(new AddListenerMessage(channel));
		}
	};

	/**
  * Transmit event to all listeners on the specified channel. If no listeners the event is discarded without error. All listeners to the channel in this Finsemble window and other Finsemble windows will receive the transmit.
  *
  * See [addListener]{@link RouterClientConstructor#addListener} to add a listener to receive the transmit.
  *
  * @param {string} toChannel any unique string to identify the channel (must match correspond listener channel name)
  * @param {any} event any object or primitive type to be transmitted
  * @example
  *
  * FSBL.Clients.RouterClient.transmit("SomeChannelName", event);
  *
  */
	this.transmit = function (toChannel, event) {
		if (!Logger.isLogMessage(toChannel)) {
			// logger messages
			Logger.system.info("RouterClient.transmit", "TO CHANNEL", toChannel, "EVENT", event);
		}
		Validate.args(toChannel, "string", event, "any");
		sendToRouterService(new TransmitMessage(toChannel, event));
	};

	/**
  * Remove event listener from specified channel for the specific event handler (only listeners created locally can be removed).
  *
  * See [addListener]{@link RouterClientConstructor#addListener} for corresponding add of a listener.
  *
  * @param {string} channel unique channel name to remove listener from
  * @param {function} eventHandler function used for the event handler when the listener was added
  */
	this.removeListener = function (channel, eventHandler) {
		Logger.system.info("RouterClient.removelistener", "CHANNEL", channel, "EVENT HANDLER", eventHandler);
		Validate.args(channel, "string", eventHandler, "function");
		var lastChannelListener = removeListenerCallBack(mapListeners, channel, eventHandler);
		if (lastChannelListener) {
			sendToRouterService(new RemoveListenerMessage(channel));
		}
	};

	/**
  * Add a query responder to the specified channel. The responder's queryEventHander function will receive all incoming queries for the specified channel (whether from this Finsemble window or remote Finsemble windows).
  *
  * *Note:* Only one responder is allowed per channel within the Finsemble application.
  *
  * See [query]{@link RouterClientConstructor#query} for sending a corresponding query-event message to this responder.
  *
  * @param {string} channel any unique string to identify the channel (must match correspond query channel name); only one responder allower per channel
  * @param {function} queryEventHandler function to handle the incoming query (see example below); note incoming queryMessage contains function to send response
  * @example
  *
  * FSBL.Clients.RouterClient.addResponder("ResponderChannelName", function (error, queryMessage) {
  *	if (error) {
  *		Logger.system.log('addResponder failed: ' + JSON.stringify(error));
  *	} else {
 		console.log("incoming data=" + queryMessage.data);
 		var response="Back at ya"; // Responses can be objects or strings
  *		queryMessage.sendQueryResponse(null, response); // A QUERY RESPONSE MUST BE SENT OR THE REMOTE SIDE WILL HANG
  *	}
  * });
  *
  */
	this.addResponder = function (channel, queryEventHandler) {
		Logger.system.info("RouterClient.addResponder", "CHANNEL", channel);
		Validate.args(channel, "string", queryEventHandler, "function");
		var status = addResponderCallBack(mapResponders, channel, queryEventHandler);
		if (status) {
			sendToRouterService(new addResponderMessage(channel));
		} else {
			Logger.system.warn("RouterClient.addResponder: Responder already locally defined for channel " + channel);
			queryEventHandler({
				"RouteClient QueryError": "Responder already locally defined for channel" + channel
			}, null); // immediately invoke callback passing error
		}
	};

	/**
  * Send a query to responder listening on specified channel. The responder may be in this Finsemble window or another Finsemble window.
  *
  * See [addResponder]{@link RouterClientConstructor#addResponder} to add a responder to receive the query.
  *
  * @param {string} responderChannel a unique string that identifies the channel (must match the channel name on which a responder is listening)
  * @param {object} queryEvent event message sent to responder
  * @param {any=} params optional params
  * @param {number} [params.timeout=5000]  timeout value for a query-response timer.  Timer defaults to 5000 milliseconds if no params value is passed in. Set timeout to zero to wait indefinitely. If the timer expires, this function call will return with an error.
  * @param {function} responseEventHandler event handler to receive the query response (sent from a responder that is listening on this channel)
  *
  * @example
  *
  * FSBL.Clients.RouterClient.query("someChannelName", {}, function (error, queryResponseMessage) {
  *	if (error) {
  *		Logger.system.log('query failed: ' + JSON.stringify(error));
  *	} else {
  *		// process income query response message
  *		var responseData = queryResponseMessage.data;
  *		Logger.system.log('query response: ' + JSON.stringify(queryResponseMessage));
  *	}
  * });
  *
  * FSBL.Clients.RouterClient.query("someChannelName", { queryKey: "abc123"}, { timeout: 1000 }, function (error, queryResponseMessage) {
  *	if (!error) {
  *		// process income query response message
  *		var responseData = queryResponseMessage.data;
  *	}
  * }); */
	this.query = function (responderChannel, queryEvent, params, responseEventHandler) {
		var newQueryID = clientID();
		var timestamp = window.performance.timing.navigationStart + window.performance.now();
		var navstart = window.performance.timing.navigationStart;
		var timenow = window.performance.now(); // these timer values used for logging diagnostices

		Logger.system.info("RouterClient.query", "RESPONDER CHANNEL", responderChannel, "QUERY EVENT", queryEvent, "PARAMS", params, "QUERYID", newQueryID, { timestamp, navstart, timenow });
		if (arguments.length === 3) {
			responseEventHandler = params;
			params = { timeout: 5000 };
		}
		Validate.args(responderChannel, "string", queryEvent, "any=", params, "object=", responseEventHandler, "function");
		params = params || {};
		Validate.args2("params.timeout", params.timeout, "number");

		addQueryResponseCallBack(mapQueryResponses, newQueryID, responseEventHandler);
		addQueryResponseTimeout(mapQueryResponseTimeOut, newQueryID, responderChannel, params.timeout);
		sendToRouterService(new QueryMessage(newQueryID, responderChannel, queryEvent));
	};

	/**
  * Remove query responder from specified channel. Only a locally added responder can be removed (i.e. a responder defined in the same component or service).
  *
  * See [addResponder]{@link RouterClientConstructor#addResponder} for corresponding add of a query responder.
  *
  * @param {string} responderChannel string identifying the channel to remove responder from
  *
  * @example
  *
  * FSBL.Clients.RouterClient.removeResponder("someChannelName");
  *
  */
	this.removeResponder = function (responderChannel) {
		Logger.system.info("RouterClient.removeResponder", "RESPONDER CHANNEL", responderChannel);
		Validate.args(responderChannel, "string");
		var status = removeResponderCallBack(mapResponders, responderChannel);
		if (status) {
			sendToRouterService(new RemoveResponderMessage(responderChannel));
		}
	};

	/**
  * Add a PubSub responder for specified topic. All subscribes and publishes to the topic will comes to responder (whether from local window or another window). Only one PubSub responder allowed per topic value in Finsemble application; however, the topic value may be a regular-expression representing a set of related topics, in which case the PubSub responder will responder to all matching topics. When a regEx topic is used, the same default functionality is provides for each matching topic -- the difference is only one PubSub responder is needed to cover a set of related topics, plus the same callback handers can be used (if provided).
  *
  * All the callback function are optional because each PubSub responder comes with build-in default functionality (described below).
  *
  * Note an exact topic match will take precedence over a regEx match, but otherwise results are unpredictable for overlapping RegEx topics.
  *
  * See [subscribe]{@link RouterClientConstructor#subscribe} and [publish]{@link RouterClientConstructor#publish} for corresponding functions sending to the PubSub responder.
  *
  * @param {string} topic unique topic for this responder, or a topic RegEx (e.g. '/abc.+/') to handle a set of topics
  * @param {object} initialState initial state for the topic (defaults to empty struct); can be any object
  * @param {object=} params optional parameters
  * @param {function=} params.subscribeCallback allows responder know of incoming subscription and accept or reject it (default is to accept)
  * @param {function=} params.publishCallback allows responder to use the publish data to form a new state (default is the publish data becomes the new state)
  * @param {function=} params.unsubscribeCallback allows responder to know of the unsubscribe, but it must be accepted (the default accepts)
  * @param {function=} callback optional callback(err,res) function. If addPubSubResponder failed then err set; otherwise, res set to "success"
  *
  * @example
  *
  * function subscribeCallback(error, subscribe) {
  * 	if (subscribe) {
  * 		// must make this callback to accept or reject the subscribe (default is to accept). First parm is err and second is the initial state
  * 		subscribe.sendNotifyToSubscriber(null, { "NOTIFICATION-STATE": "One" });
  * 	}
  * }
  * function publishCallback(error, publish) {
  * 	if (publish) {
  * 		// must make this callback to send notify to all subscribers (if error parameter set then notify will not be sent)
  * 		publish.sendNotifyToAllSubscribers(null, publish.data);
  * 	}
  * }
  * function unsubscribeCallback(error, unsubscribe) {
  * 	if (unsubscribe) {
  * 		// must make this callback to acknowledge the unsubscribe
  * 		unsubscribe.removeSubscriber();
  * 	}
  * }
  * FSBL.Clients.RouterClient.addPubSubResponder("topicABC", { "State": "start" },
  * 	{
  * 		subscribeCallback:subscribeCallback,
  * 		publishCallback:publishCallback,
  * 		unsubscribeCallback:unsubscribeCallback
  * 	});
  *
  *   or
  *
  * FSBL.Clients.RouterClient.addPubSubResponder("topicABC", { "State": "start" });
  *
  *   or
  *
  * FSBL.Clients.RouterClient.addPubSubResponder(\/topicA*\/, { "State": "start" });
  *
  */
	this.addPubSubResponder = function (topic, initialState, params, callback) {
		var error;
		var response;
		Logger.system.info("RouterClient.addPubSubResponder", "TOPIC", topic, "INITIAL STATE", initialState, "PARAMS", params);
		Validate.args(topic, "any", initialState, "object=", params, "object=");
		params = params || {};
		Validate.args2("params.subscribeCallback", params.subscribeCallback, "function=", "params.publishCallback", params.publishCallback, "function=") && Validate.args2("params.unsubscribeCallback", params.unsubscribeCallback, "function=");

		var status = addPubSubResponderCallBack(topic, params.subscribeCallback, params.publishCallback, params.unsubscribeCallback);
		if (status) {
			initialState = initialState || {};
			mapPubSubResponderState[topic.toString()] = Utils.clone(initialState);
			sendToRouterService(new AddPubSubResponderMessage(topic.toString()));
			response = "success";
		} else {
			error = "RouterClient.addPubSubResponder: Responder already locally defined for topic " + topic;
			Logger.system.warn(error);
		}
		if (callback) {
			callback(error, response);
		}
	};

	/**
  * Remove pubsub responder from specified topic. Only locally created responders (i.e. created in local window) can be removed.
  *
  * See [addPubSubResponder]{@link RouterClientConstructor#addPubSubResponder} for corresponding add of a SubPub responder.
  *
  * @param {string} topic unique topic for responder being removed (may be RegEx, but if so much be exact regEx used previously with addPubSubResponder)
  *
  * @example
  *
  * FSBL.Clients.RouterClient.removePubSubResponder("topicABC");
  *
  */
	this.removePubSubResponder = function (topic) {
		Logger.system.info("RouterClient.removePubSubResponder", "TOPIC", topic);
		Validate.args(topic, "any");
		var status = removeResponderCallBack(mapPubSubResponders, topic);
		if (status) {
			delete mapPubSubResponderState[topic.toString()]; // remove corresponding state
			delete mapPubSubResponderRegEx[topic.toString()]; // may be a RegEx
			sendToRouterService(new RemovePubSubResponderMessage(topic));
		} else {
			Logger.system.warn("RouterClient.removePubSubResponder failed: Could not find responder for topic " + topic);
		}
	};

	/**
  * Subscribe to a PubSub Responder. Each responder topic can have many subscribers (local in this window or remote in other windows). Each subscriber immediately (but asyncronouly) receives back current state in a notify; new notifys are receive for each publish sent to the same topic.
  *
  * See [addPubSubResponder]{@link RouterClientConstructor#addPubSubResponder} for corresponding add of a SubPub responder to handle the subscribe. See [publish]{@link RouterClientConstructor#publish} for corresponding publish to notify the subscriber.
  *
  * @param {string} topic topic being subscribed to
  * @param {function} notifyCallback invoked for each income notify for the given topic (i.e. initial notify plus for each publish)
  * @returns subscribe-id object optionally used for unsubscribing later
  *
  * @example
  *
  * var subscribeId = RouterClient.subscribe("topicABC", function(err,notify) {
  *		if (!err) {
  *			var notificationStateData = notify.data;
  *			// do something with notify data
  *  	}
  * });
  *
  */
	this.subscribe = function (topic, notifyCallback) {
		Logger.system.info("RouterClient.subscribe", "TOPIC", topic);
		Validate.args(topic, "string", notifyCallback, "function");
		var subscribeID = clientID();
		addSubscriberCallBack(mapSubscribersID, subscribeID, notifyCallback, topic);
		sendToRouterService(new SubscribeMessage(subscribeID, topic));
		return { "subscribeID": subscribeID, "topic": topic };
	};

	/**
  * Publish to a PubSub Responder, which will trigger a corresponding Notify to be sent to all subscribers (local in this window or remote in other windows). There can be multiple publishers for a topic (again, in same window or remote windows)
  *
  * See [addPubSubResponder]{@link RouterClientConstructor#addPubSubResponder} for corresponding add of a SubPub responder to handle the publish (i.e. sending notifications to all subscriber). See [Subscribe]{@link RouterClientConstructor#addPubSubResponder} for corresponding subscription to receive publish results (in the form of a notify event)
  *
  * @param {string} topic topic being published to
  * @param {object} event topic state to be published to all subscriber (unless the SubPub responder optionally modifies in between)
  *
  * @example
  *
  * FSBL.Clients.RouterClient.publish("topicABC", topicState);
  *
  */
	this.publish = function (topic, event) {
		Logger.system.info("RouterClient.publish", "TOPIC", topic, "EVENT", event);
		Validate.args(topic, "string", event, "any");
		sendToRouterService(new PublishMessage(topic, event));
	};

	/**
  * Unsubscribe from PubSub responder so no more notifications received (but doesn't affect other subscriptions). Only works from the window the PubSub responder was created in.
  *
  * See [subscribe]{@link RouterClientConstructor#subscribe} for corresponding subscription being removed.
  *
  * @param {object} subscribeID the id return from the corresponding subscribe for the topic
  *
  * @example
  *
  * FSBL.Clients.RouterClient.unsubscribe(subscribeId);
  *
  */
	this.unsubscribe = function (subscribeIDStruct) {
		Logger.system.info("RouterClient.unsubscribe", "SUBSCRIBE ID", subscribeIDStruct);
		Validate.args(subscribeIDStruct, "object") && Validate.args2("subscribeIDStruct.subscribeID", subscribeIDStruct.subscribeID, "string");
		var deletedSubscriber = removeSubscriberCallBack(mapSubscribersID, subscribeIDStruct.subscribeID);
		if (deletedSubscriber) {
			sendToRouterService(new UnsubscribeMessage(subscribeIDStruct.subscribeID, subscribeIDStruct.topic));
		} else {
			Logger.system.warn("RouterClient.unsubscribe: Could not find subscribeID for topic " + subscribeIDStruct.topic);
		}
	};

	/**
  * Test an incoming router message to see if it originated from the same origin (e.g. a trusted source...not cross-domain). Currently same origin is known only because a sharedWorker transport is used (by definition SharedWorkers do not work cross-domain).  This means any message coming in over the OpenFin IAB will not be trusted; however, by default all same-origin components and services connect to the router using a SharedWorker transport.
  *
  * @param {object} incomingMessage an incoming router message (e.g. transmit, query, notification) to test to see if trusted.
  *
  * @returns true if message is same origin (i.e. received over SharedWorker transport).
  * @example
  *
  * FSBL.Clients.RouterClient.trustedMessage(incomingRouterMessage);
  *
  */
	this.trustedMessage = function (incomingMessage) {
		var isTrusted = true; // temporarily make all trusted so no problems if changing router transport
		Logger.system.debug("RouterClient.trustedMessage header", incomingMessage.header);
		if (incomingMessage.header.originIncomingTransportInfo.transportID === "SharedWorker") {
			isTrusted = true;
		}
		return isTrusted;
	};
	/*
  * @TODO: consider adding disconnectAllListerns(), disconnectAllResponders(), disconnectAllSubscribers()
 */

	/**
  * Removes all listeners, responders, and subscribers for this router client -- automatically called when client is shutting down. Can be called multiple times.
  */
	this.disconnectAll = function () {
		Logger.system.info("RouterClient.disconnectAll");
		for (var channel in mapListeners) {
			Logger.system.debug("RouterClient.disconnectAll is removing listener on " + channel);
			sendToRouterService(new RemoveListenerMessage(channel));
			delete mapListeners[channel];
		}

		for (var responderChannel in mapResponders) {
			Logger.system.debug("RouterClient.disconnectAll is removing responder on " + responderChannel);
			sendToRouterService(new RemoveResponderMessage(responderChannel));
			delete mapResponders[responderChannel];
		}

		for (var topic in mapPubSubResponders) {
			Logger.system.debug("RouterClient.disconnectAll is removing pubsub responder on " + topic);
			sendToRouterService(new RemovePubSubResponderMessage(topic));
			delete mapPubSubResponders[topic.toString()]; // could be a RegEx
			delete mapPubSubResponderState[topic.toString()]; // remove corresponding state
			delete mapPubSubResponderRegEx[topic.toString()]; // may be a RegEx
		}

		for (var subscribeID in mapSubscribersID) {
			var stopic = mapSubscribersTopic[subscribeID];
			Logger.system.debug("RouterClient.disconnectAll is removing subscriber on " + stopic);
			sendToRouterService(new UnsubscribeMessage(subscribeID, stopic));
			delete mapSubscribersID[subscribeID];
			delete mapSubscribersTopic[subscribeID];
		}
	};

	//Prevent the loggerService window's routerClient from logging to itself. Instead, log locally for it. It's unlikely that we need to get the loggerService's routermessages. If we do, just uncomment this.
	if (fin.desktop.Window.getCurrent().name === "loggerService") {
		Logger = mockLogger;
	}

	clientName = baseClientName + "." + window.name;

	if (clientName in window.FSBLData.RouterClients) {
		// if previously constructed then return that existing client
		Logger.system.debug(`"RouterClient Check: reusing existing client for ${clientName}`);
		console.debug(`"RouterClient Check: reusing existing client for ${clientName}`, window);
	} else {
		Logger.system.debug(`"RouterClient Check: constructing new client for ${clientName}`);
		console.debug(`"RouterClient Check: constructing new client for ${clientName}`, window);
		window.FSBLData.RouterClients[clientName] = this;
		constructor(clientName, transportName); // constructure new router client
	}
	return window.FSBLData.RouterClients[clientName];
};

module.exports = RouterClientConstructor;

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\clients\\routerClientConstructor.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\clients\\routerClientConstructor.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {class System {
	static getMousePosition(cb) {
		fin.desktop.System.getMousePosition(mousePosition => {
			if (mousePosition.left) mousePosition.x = mousePosition.left;
			if (mousePosition.top) mousePosition.y = mousePosition.top;
			cb(null, mousePosition);
		}, err => {
			cb(err, null);
		});
	}
}

module.exports = System;

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\common\\system.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\common\\system.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Module dependencies.
 */

var url = __webpack_require__(48);
var parser = __webpack_require__(18);
var Manager = __webpack_require__(26);
var debug = __webpack_require__(4)('socket.io-client');

/**
 * Module exports.
 */

module.exports = exports = lookup;

/**
 * Managers cache.
 */

var cache = exports.managers = {};

/**
 * Looks up an existing `Manager` for multiplexing.
 * If the user summons:
 *
 *   `io('http://localhost/a');`
 *   `io('http://localhost/b');`
 *
 * We reuse the existing instance based on same scheme/port/host,
 * and we initialize sockets for each namespace.
 *
 * @api public
 */

function lookup (uri, opts) {
  if (typeof uri === 'object') {
    opts = uri;
    uri = undefined;
  }

  opts = opts || {};

  var parsed = url(uri);
  var source = parsed.source;
  var id = parsed.id;
  var path = parsed.path;
  var sameNamespace = cache[id] && path in cache[id].nsps;
  var newConnection = opts.forceNew || opts['force new connection'] ||
                      false === opts.multiplex || sameNamespace;

  var io;

  if (newConnection) {
    debug('ignoring socket cache for %s', source);
    io = Manager(source, opts);
  } else {
    if (!cache[id]) {
      debug('new io instance for %s', source);
      cache[id] = Manager(source, opts);
    }
    io = cache[id];
  }
  if (parsed.query && !opts.query) {
    opts.query = parsed.query;
  } else if (opts && 'object' === typeof opts.query) {
    opts.query = encodeQueryString(opts.query);
  }
  return io.socket(parsed.path, opts);
}
/**
 *  Helper method to parse query objects to string.
 * @param {object} query
 * @returns {string}
 */
function encodeQueryString (obj) {
  var str = [];
  for (var p in obj) {
    if (obj.hasOwnProperty(p)) {
      str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));
    }
  }
  return str.join('&');
}
/**
 * Protocol version.
 *
 * @api public
 */

exports.protocol = parser.protocol;

/**
 * `connect`.
 *
 * @param {String} uri
 * @api public
 */

exports.connect = lookup;

/**
 * Expose constructors for standalone build.
 *
 * @api public
 */

exports.Manager = __webpack_require__(26);
exports.Socket = __webpack_require__(28);


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
/**
 * Module dependencies.
 */

var parseuri = __webpack_require__(24);
var debug = __webpack_require__(4)('socket.io-client:url');

/**
 * Module exports.
 */

module.exports = url;

/**
 * URL parser.
 *
 * @param {String} url
 * @param {Object} An object meant to mimic window.location.
 *                 Defaults to window.location.
 * @api public
 */

function url (uri, loc) {
  var obj = uri;

  // default to window.location
  loc = loc || global.location;
  if (null == uri) uri = loc.protocol + '//' + loc.host;

  // relative path support
  if ('string' === typeof uri) {
    if ('/' === uri.charAt(0)) {
      if ('/' === uri.charAt(1)) {
        uri = loc.protocol + uri;
      } else {
        uri = loc.host + uri;
      }
    }

    if (!/^(https?|wss?):\/\//.test(uri)) {
      debug('protocol-less url %s', uri);
      if ('undefined' !== typeof loc) {
        uri = loc.protocol + '//' + uri;
      } else {
        uri = 'https://' + uri;
      }
    }

    // parse
    debug('parse %s', uri);
    obj = parseuri(uri);
  }

  // make sure we treat `localhost:80` and `localhost` equally
  if (!obj.port) {
    if (/^(http|ws)$/.test(obj.protocol)) {
      obj.port = '80';
    } else if (/^(http|ws)s$/.test(obj.protocol)) {
      obj.port = '443';
    }
  }

  obj.path = obj.path || '/';

  var ipv6 = obj.host.indexOf(':') !== -1;
  var host = ipv6 ? '[' + obj.host + ']' : obj.host;

  // define unique id
  obj.id = obj.protocol + '://' + host + ':' + obj.port;
  // define href
  obj.href = obj.protocol + '://' + host + (loc && loc.port === obj.port ? '' : (':' + obj.port));

  return obj;
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 49 */
/***/ (function(module, exports) {

/**
 * An abstraction for slicing an arraybuffer even when
 * ArrayBuffer.prototype.slice is not supported
 *
 * @api public
 */

module.exports = function(arraybuffer, start, end) {
  var bytes = arraybuffer.byteLength;
  start = start || 0;
  end = end || bytes;

  if (arraybuffer.slice) { return arraybuffer.slice(start, end); }

  if (start < 0) { start += bytes; }
  if (end < 0) { end += bytes; }
  if (end > bytes) { end = bytes; }

  if (start >= bytes || start >= end || bytes === 0) {
    return new ArrayBuffer(0);
  }

  var abv = new Uint8Array(arraybuffer);
  var result = new Uint8Array(end - start);
  for (var i = start, ii = 0; i < end; i++, ii++) {
    result[ii] = abv[i];
  }
  return result.buffer;
};


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = debug.debug = debug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(59);

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lowercased letter, i.e. "n".
 */

exports.formatters = {};

/**
 * Previously assigned color.
 */

var prevColor = 0;

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 *
 * @return {Number}
 * @api private
 */

function selectColor() {
  return exports.colors[prevColor++ % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function debug(namespace) {

  // define the `disabled` version
  function disabled() {
  }
  disabled.enabled = false;

  // define the `enabled` version
  function enabled() {

    var self = enabled;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // add the `color` if not set
    if (null == self.useColors) self.useColors = exports.useColors();
    if (null == self.color && self.useColors) self.color = selectColor();

    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %o
      args = ['%o'].concat(args);
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting
    args = exports.formatArgs.apply(self, args);

    var logFn = enabled.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }
  enabled.enabled = true;

  var fn = exports.enabled(namespace) ? enabled : disabled;

  fn.namespace = namespace;

  return fn;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  var split = (namespaces || '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/[\\^$+?.()|[\]{}]/g, '\\$&').replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {


module.exports = __webpack_require__(52);


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {


module.exports = __webpack_require__(53);

/**
 * Exports parser
 *
 * @api public
 *
 */
module.exports.parser = __webpack_require__(5);


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * Module dependencies.
 */

var transports = __webpack_require__(29);
var Emitter = __webpack_require__(8);
var debug = __webpack_require__(4)('engine.io-client:socket');
var index = __webpack_require__(23);
var parser = __webpack_require__(5);
var parseuri = __webpack_require__(24);
var parsejson = __webpack_require__(44);
var parseqs = __webpack_require__(15);

/**
 * Module exports.
 */

module.exports = Socket;

/**
 * Socket constructor.
 *
 * @param {String|Object} uri or options
 * @param {Object} options
 * @api public
 */

function Socket (uri, opts) {
  if (!(this instanceof Socket)) return new Socket(uri, opts);

  opts = opts || {};

  if (uri && 'object' === typeof uri) {
    opts = uri;
    uri = null;
  }

  if (uri) {
    uri = parseuri(uri);
    opts.hostname = uri.host;
    opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';
    opts.port = uri.port;
    if (uri.query) opts.query = uri.query;
  } else if (opts.host) {
    opts.hostname = parseuri(opts.host).host;
  }

  this.secure = null != opts.secure ? opts.secure
    : (global.location && 'https:' === location.protocol);

  if (opts.hostname && !opts.port) {
    // if no port is specified manually, use the protocol default
    opts.port = this.secure ? '443' : '80';
  }

  this.agent = opts.agent || false;
  this.hostname = opts.hostname ||
    (global.location ? location.hostname : 'localhost');
  this.port = opts.port || (global.location && location.port
      ? location.port
      : (this.secure ? 443 : 80));
  this.query = opts.query || {};
  if ('string' === typeof this.query) this.query = parseqs.decode(this.query);
  this.upgrade = false !== opts.upgrade;
  this.path = (opts.path || '/engine.io').replace(/\/$/, '') + '/';
  this.forceJSONP = !!opts.forceJSONP;
  this.jsonp = false !== opts.jsonp;
  this.forceBase64 = !!opts.forceBase64;
  this.enablesXDR = !!opts.enablesXDR;
  this.timestampParam = opts.timestampParam || 't';
  this.timestampRequests = opts.timestampRequests;
  this.transports = opts.transports || ['polling', 'websocket'];
  this.readyState = '';
  this.writeBuffer = [];
  this.prevBufferLen = 0;
  this.policyPort = opts.policyPort || 843;
  this.rememberUpgrade = opts.rememberUpgrade || false;
  this.binaryType = null;
  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;
  this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || {}) : false;

  if (true === this.perMessageDeflate) this.perMessageDeflate = {};
  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {
    this.perMessageDeflate.threshold = 1024;
  }

  // SSL options for Node.js client
  this.pfx = opts.pfx || null;
  this.key = opts.key || null;
  this.passphrase = opts.passphrase || null;
  this.cert = opts.cert || null;
  this.ca = opts.ca || null;
  this.ciphers = opts.ciphers || null;
  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? null : opts.rejectUnauthorized;
  this.forceNode = !!opts.forceNode;

  // other options for Node.js client
  var freeGlobal = typeof global === 'object' && global;
  if (freeGlobal.global === freeGlobal) {
    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {
      this.extraHeaders = opts.extraHeaders;
    }

    if (opts.localAddress) {
      this.localAddress = opts.localAddress;
    }
  }

  // set on handshake
  this.id = null;
  this.upgrades = null;
  this.pingInterval = null;
  this.pingTimeout = null;

  // set on heartbeat
  this.pingIntervalTimer = null;
  this.pingTimeoutTimer = null;

  this.open();
}

Socket.priorWebsocketSuccess = false;

/**
 * Mix in `Emitter`.
 */

Emitter(Socket.prototype);

/**
 * Protocol version.
 *
 * @api public
 */

Socket.protocol = parser.protocol; // this is an int

/**
 * Expose deps for legacy compatibility
 * and standalone browser access.
 */

Socket.Socket = Socket;
Socket.Transport = __webpack_require__(16);
Socket.transports = __webpack_require__(29);
Socket.parser = __webpack_require__(5);

/**
 * Creates transport of the given type.
 *
 * @param {String} transport name
 * @return {Transport}
 * @api private
 */

Socket.prototype.createTransport = function (name) {
  debug('creating transport "%s"', name);
  var query = clone(this.query);

  // append engine.io protocol identifier
  query.EIO = parser.protocol;

  // transport name
  query.transport = name;

  // session id if we already have one
  if (this.id) query.sid = this.id;

  var transport = new transports[name]({
    agent: this.agent,
    hostname: this.hostname,
    port: this.port,
    secure: this.secure,
    path: this.path,
    query: query,
    forceJSONP: this.forceJSONP,
    jsonp: this.jsonp,
    forceBase64: this.forceBase64,
    enablesXDR: this.enablesXDR,
    timestampRequests: this.timestampRequests,
    timestampParam: this.timestampParam,
    policyPort: this.policyPort,
    socket: this,
    pfx: this.pfx,
    key: this.key,
    passphrase: this.passphrase,
    cert: this.cert,
    ca: this.ca,
    ciphers: this.ciphers,
    rejectUnauthorized: this.rejectUnauthorized,
    perMessageDeflate: this.perMessageDeflate,
    extraHeaders: this.extraHeaders,
    forceNode: this.forceNode,
    localAddress: this.localAddress
  });

  return transport;
};

function clone (obj) {
  var o = {};
  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      o[i] = obj[i];
    }
  }
  return o;
}

/**
 * Initializes transport to use and starts probe.
 *
 * @api private
 */
Socket.prototype.open = function () {
  var transport;
  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {
    transport = 'websocket';
  } else if (0 === this.transports.length) {
    // Emit error on next tick so it can be listened to
    var self = this;
    setTimeout(function () {
      self.emit('error', 'No transports available');
    }, 0);
    return;
  } else {
    transport = this.transports[0];
  }
  this.readyState = 'opening';

  // Retry with the next transport if the transport is disabled (jsonp: false)
  try {
    transport = this.createTransport(transport);
  } catch (e) {
    this.transports.shift();
    this.open();
    return;
  }

  transport.open();
  this.setTransport(transport);
};

/**
 * Sets the current transport. Disables the existing one (if any).
 *
 * @api private
 */

Socket.prototype.setTransport = function (transport) {
  debug('setting transport %s', transport.name);
  var self = this;

  if (this.transport) {
    debug('clearing existing transport %s', this.transport.name);
    this.transport.removeAllListeners();
  }

  // set up transport
  this.transport = transport;

  // set up transport listeners
  transport
  .on('drain', function () {
    self.onDrain();
  })
  .on('packet', function (packet) {
    self.onPacket(packet);
  })
  .on('error', function (e) {
    self.onError(e);
  })
  .on('close', function () {
    self.onClose('transport close');
  });
};

/**
 * Probes a transport.
 *
 * @param {String} transport name
 * @api private
 */

Socket.prototype.probe = function (name) {
  debug('probing transport "%s"', name);
  var transport = this.createTransport(name, { probe: 1 });
  var failed = false;
  var self = this;

  Socket.priorWebsocketSuccess = false;

  function onTransportOpen () {
    if (self.onlyBinaryUpgrades) {
      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;
      failed = failed || upgradeLosesBinary;
    }
    if (failed) return;

    debug('probe transport "%s" opened', name);
    transport.send([{ type: 'ping', data: 'probe' }]);
    transport.once('packet', function (msg) {
      if (failed) return;
      if ('pong' === msg.type && 'probe' === msg.data) {
        debug('probe transport "%s" pong', name);
        self.upgrading = true;
        self.emit('upgrading', transport);
        if (!transport) return;
        Socket.priorWebsocketSuccess = 'websocket' === transport.name;

        debug('pausing current transport "%s"', self.transport.name);
        self.transport.pause(function () {
          if (failed) return;
          if ('closed' === self.readyState) return;
          debug('changing transport and sending upgrade packet');

          cleanup();

          self.setTransport(transport);
          transport.send([{ type: 'upgrade' }]);
          self.emit('upgrade', transport);
          transport = null;
          self.upgrading = false;
          self.flush();
        });
      } else {
        debug('probe transport "%s" failed', name);
        var err = new Error('probe error');
        err.transport = transport.name;
        self.emit('upgradeError', err);
      }
    });
  }

  function freezeTransport () {
    if (failed) return;

    // Any callback called by transport should be ignored since now
    failed = true;

    cleanup();

    transport.close();
    transport = null;
  }

  // Handle any error that happens while probing
  function onerror (err) {
    var error = new Error('probe error: ' + err);
    error.transport = transport.name;

    freezeTransport();

    debug('probe transport "%s" failed because of error: %s', name, err);

    self.emit('upgradeError', error);
  }

  function onTransportClose () {
    onerror('transport closed');
  }

  // When the socket is closed while we're probing
  function onclose () {
    onerror('socket closed');
  }

  // When the socket is upgraded while we're probing
  function onupgrade (to) {
    if (transport && to.name !== transport.name) {
      debug('"%s" works - aborting "%s"', to.name, transport.name);
      freezeTransport();
    }
  }

  // Remove all listeners on the transport and on self
  function cleanup () {
    transport.removeListener('open', onTransportOpen);
    transport.removeListener('error', onerror);
    transport.removeListener('close', onTransportClose);
    self.removeListener('close', onclose);
    self.removeListener('upgrading', onupgrade);
  }

  transport.once('open', onTransportOpen);
  transport.once('error', onerror);
  transport.once('close', onTransportClose);

  this.once('close', onclose);
  this.once('upgrading', onupgrade);

  transport.open();
};

/**
 * Called when connection is deemed open.
 *
 * @api public
 */

Socket.prototype.onOpen = function () {
  debug('socket open');
  this.readyState = 'open';
  Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;
  this.emit('open');
  this.flush();

  // we check for `readyState` in case an `open`
  // listener already closed the socket
  if ('open' === this.readyState && this.upgrade && this.transport.pause) {
    debug('starting upgrade probes');
    for (var i = 0, l = this.upgrades.length; i < l; i++) {
      this.probe(this.upgrades[i]);
    }
  }
};

/**
 * Handles a packet.
 *
 * @api private
 */

Socket.prototype.onPacket = function (packet) {
  if ('opening' === this.readyState || 'open' === this.readyState ||
      'closing' === this.readyState) {
    debug('socket receive: type "%s", data "%s"', packet.type, packet.data);

    this.emit('packet', packet);

    // Socket is live - any packet counts
    this.emit('heartbeat');

    switch (packet.type) {
      case 'open':
        this.onHandshake(parsejson(packet.data));
        break;

      case 'pong':
        this.setPing();
        this.emit('pong');
        break;

      case 'error':
        var err = new Error('server error');
        err.code = packet.data;
        this.onError(err);
        break;

      case 'message':
        this.emit('data', packet.data);
        this.emit('message', packet.data);
        break;
    }
  } else {
    debug('packet received with socket readyState "%s"', this.readyState);
  }
};

/**
 * Called upon handshake completion.
 *
 * @param {Object} handshake obj
 * @api private
 */

Socket.prototype.onHandshake = function (data) {
  this.emit('handshake', data);
  this.id = data.sid;
  this.transport.query.sid = data.sid;
  this.upgrades = this.filterUpgrades(data.upgrades);
  this.pingInterval = data.pingInterval;
  this.pingTimeout = data.pingTimeout;
  this.onOpen();
  // In case open handler closes socket
  if ('closed' === this.readyState) return;
  this.setPing();

  // Prolong liveness of socket on heartbeat
  this.removeListener('heartbeat', this.onHeartbeat);
  this.on('heartbeat', this.onHeartbeat);
};

/**
 * Resets ping timeout.
 *
 * @api private
 */

Socket.prototype.onHeartbeat = function (timeout) {
  clearTimeout(this.pingTimeoutTimer);
  var self = this;
  self.pingTimeoutTimer = setTimeout(function () {
    if ('closed' === self.readyState) return;
    self.onClose('ping timeout');
  }, timeout || (self.pingInterval + self.pingTimeout));
};

/**
 * Pings server every `this.pingInterval` and expects response
 * within `this.pingTimeout` or closes connection.
 *
 * @api private
 */

Socket.prototype.setPing = function () {
  var self = this;
  clearTimeout(self.pingIntervalTimer);
  self.pingIntervalTimer = setTimeout(function () {
    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);
    self.ping();
    self.onHeartbeat(self.pingTimeout);
  }, self.pingInterval);
};

/**
* Sends a ping packet.
*
* @api private
*/

Socket.prototype.ping = function () {
  var self = this;
  this.sendPacket('ping', function () {
    self.emit('ping');
  });
};

/**
 * Called on `drain` event
 *
 * @api private
 */

Socket.prototype.onDrain = function () {
  this.writeBuffer.splice(0, this.prevBufferLen);

  // setting prevBufferLen = 0 is very important
  // for example, when upgrading, upgrade packet is sent over,
  // and a nonzero prevBufferLen could cause problems on `drain`
  this.prevBufferLen = 0;

  if (0 === this.writeBuffer.length) {
    this.emit('drain');
  } else {
    this.flush();
  }
};

/**
 * Flush write buffers.
 *
 * @api private
 */

Socket.prototype.flush = function () {
  if ('closed' !== this.readyState && this.transport.writable &&
    !this.upgrading && this.writeBuffer.length) {
    debug('flushing %d packets in socket', this.writeBuffer.length);
    this.transport.send(this.writeBuffer);
    // keep track of current length of writeBuffer
    // splice writeBuffer and callbackBuffer on `drain`
    this.prevBufferLen = this.writeBuffer.length;
    this.emit('flush');
  }
};

/**
 * Sends a message.
 *
 * @param {String} message.
 * @param {Function} callback function.
 * @param {Object} options.
 * @return {Socket} for chaining.
 * @api public
 */

Socket.prototype.write =
Socket.prototype.send = function (msg, options, fn) {
  this.sendPacket('message', msg, options, fn);
  return this;
};

/**
 * Sends a packet.
 *
 * @param {String} packet type.
 * @param {String} data.
 * @param {Object} options.
 * @param {Function} callback function.
 * @api private
 */

Socket.prototype.sendPacket = function (type, data, options, fn) {
  if ('function' === typeof data) {
    fn = data;
    data = undefined;
  }

  if ('function' === typeof options) {
    fn = options;
    options = null;
  }

  if ('closing' === this.readyState || 'closed' === this.readyState) {
    return;
  }

  options = options || {};
  options.compress = false !== options.compress;

  var packet = {
    type: type,
    data: data,
    options: options
  };
  this.emit('packetCreate', packet);
  this.writeBuffer.push(packet);
  if (fn) this.once('flush', fn);
  this.flush();
};

/**
 * Closes the connection.
 *
 * @api private
 */

Socket.prototype.close = function () {
  if ('opening' === this.readyState || 'open' === this.readyState) {
    this.readyState = 'closing';

    var self = this;

    if (this.writeBuffer.length) {
      this.once('drain', function () {
        if (this.upgrading) {
          waitForUpgrade();
        } else {
          close();
        }
      });
    } else if (this.upgrading) {
      waitForUpgrade();
    } else {
      close();
    }
  }

  function close () {
    self.onClose('forced close');
    debug('socket closing - telling transport to close');
    self.transport.close();
  }

  function cleanupAndClose () {
    self.removeListener('upgrade', cleanupAndClose);
    self.removeListener('upgradeError', cleanupAndClose);
    close();
  }

  function waitForUpgrade () {
    // wait for upgrade to finish since we can't send packets while pausing a transport
    self.once('upgrade', cleanupAndClose);
    self.once('upgradeError', cleanupAndClose);
  }

  return this;
};

/**
 * Called upon transport error
 *
 * @api private
 */

Socket.prototype.onError = function (err) {
  debug('socket error %j', err);
  Socket.priorWebsocketSuccess = false;
  this.emit('error', err);
  this.onClose('transport error', err);
};

/**
 * Called upon transport close.
 *
 * @api private
 */

Socket.prototype.onClose = function (reason, desc) {
  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {
    debug('socket close with reason: "%s"', reason);
    var self = this;

    // clear timers
    clearTimeout(this.pingIntervalTimer);
    clearTimeout(this.pingTimeoutTimer);

    // stop event from firing again for transport
    this.transport.removeAllListeners('close');

    // ensure transport won't stay open
    this.transport.close();

    // ignore further transport communication
    this.transport.removeAllListeners();

    // set ready state
    this.readyState = 'closed';

    // clear session id
    this.id = null;

    // emit close event
    this.emit('close', reason, desc);

    // clean buffers after, so users can still
    // grab the buffers on `close` event
    self.writeBuffer = [];
    self.prevBufferLen = 0;
  }
};

/**
 * Filters upgrades, returning only those matching client transports.
 *
 * @param {Array} server upgrades
 * @api private
 *
 */

Socket.prototype.filterUpgrades = function (upgrades) {
  var filteredUpgrades = [];
  for (var i = 0, j = upgrades.length; i < j; i++) {
    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);
  }
  return filteredUpgrades;
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
/**
 * Module requirements.
 */

var Polling = __webpack_require__(30);
var inherit = __webpack_require__(11);

/**
 * Module exports.
 */

module.exports = JSONPPolling;

/**
 * Cached regular expressions.
 */

var rNewline = /\n/g;
var rEscapedNewline = /\\n/g;

/**
 * Global JSONP callbacks.
 */

var callbacks;

/**
 * Noop.
 */

function empty () { }

/**
 * JSONP Polling constructor.
 *
 * @param {Object} opts.
 * @api public
 */

function JSONPPolling (opts) {
  Polling.call(this, opts);

  this.query = this.query || {};

  // define global callbacks array if not present
  // we do this here (lazily) to avoid unneeded global pollution
  if (!callbacks) {
    // we need to consider multiple engines in the same page
    if (!global.___eio) global.___eio = [];
    callbacks = global.___eio;
  }

  // callback identifier
  this.index = callbacks.length;

  // add callback to jsonp global
  var self = this;
  callbacks.push(function (msg) {
    self.onData(msg);
  });

  // append to query string
  this.query.j = this.index;

  // prevent spurious errors from being emitted when the window is unloaded
  if (global.document && global.addEventListener) {
    global.addEventListener('beforeunload', function () {
      if (self.script) self.script.onerror = empty;
    }, false);
  }
}

/**
 * Inherits from Polling.
 */

inherit(JSONPPolling, Polling);

/*
 * JSONP only supports binary as base64 encoded strings
 */

JSONPPolling.prototype.supportsBinary = false;

/**
 * Closes the socket.
 *
 * @api private
 */

JSONPPolling.prototype.doClose = function () {
  if (this.script) {
    this.script.parentNode.removeChild(this.script);
    this.script = null;
  }

  if (this.form) {
    this.form.parentNode.removeChild(this.form);
    this.form = null;
    this.iframe = null;
  }

  Polling.prototype.doClose.call(this);
};

/**
 * Starts a poll cycle.
 *
 * @api private
 */

JSONPPolling.prototype.doPoll = function () {
  var self = this;
  var script = document.createElement('script');

  if (this.script) {
    this.script.parentNode.removeChild(this.script);
    this.script = null;
  }

  script.async = true;
  script.src = this.uri();
  script.onerror = function (e) {
    self.onError('jsonp poll error', e);
  };

  var insertAt = document.getElementsByTagName('script')[0];
  if (insertAt) {
    insertAt.parentNode.insertBefore(script, insertAt);
  } else {
    (document.head || document.body).appendChild(script);
  }
  this.script = script;

  var isUAgecko = 'undefined' !== typeof navigator && /gecko/i.test(navigator.userAgent);

  if (isUAgecko) {
    setTimeout(function () {
      var iframe = document.createElement('iframe');
      document.body.appendChild(iframe);
      document.body.removeChild(iframe);
    }, 100);
  }
};

/**
 * Writes with a hidden iframe.
 *
 * @param {String} data to send
 * @param {Function} called upon flush.
 * @api private
 */

JSONPPolling.prototype.doWrite = function (data, fn) {
  var self = this;

  if (!this.form) {
    var form = document.createElement('form');
    var area = document.createElement('textarea');
    var id = this.iframeId = 'eio_iframe_' + this.index;
    var iframe;

    form.className = 'socketio';
    form.style.position = 'absolute';
    form.style.top = '-1000px';
    form.style.left = '-1000px';
    form.target = id;
    form.method = 'POST';
    form.setAttribute('accept-charset', 'utf-8');
    area.name = 'd';
    form.appendChild(area);
    document.body.appendChild(form);

    this.form = form;
    this.area = area;
  }

  this.form.action = this.uri();

  function complete () {
    initIframe();
    fn();
  }

  function initIframe () {
    if (self.iframe) {
      try {
        self.form.removeChild(self.iframe);
      } catch (e) {
        self.onError('jsonp polling iframe removal error', e);
      }
    }

    try {
      // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
      var html = '<iframe src="javascript:0" name="' + self.iframeId + '">';
      iframe = document.createElement(html);
    } catch (e) {
      iframe = document.createElement('iframe');
      iframe.name = self.iframeId;
      iframe.src = 'javascript:0';
    }

    iframe.id = self.iframeId;

    self.form.appendChild(iframe);
    self.iframe = iframe;
  }

  initIframe();

  // escape \n to prevent it from being converted into \r\n by some UAs
  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side
  data = data.replace(rEscapedNewline, '\\\n');
  this.area.value = data.replace(rNewline, '\\n');

  try {
    this.form.submit();
  } catch (e) {}

  if (this.iframe.attachEvent) {
    this.iframe.onreadystatechange = function () {
      if (self.iframe.readyState === 'complete') {
        complete();
      }
    };
  } else {
    this.iframe.onload = complete;
  }
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * Module requirements.
 */

var XMLHttpRequest = __webpack_require__(17);
var Polling = __webpack_require__(30);
var Emitter = __webpack_require__(8);
var inherit = __webpack_require__(11);
var debug = __webpack_require__(4)('engine.io-client:polling-xhr');

/**
 * Module exports.
 */

module.exports = XHR;
module.exports.Request = Request;

/**
 * Empty function
 */

function empty () {}

/**
 * XHR Polling constructor.
 *
 * @param {Object} opts
 * @api public
 */

function XHR (opts) {
  Polling.call(this, opts);
  this.requestTimeout = opts.requestTimeout;

  if (global.location) {
    var isSSL = 'https:' === location.protocol;
    var port = location.port;

    // some user agents have empty `location.port`
    if (!port) {
      port = isSSL ? 443 : 80;
    }

    this.xd = opts.hostname !== global.location.hostname ||
      port !== opts.port;
    this.xs = opts.secure !== isSSL;
  } else {
    this.extraHeaders = opts.extraHeaders;
  }
}

/**
 * Inherits from Polling.
 */

inherit(XHR, Polling);

/**
 * XHR supports binary
 */

XHR.prototype.supportsBinary = true;

/**
 * Creates a request.
 *
 * @param {String} method
 * @api private
 */

XHR.prototype.request = function (opts) {
  opts = opts || {};
  opts.uri = this.uri();
  opts.xd = this.xd;
  opts.xs = this.xs;
  opts.agent = this.agent || false;
  opts.supportsBinary = this.supportsBinary;
  opts.enablesXDR = this.enablesXDR;

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;
  opts.requestTimeout = this.requestTimeout;

  // other options for Node.js client
  opts.extraHeaders = this.extraHeaders;

  return new Request(opts);
};

/**
 * Sends data.
 *
 * @param {String} data to send.
 * @param {Function} called upon flush.
 * @api private
 */

XHR.prototype.doWrite = function (data, fn) {
  var isBinary = typeof data !== 'string' && data !== undefined;
  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });
  var self = this;
  req.on('success', fn);
  req.on('error', function (err) {
    self.onError('xhr post error', err);
  });
  this.sendXhr = req;
};

/**
 * Starts a poll cycle.
 *
 * @api private
 */

XHR.prototype.doPoll = function () {
  debug('xhr poll');
  var req = this.request();
  var self = this;
  req.on('data', function (data) {
    self.onData(data);
  });
  req.on('error', function (err) {
    self.onError('xhr poll error', err);
  });
  this.pollXhr = req;
};

/**
 * Request constructor
 *
 * @param {Object} options
 * @api public
 */

function Request (opts) {
  this.method = opts.method || 'GET';
  this.uri = opts.uri;
  this.xd = !!opts.xd;
  this.xs = !!opts.xs;
  this.async = false !== opts.async;
  this.data = undefined !== opts.data ? opts.data : null;
  this.agent = opts.agent;
  this.isBinary = opts.isBinary;
  this.supportsBinary = opts.supportsBinary;
  this.enablesXDR = opts.enablesXDR;
  this.requestTimeout = opts.requestTimeout;

  // SSL options for Node.js client
  this.pfx = opts.pfx;
  this.key = opts.key;
  this.passphrase = opts.passphrase;
  this.cert = opts.cert;
  this.ca = opts.ca;
  this.ciphers = opts.ciphers;
  this.rejectUnauthorized = opts.rejectUnauthorized;

  // other options for Node.js client
  this.extraHeaders = opts.extraHeaders;

  this.create();
}

/**
 * Mix in `Emitter`.
 */

Emitter(Request.prototype);

/**
 * Creates the XHR object and sends the request.
 *
 * @api private
 */

Request.prototype.create = function () {
  var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;

  var xhr = this.xhr = new XMLHttpRequest(opts);
  var self = this;

  try {
    debug('xhr open %s: %s', this.method, this.uri);
    xhr.open(this.method, this.uri, this.async);
    try {
      if (this.extraHeaders) {
        xhr.setDisableHeaderCheck(true);
        for (var i in this.extraHeaders) {
          if (this.extraHeaders.hasOwnProperty(i)) {
            xhr.setRequestHeader(i, this.extraHeaders[i]);
          }
        }
      }
    } catch (e) {}
    if (this.supportsBinary) {
      // This has to be done after open because Firefox is stupid
      // http://stackoverflow.com/questions/13216903/get-binary-data-with-xmlhttprequest-in-a-firefox-extension
      xhr.responseType = 'arraybuffer';
    }

    if ('POST' === this.method) {
      try {
        if (this.isBinary) {
          xhr.setRequestHeader('Content-type', 'application/octet-stream');
        } else {
          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');
        }
      } catch (e) {}
    }

    try {
      xhr.setRequestHeader('Accept', '*/*');
    } catch (e) {}

    // ie6 check
    if ('withCredentials' in xhr) {
      xhr.withCredentials = true;
    }

    if (this.requestTimeout) {
      xhr.timeout = this.requestTimeout;
    }

    if (this.hasXDR()) {
      xhr.onload = function () {
        self.onLoad();
      };
      xhr.onerror = function () {
        self.onError(xhr.responseText);
      };
    } else {
      xhr.onreadystatechange = function () {
        if (4 !== xhr.readyState) return;
        if (200 === xhr.status || 1223 === xhr.status) {
          self.onLoad();
        } else {
          // make sure the `error` event handler that's user-set
          // does not throw in the same tick and gets caught here
          setTimeout(function () {
            self.onError(xhr.status);
          }, 0);
        }
      };
    }

    debug('xhr data %s', this.data);
    xhr.send(this.data);
  } catch (e) {
    // Need to defer since .create() is called directly fhrom the constructor
    // and thus the 'error' event can only be only bound *after* this exception
    // occurs.  Therefore, also, we cannot throw here at all.
    setTimeout(function () {
      self.onError(e);
    }, 0);
    return;
  }

  if (global.document) {
    this.index = Request.requestsCount++;
    Request.requests[this.index] = this;
  }
};

/**
 * Called upon successful response.
 *
 * @api private
 */

Request.prototype.onSuccess = function () {
  this.emit('success');
  this.cleanup();
};

/**
 * Called if we have data.
 *
 * @api private
 */

Request.prototype.onData = function (data) {
  this.emit('data', data);
  this.onSuccess();
};

/**
 * Called upon error.
 *
 * @api private
 */

Request.prototype.onError = function (err) {
  this.emit('error', err);
  this.cleanup(true);
};

/**
 * Cleans up house.
 *
 * @api private
 */

Request.prototype.cleanup = function (fromError) {
  if ('undefined' === typeof this.xhr || null === this.xhr) {
    return;
  }
  // xmlhttprequest
  if (this.hasXDR()) {
    this.xhr.onload = this.xhr.onerror = empty;
  } else {
    this.xhr.onreadystatechange = empty;
  }

  if (fromError) {
    try {
      this.xhr.abort();
    } catch (e) {}
  }

  if (global.document) {
    delete Request.requests[this.index];
  }

  this.xhr = null;
};

/**
 * Called upon load.
 *
 * @api private
 */

Request.prototype.onLoad = function () {
  var data;
  try {
    var contentType;
    try {
      contentType = this.xhr.getResponseHeader('Content-Type').split(';')[0];
    } catch (e) {}
    if (contentType === 'application/octet-stream') {
      data = this.xhr.response || this.xhr.responseText;
    } else {
      if (!this.supportsBinary) {
        data = this.xhr.responseText;
      } else {
        try {
          data = String.fromCharCode.apply(null, new Uint8Array(this.xhr.response));
        } catch (e) {
          var ui8Arr = new Uint8Array(this.xhr.response);
          var dataArray = [];
          for (var idx = 0, length = ui8Arr.length; idx < length; idx++) {
            dataArray.push(ui8Arr[idx]);
          }

          data = String.fromCharCode.apply(null, dataArray);
        }
      }
    }
  } catch (e) {
    this.onError(e);
  }
  if (null != data) {
    this.onData(data);
  }
};

/**
 * Check if it has XDomainRequest.
 *
 * @api private
 */

Request.prototype.hasXDR = function () {
  return 'undefined' !== typeof global.XDomainRequest && !this.xs && this.enablesXDR;
};

/**
 * Aborts the request.
 *
 * @api public
 */

Request.prototype.abort = function () {
  this.cleanup();
};

/**
 * Aborts pending requests when unloading the window. This is needed to prevent
 * memory leaks (e.g. when using IE) and to ensure that no spurious error is
 * emitted.
 */

Request.requestsCount = 0;
Request.requests = {};

if (global.document) {
  if (global.attachEvent) {
    global.attachEvent('onunload', unloadHandler);
  } else if (global.addEventListener) {
    global.addEventListener('beforeunload', unloadHandler, false);
  }
}

function unloadHandler () {
  for (var i in Request.requests) {
    if (Request.requests.hasOwnProperty(i)) {
      Request.requests[i].abort();
    }
  }
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * Module dependencies.
 */

var Transport = __webpack_require__(16);
var parser = __webpack_require__(5);
var parseqs = __webpack_require__(15);
var inherit = __webpack_require__(11);
var yeast = __webpack_require__(32);
var debug = __webpack_require__(4)('engine.io-client:websocket');
var BrowserWebSocket = global.WebSocket || global.MozWebSocket;
var NodeWebSocket;
if (typeof window === 'undefined') {
  try {
    NodeWebSocket = __webpack_require__(71);
  } catch (e) { }
}

/**
 * Get either the `WebSocket` or `MozWebSocket` globals
 * in the browser or try to resolve WebSocket-compatible
 * interface exposed by `ws` for Node-like environment.
 */

var WebSocket = BrowserWebSocket;
if (!WebSocket && typeof window === 'undefined') {
  WebSocket = NodeWebSocket;
}

/**
 * Module exports.
 */

module.exports = WS;

/**
 * WebSocket transport constructor.
 *
 * @api {Object} connection options
 * @api public
 */

function WS (opts) {
  var forceBase64 = (opts && opts.forceBase64);
  if (forceBase64) {
    this.supportsBinary = false;
  }
  this.perMessageDeflate = opts.perMessageDeflate;
  this.usingBrowserWebSocket = BrowserWebSocket && !opts.forceNode;
  if (!this.usingBrowserWebSocket) {
    WebSocket = NodeWebSocket;
  }
  Transport.call(this, opts);
}

/**
 * Inherits from Transport.
 */

inherit(WS, Transport);

/**
 * Transport name.
 *
 * @api public
 */

WS.prototype.name = 'websocket';

/*
 * WebSockets support binary
 */

WS.prototype.supportsBinary = true;

/**
 * Opens socket.
 *
 * @api private
 */

WS.prototype.doOpen = function () {
  if (!this.check()) {
    // let probe timeout
    return;
  }

  var uri = this.uri();
  var protocols = void (0);
  var opts = {
    agent: this.agent,
    perMessageDeflate: this.perMessageDeflate
  };

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;
  if (this.extraHeaders) {
    opts.headers = this.extraHeaders;
  }
  if (this.localAddress) {
    opts.localAddress = this.localAddress;
  }

  try {
    this.ws = this.usingBrowserWebSocket ? new WebSocket(uri) : new WebSocket(uri, protocols, opts);
  } catch (err) {
    return this.emit('error', err);
  }

  if (this.ws.binaryType === undefined) {
    this.supportsBinary = false;
  }

  if (this.ws.supports && this.ws.supports.binary) {
    this.supportsBinary = true;
    this.ws.binaryType = 'nodebuffer';
  } else {
    this.ws.binaryType = 'arraybuffer';
  }

  this.addEventListeners();
};

/**
 * Adds event listeners to the socket
 *
 * @api private
 */

WS.prototype.addEventListeners = function () {
  var self = this;

  this.ws.onopen = function () {
    self.onOpen();
  };
  this.ws.onclose = function () {
    self.onClose();
  };
  this.ws.onmessage = function (ev) {
    self.onData(ev.data);
  };
  this.ws.onerror = function (e) {
    self.onError('websocket error', e);
  };
};

/**
 * Writes data to socket.
 *
 * @param {Array} array of packets.
 * @api private
 */

WS.prototype.write = function (packets) {
  var self = this;
  this.writable = false;

  // encodePacket efficient as it uses WS framing
  // no need for encodePayload
  var total = packets.length;
  for (var i = 0, l = total; i < l; i++) {
    (function (packet) {
      parser.encodePacket(packet, self.supportsBinary, function (data) {
        if (!self.usingBrowserWebSocket) {
          // always create a new object (GH-437)
          var opts = {};
          if (packet.options) {
            opts.compress = packet.options.compress;
          }

          if (self.perMessageDeflate) {
            var len = 'string' === typeof data ? global.Buffer.byteLength(data) : data.length;
            if (len < self.perMessageDeflate.threshold) {
              opts.compress = false;
            }
          }
        }

        // Sometimes the websocket has already been closed but the browser didn't
        // have a chance of informing us about it yet, in that case send will
        // throw an error
        try {
          if (self.usingBrowserWebSocket) {
            // TypeError is thrown when passing the second argument on Safari
            self.ws.send(data);
          } else {
            self.ws.send(data, opts);
          }
        } catch (e) {
          debug('websocket closed before onclose event');
        }

        --total || done();
      });
    })(packets[i]);
  }

  function done () {
    self.emit('flush');

    // fake drain
    // defer to next tick to allow Socket to clear writeBuffer
    setTimeout(function () {
      self.writable = true;
      self.emit('drain');
    }, 0);
  }
};

/**
 * Called upon close
 *
 * @api private
 */

WS.prototype.onClose = function () {
  Transport.prototype.onClose.call(this);
};

/**
 * Closes socket.
 *
 * @api private
 */

WS.prototype.doClose = function () {
  if (typeof this.ws !== 'undefined') {
    this.ws.close();
  }
};

/**
 * Generates uri for connection.
 *
 * @api private
 */

WS.prototype.uri = function () {
  var query = this.query || {};
  var schema = this.secure ? 'wss' : 'ws';
  var port = '';

  // avoid port if default for schema
  if (this.port && (('wss' === schema && Number(this.port) !== 443) ||
    ('ws' === schema && Number(this.port) !== 80))) {
    port = ':' + this.port;
  }

  // append timestamp to URI
  if (this.timestampRequests) {
    query[this.timestampParam] = yeast();
  }

  // communicate binary support capabilities
  if (!this.supportsBinary) {
    query.b64 = 1;
  }

  query = parseqs.encode(query);

  // prepend ? to query
  if (query.length) {
    query = '?' + query;
  }

  var ipv6 = this.hostname.indexOf(':') !== -1;
  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
};

/**
 * Feature detection for WebSocket.
 *
 * @return {Boolean} whether this transport is available.
 * @api public
 */

WS.prototype.check = function () {
  return !!WebSocket && !('__initialize' in WebSocket && this.name === WS.prototype.name);
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 57 */
/***/ (function(module, exports) {


/**
 * Gets the keys for an object.
 *
 * @return {Array} keys
 * @api private
 */

module.exports = Object.keys || function keys (obj){
  var arr = [];
  var has = Object.prototype.hasOwnProperty;

  for (var i in obj) {
    if (has.call(obj, i)) {
      arr.push(i);
    }
  }
  return arr;
};


/***/ }),
/* 58 */
/***/ (function(module, exports) {

module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};


/***/ }),
/* 59 */
/***/ (function(module, exports) {

/**
 * Helpers.
 */

var s = 1000
var m = s * 60
var h = m * 60
var d = h * 24
var y = d * 365.25

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} options
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function (val, options) {
  options = options || {}
  var type = typeof val
  if (type === 'string' && val.length > 0) {
    return parse(val)
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ?
			fmtLong(val) :
			fmtShort(val)
  }
  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val))
}

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str)
  if (str.length > 10000) {
    return
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str)
  if (!match) {
    return
  }
  var n = parseFloat(match[1])
  var type = (match[2] || 'ms').toLowerCase()
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y
    case 'days':
    case 'day':
    case 'd':
      return n * d
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n
    default:
      return undefined
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd'
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h'
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm'
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's'
  }
  return ms + 'ms'
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms'
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name
  }
  return Math.ceil(ms / n) + ' ' + name + 's'
}


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/*global Blob,File*/

/**
 * Module requirements
 */

var isArray = __webpack_require__(58);
var isBuf = __webpack_require__(31);

/**
 * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
 * Anything with blobs or files should be fed through removeBlobs before coming
 * here.
 *
 * @param {Object} packet - socket.io event packet
 * @return {Object} with deconstructed packet and list of buffers
 * @api public
 */

exports.deconstructPacket = function(packet){
  var buffers = [];
  var packetData = packet.data;

  function _deconstructPacket(data) {
    if (!data) return data;

    if (isBuf(data)) {
      var placeholder = { _placeholder: true, num: buffers.length };
      buffers.push(data);
      return placeholder;
    } else if (isArray(data)) {
      var newData = new Array(data.length);
      for (var i = 0; i < data.length; i++) {
        newData[i] = _deconstructPacket(data[i]);
      }
      return newData;
    } else if ('object' == typeof data && !(data instanceof Date)) {
      var newData = {};
      for (var key in data) {
        newData[key] = _deconstructPacket(data[key]);
      }
      return newData;
    }
    return data;
  }

  var pack = packet;
  pack.data = _deconstructPacket(packetData);
  pack.attachments = buffers.length; // number of binary 'attachments'
  return {packet: pack, buffers: buffers};
};

/**
 * Reconstructs a binary packet from its placeholder packet and buffers
 *
 * @param {Object} packet - event packet with placeholders
 * @param {Array} buffers - binary buffers to put in placeholder positions
 * @return {Object} reconstructed packet
 * @api public
 */

exports.reconstructPacket = function(packet, buffers) {
  var curPlaceHolder = 0;

  function _reconstructPacket(data) {
    if (data && data._placeholder) {
      var buf = buffers[data.num]; // appropriate buffer (should be natural order anyway)
      return buf;
    } else if (isArray(data)) {
      for (var i = 0; i < data.length; i++) {
        data[i] = _reconstructPacket(data[i]);
      }
      return data;
    } else if (data && 'object' == typeof data) {
      for (var key in data) {
        data[key] = _reconstructPacket(data[key]);
      }
      return data;
    }
    return data;
  }

  packet.data = _reconstructPacket(packet.data);
  packet.attachments = undefined; // no longer useful
  return packet;
};

/**
 * Asynchronously removes Blobs or Files from data via
 * FileReader's readAsArrayBuffer method. Used before encoding
 * data as msgpack. Calls callback with the blobless data.
 *
 * @param {Object} data
 * @param {Function} callback
 * @api private
 */

exports.removeBlobs = function(data, callback) {
  function _removeBlobs(obj, curKey, containingObject) {
    if (!obj) return obj;

    // convert any blob
    if ((global.Blob && obj instanceof Blob) ||
        (global.File && obj instanceof File)) {
      pendingBlobs++;

      // async filereader
      var fileReader = new FileReader();
      fileReader.onload = function() { // this.result == arraybuffer
        if (containingObject) {
          containingObject[curKey] = this.result;
        }
        else {
          bloblessData = this.result;
        }

        // if nothing pending its callback time
        if(! --pendingBlobs) {
          callback(bloblessData);
        }
      };

      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer
    } else if (isArray(obj)) { // handle array
      for (var i = 0; i < obj.length; i++) {
        _removeBlobs(obj[i], i, obj);
      }
    } else if (obj && 'object' == typeof obj && !isBuf(obj)) { // and object
      for (var key in obj) {
        _removeBlobs(obj[key], key, obj);
      }
    }
  }

  var pendingBlobs = 0;
  var bloblessData = data;
  _removeBlobs(bloblessData);
  if (!pendingBlobs) {
    callback(bloblessData);
  }
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 61 */
/***/ (function(module, exports) {


/**
 * Expose `Emitter`.
 */

module.exports = Emitter;

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks[event] = this._callbacks[event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  var self = this;
  this._callbacks = this._callbacks || {};

  function on() {
    self.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks[event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks[event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }
  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1)
    , callbacks = this._callbacks[event];

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks[event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = __webpack_require__(63);
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // is webkit? http://stackoverflow.com/a/16459606/376773
  return ('WebkitAppearance' in document.documentElement.style) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (window.console && (console.firebug || (console.exception && console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  return JSON.stringify(v);
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs() {
  var args = arguments;
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return args;

  var c = 'color: ' + this.color;
  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
  return args;
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}
  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage(){
  try {
    return window.localStorage;
  } catch (e) {}
}


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = debug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(64);

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lowercased letter, i.e. "n".
 */

exports.formatters = {};

/**
 * Previously assigned color.
 */

var prevColor = 0;

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 *
 * @return {Number}
 * @api private
 */

function selectColor() {
  return exports.colors[prevColor++ % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function debug(namespace) {

  // define the `disabled` version
  function disabled() {
  }
  disabled.enabled = false;

  // define the `enabled` version
  function enabled() {

    var self = enabled;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // add the `color` if not set
    if (null == self.useColors) self.useColors = exports.useColors();
    if (null == self.color && self.useColors) self.color = selectColor();

    var args = Array.prototype.slice.call(arguments);

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %o
      args = ['%o'].concat(args);
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    if ('function' === typeof exports.formatArgs) {
      args = exports.formatArgs.apply(self, args);
    }
    var logFn = enabled.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }
  enabled.enabled = true;

  var fn = exports.enabled(namespace) ? enabled : disabled;

  fn.namespace = namespace;

  return fn;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  var split = (namespaces || '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}


/***/ }),
/* 64 */
/***/ (function(module, exports) {

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} options
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options){
  options = options || {};
  if ('string' == typeof val) return parse(val);
  return options.long
    ? long(val)
    : short(val);
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = '' + str;
  if (str.length > 10000) return;
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
  if (!match) return;
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function short(ms) {
  if (ms >= d) return Math.round(ms / d) + 'd';
  if (ms >= h) return Math.round(ms / h) + 'h';
  if (ms >= m) return Math.round(ms / m) + 'm';
  if (ms >= s) return Math.round(ms / s) + 's';
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function long(ms) {
  return plural(ms, d, 'day')
    || plural(ms, h, 'hour')
    || plural(ms, m, 'minute')
    || plural(ms, s, 'second')
    || ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) return;
  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
  return Math.ceil(ms / n) + ' ' + name + 's';
}


/***/ }),
/* 65 */
/***/ (function(module, exports) {

module.exports = toArray

function toArray(list, index) {
    var array = []

    index = index || 0

    for (var i = index || 0; i < list.length; i++) {
        array[i - index] = list[i]
    }

    return array
}


/***/ }),
/* 66 */
/***/ (function(module, exports) {

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
var byteToHex = [];
for (var i = 0; i < 256; ++i) {
  byteToHex[i] = (i + 0x100).toString(16).substr(1);
}

function bytesToUuid(buf, offset) {
  var i = offset || 0;
  var bth = byteToHex;
  return bth[buf[i++]] + bth[buf[i++]] +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] +
          bth[buf[i++]] + bth[buf[i++]] +
          bth[buf[i++]] + bth[buf[i++]];
}

module.exports = bytesToUuid;


/***/ }),
/* 67 */
/***/ (function(module, exports) {

// Unique ID creation requires a high quality random # generator.  In the
// browser this is a little complicated due to unknown quality of Math.random()
// and inconsistent support for the `crypto` API.  We do the best we can via
// feature-detection

// getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
var getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues.bind(crypto)) ||
                      (typeof(msCrypto) != 'undefined' && msCrypto.getRandomValues.bind(msCrypto));
if (getRandomValues) {
  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

  module.exports = function whatwgRNG() {
    getRandomValues(rnds8);
    return rnds8;
  };
} else {
  // Math.random()-based (RNG)
  //
  // If all else fails, use Math.random().  It's fast, but is of unspecified
  // quality.
  var rnds = new Array(16);

  module.exports = function mathRNG() {
    for (var i = 0, r; i < 16; i++) {
      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
    }

    return rnds;
  };
}


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

var rng = __webpack_require__(67);
var bytesToUuid = __webpack_require__(66);

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html

var _nodeId;
var _clockseq;

// Previous uuid creation time
var _lastMSecs = 0;
var _lastNSecs = 0;

// See https://github.com/broofa/node-uuid for API details
function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || [];

  options = options || {};
  var node = options.node || _nodeId;
  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

  // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189
  if (node == null || clockseq == null) {
    var seedBytes = rng();
    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [
        seedBytes[0] | 0x01,
        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]
      ];
    }
    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  }

  // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

  // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock
  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

  // Time since last uuid creation (in msecs)
  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

  // Per 4.2.1.2, Bump clockseq on clock regression
  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  }

  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  }

  // Per 4.2.1.2 Throw error if too many uuids are requested
  if (nsecs >= 10000) {
    throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;

  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
  msecs += 12219292800000;

  // `time_low`
  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff;

  // `time_mid`
  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff;

  // `time_high_and_version`
  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
  b[i++] = tmh >>> 16 & 0xff;

  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
  b[i++] = clockseq >>> 8 | 0x80;

  // `clock_seq_low`
  b[i++] = clockseq & 0xff;

  // `node`
  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf ? buf : bytesToUuid(b);
}

module.exports = v1;


/***/ }),
/* 69 */
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */
module.exports = __webpack_amd_options__;

/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/wtf8 v1.0.0 by @mathias */
;(function(root) {

	// Detect free variables `exports`
	var freeExports = typeof exports == 'object' && exports;

	// Detect free variable `module`
	var freeModule = typeof module == 'object' && module &&
		module.exports == freeExports && module;

	// Detect free variable `global`, from Node.js or Browserified code,
	// and use it as `root`
	var freeGlobal = typeof global == 'object' && global;
	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
		root = freeGlobal;
	}

	/*--------------------------------------------------------------------------*/

	var stringFromCharCode = String.fromCharCode;

	// Taken from https://mths.be/punycode
	function ucs2decode(string) {
		var output = [];
		var counter = 0;
		var length = string.length;
		var value;
		var extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	// Taken from https://mths.be/punycode
	function ucs2encode(array) {
		var length = array.length;
		var index = -1;
		var value;
		var output = '';
		while (++index < length) {
			value = array[index];
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
		}
		return output;
	}

	/*--------------------------------------------------------------------------*/

	function createByte(codePoint, shift) {
		return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
	}

	function encodeCodePoint(codePoint) {
		if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
			return stringFromCharCode(codePoint);
		}
		var symbol = '';
		if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
			symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
		}
		else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
			symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
			symbol += createByte(codePoint, 6);
		}
		else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
			symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
			symbol += createByte(codePoint, 12);
			symbol += createByte(codePoint, 6);
		}
		symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
		return symbol;
	}

	function wtf8encode(string) {
		var codePoints = ucs2decode(string);
		var length = codePoints.length;
		var index = -1;
		var codePoint;
		var byteString = '';
		while (++index < length) {
			codePoint = codePoints[index];
			byteString += encodeCodePoint(codePoint);
		}
		return byteString;
	}

	/*--------------------------------------------------------------------------*/

	function readContinuationByte() {
		if (byteIndex >= byteCount) {
			throw Error('Invalid byte index');
		}

		var continuationByte = byteArray[byteIndex] & 0xFF;
		byteIndex++;

		if ((continuationByte & 0xC0) == 0x80) {
			return continuationByte & 0x3F;
		}

		// If we end up here, it’s not a continuation byte.
		throw Error('Invalid continuation byte');
	}

	function decodeSymbol() {
		var byte1;
		var byte2;
		var byte3;
		var byte4;
		var codePoint;

		if (byteIndex > byteCount) {
			throw Error('Invalid byte index');
		}

		if (byteIndex == byteCount) {
			return false;
		}

		// Read the first byte.
		byte1 = byteArray[byteIndex] & 0xFF;
		byteIndex++;

		// 1-byte sequence (no continuation bytes)
		if ((byte1 & 0x80) == 0) {
			return byte1;
		}

		// 2-byte sequence
		if ((byte1 & 0xE0) == 0xC0) {
			var byte2 = readContinuationByte();
			codePoint = ((byte1 & 0x1F) << 6) | byte2;
			if (codePoint >= 0x80) {
				return codePoint;
			} else {
				throw Error('Invalid continuation byte');
			}
		}

		// 3-byte sequence (may include unpaired surrogates)
		if ((byte1 & 0xF0) == 0xE0) {
			byte2 = readContinuationByte();
			byte3 = readContinuationByte();
			codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
			if (codePoint >= 0x0800) {
				return codePoint;
			} else {
				throw Error('Invalid continuation byte');
			}
		}

		// 4-byte sequence
		if ((byte1 & 0xF8) == 0xF0) {
			byte2 = readContinuationByte();
			byte3 = readContinuationByte();
			byte4 = readContinuationByte();
			codePoint = ((byte1 & 0x0F) << 0x12) | (byte2 << 0x0C) |
				(byte3 << 0x06) | byte4;
			if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
				return codePoint;
			}
		}

		throw Error('Invalid WTF-8 detected');
	}

	var byteArray;
	var byteCount;
	var byteIndex;
	function wtf8decode(byteString) {
		byteArray = ucs2decode(byteString);
		byteCount = byteArray.length;
		byteIndex = 0;
		var codePoints = [];
		var tmp;
		while ((tmp = decodeSymbol()) !== false) {
			codePoints.push(tmp);
		}
		return ucs2encode(codePoints);
	}

	/*--------------------------------------------------------------------------*/

	var wtf8 = {
		'version': '1.0.0',
		'encode': wtf8encode,
		'decode': wtf8decode
	};

	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		true
	) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return wtf8;
		}.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}	else if (freeExports && !freeExports.nodeType) {
		if (freeModule) { // in Node.js or RingoJS v0.8.0+
			freeModule.exports = wtf8;
		} else { // in Narwhal or RingoJS v0.7.0-
			var object = {};
			var hasOwnProperty = object.hasOwnProperty;
			for (var key in wtf8) {
				hasOwnProperty.call(wtf8, key) && (freeExports[key] = wtf8[key]);
			}
		}
	} else { // in Rhino or a web browser
		root.wtf8 = wtf8;
	}

}(this));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module), __webpack_require__(1)))

/***/ }),
/* 71 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var FSBLWindow = __webpack_require__(19);
var OpenFinWindow = __webpack_require__(84);
var NativeWindow = __webpack_require__(82);
var FinsembleNativeWindow = __webpack_require__(81);

FSBLWindow.registerType("OpenFinWindow", OpenFinWindow);
FSBLWindow.registerType("NativeWindow", NativeWindow);
FSBLWindow.registerType("FinsembleNativeWindow", FinsembleNativeWindow);

module.exports = FSBLWindow;

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\common\\window\\FinsembleWindow.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\common\\window\\FinsembleWindow.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {/*!
* Copyright 2017 by ChartIQ, Inc.
* All rights reserved.
*/

/*
 * @introduction
 * <h2>Base Service</h2>
 * Creates an instance of the Base Service which all service must inherit. Services are spawned from your *service.json* file and managed by a helper thread&mdash;the **Service Manager**.
 * Services communicate their status and receive status of other service through the Service Manager.
 * Services have an intial handshake with the Service Manager on load, and then either go online or wait for dependant services to come online.
 * Service intialization is completly asynchronous, which allows all services to load at the same time, as long as their dependencies have been met.
*/
global.finsemble = {};
var FSBLUtils = __webpack_require__(6);
var RouterClient = __webpack_require__(3);
var Logger = __webpack_require__(2);
var wrapCallbacks = __webpack_require__(75);
var async = __webpack_require__(12);
const FSBLDependencyManager = __webpack_require__(20);

// ensures all service errors will be caught
window.addEventListener("error", function (errorObject) {
	var stack = errorObject.error ? errorObject.error.stack.substring(errorObject.error.stack.search("at ")) : ""; // strip off irrelevant part of stack
	Logger.error(errorObject.message, "File: " + errorObject.filename, "Line: " + errorObject.lineno, "Column: " + errorObject.colno, "Error Stack: \n    " + stack);
	return false;
});
const defaultBaseServiceParams = {
	startupDependencies: {
		services: [],
		clients: []
	},
	shutdownDependencies: {
		services: []
	},
	addOFWrapper: false
};
/**
 *
 * @private
 */
function fixParams(params) {
	if (params.startupDependencies) {
		if (!params.startupDependencies.services) params.startupDependencies.services = defaultBaseServiceParams.startupDependencies.services;
		if (!params.startupDependencies.clients) params.startupDependencies.clients = defaultBaseServiceParams.startupDependencies.clients;
	} else {
		params.startupDependencies = defaultBaseServiceParams.startupDependencies;
	}
	if (params.shutdownDependencies) {
		if (!params.shutdownDependencies.services) params.shutdownDependencies.services = defaultBaseServiceParams.shutdownDependencies.services;
	} else {
		params.shutdownDependencies = defaultBaseServiceParams.shutdownDependencies;
	}
}
/**
 * @introduction
 * Creates an instance of the Base Service of which all service must inherit. Services are spawned from your `service.json` file and managed by a helper thread (Service Manager). Services communicate their status and *receive status of other service through the Service Manager. Services have an intial handshake with the Service Manager on load and then either go online or wait for dependant services to come online. Service *intialization is completly async which allows all services to load at the same time as long as their dependencies have been met.
 * @constructor

 @example
	var baseService = require("../baseService");
	function NewService() {

		return this;
	}
	NewService.prototype = new baseService();
	var serviceInstance = new NewService();
	serviceInstance.onBaseServiceReady(function (callback) {
		callback();
	});

	serviceInstance.start();
	module.exports = serviceInstance;
 */

var BaseService = function (params = defaultBaseServiceParams) {
	let { addOFWrapper } = params;
	var self = this;
	fixParams(params);
	this.name = params.name ? params.name : window.name;
	this.RouterClient = RouterClient;
	this.Logger = Logger;
	this.isRouterInitialized = false;
	this.isWindowConnected = false;
	this.addNeededServices = function (arr) {
		console.warn(`addNeededServices was deprecated in Finsemble 2.0.4 and will be removed in a future version. If you are using version 2.0.4 or higher, your service may start before the dependencies are ready.

		Instead, pass dependencies into your baseService.
		Example:
		\`myService.prototype = new baseService({
			startupDependencies: {
				services: ["dockingService", "authenticationService"],
				clients: ["launcherClient", "storageClient"]
			}
		});\``);
	};
	this.addNeededClients = function (arr) {
		console.warn(`addNeededClients was deprecated in Finsemble 2.0.4 and will be removed in a future version. If you are using version 2.0.4 or higher, your service may start before the dependencies are ready.

		Instead, pass dependencies into your baseService.
		Example:
		\`myService.prototype = new baseService({
			startupDependencies: {
				services: ["dockingService", "authenticationService"],
				clients: ["launcherClient", "storageClient"]
			}
		});\``);
	};
	this.parentUuid; // initialized from custom data and used in sendToParent -- the parent's UUID
	this.startupDependencies = params.startupDependencies;
	this.shutdownDependencies = params.shutdownDependencies;
	this.onlineClients = [];
	this.onlineServices = {};
	this.__parent = null; //Should be service manager
	this.clients = [];
	this.wrapOFCalls = addOFWrapper; // default is true, but use parameter value if passed in
	//if the `start()` method is called, this is flipped to false. It's set to true once `debugServiceDelay` has been satisifed.
	this.waitedLongEnough = true;
	/**
  * Service status
  * @type {s}
  */
	this.status = "Offline"; //The services status
	this.onBaseServiceReadyCB = null;
	this.setOnConnectionCompleteCB = null;

	function setServiceOnline() {
		Logger.system.log("APPLICATION LIFECYCLE:STARTUP:SERVICE ONLINE", self.name, self.startTimer);
		RouterClient.transmit("Finsemble.ServiceManager.online", { serviceName: self.name }); // notify service manager
		self.status = "ServiceOnline";
	}

	// Transmit online to parent
	this.transmitOnLine = function () {
		Logger.system.debug("APPLICATION LIFECYCLE:STARTUP:BaseService transmitOnLine", self.name);
		self.status = "TransitioningToServiceOnline"; // must change from offline here; otherwise race condition waiting to call setServiceOnline
		self.RouterClient.ready(function () {
			if (self.onBaseServiceReadyCB) {
				// if inheriting service provided a "connection complete" callback, then invoke before sending online
				self.onBaseServiceReadyCB(function () {
					setServiceOnline();
				});
			} else if (self.setOnConnectionCompleteCB) {
				// if inheriting service provided a "connection complete" callback, then invoke before sending online
				self.setOnConnectionCompleteCB(function () {
					setServiceOnline();
				});
			} else {
				setServiceOnline();
			}
		});
	};

	// Check if can set service online. Online only happens when all servicesStillNeeded are online.
	// Also, the online is only sent to the parent once all of the 'onBaseServiceReadyCB' functions are complete (if set)
	this.isReadyToSetOnline = function () {
		if (self.waitedLongEnough && self.status === "Offline") {
			self.transmitOnLine();
		}
	};

	this.onBaseServiceReady = function (func) {
		// used by the inheriting service to know where baseService init is complete
		if (self.status === "Offline") {
			self.onBaseServiceReadyCB = func;
		} else {
			func();
		}
	};

	this.setOnConnectionComplete = function (func) {
		// used by the inheriting service to know where baseService init is complete
		Logger.system.warn("setOnConnectionComplete is deprecated. It will be removed in the next major version. Use 'onBaseServiceReady' instead.");
		this.onBaseServiceReady(func);
	};

	this.initializeListeners = function (service) {

		// this section adjust the timeout timer when startup is held up because of authentication
		RouterClient.subscribe("AuthorizationState", function (err, response) {
			var notifyData = response.data;
			Logger.system.debug("SERVICE LIFECYCLE:AuthorizationState Notification", notifyData);
			if (self.status !== "ServiceOnline") {
				if (notifyData.state === "starting") {
					Logger.system.info("SERVICE LIFECYCLE:AuthorizationState Starting -- Stopping Timeout Timer", self.startTimer);
				} else if (notifyData.state === "done") {
					Logger.system.info("SERVICE LIFECYCLE:AuthorizationState Done - Restarting Timeout Timer");
				}
			}
		});
	};
};

BaseService.prototype.sendOnlineToParent = function () {
	this.transmitOnLine();
};

//This will be set to true after the debugServiceDelay is met. Defaults to 0, but devs can up it if they need to jump in and add breakpoints.
BaseService.prototype.waitedLongEnough = false;
/**
 * Delays startup based on information passed in from the serviceManager.  The delay value come from config setting: debugServiceDelay
 * @private
 */
BaseService.prototype.delayStartup = function (done) {
	// It takes a few seconds for the developers tools to show up. We can easily
	// pass by startup breakpoints in this interim, so we stall for 10 seconds
	// to give the dev tools enough time to materialize, and maybe just enough
	// time for the developer to slide a breakpoint into place!
	var self = this;
	Logger.system.debug("BaseService.start.delayStartup");
	fin.desktop.Window.getCurrent().isShowing(isShowing => {
		Logger.system.debug("showDevConsoleOnVisible", self.customData.showDevConsoleOnVisible);
		Logger.system.debug("isShowing", isShowing);
		if (isShowing && self.customData.showDevConsoleOnVisible) {
			fin.desktop.System.showDeveloperTools(fin.desktop.Application.getCurrent().uuid, fin.desktop.Window.getCurrent().name, function () {
				let timeoutDuration = self.customData.debugServiceDelay || 0;
				if (timeoutDuration > 0) {
					Logger.system.log("APPLICATION LIFECYCLE:STARTUP:SERVICE LIFECYCLE:========>DELAYING STARTUP BY " + timeoutDuration + " Milliseconds<========");
					setTimeout(done, timeoutDuration);
				} else {
					done();
				}
			});
		} else {
			Logger.system.debug("APPLICATION LIFECYCLE:STARTUP:SERVICE:BaseService.start.delayStartup done");
			done();
		}
	});
};

BaseService.prototype.listeners = {};

BaseService.prototype.addEventListener = function (listenerType, callback) {
	if (!this.listeners[listenerType]) {
		this.listeners[listenerType] = [];
	}
	this.listeners[listenerType].push(callback);
};

/**
 * A convenience function.
 */
BaseService.prototype.onShutdown = function (cb) {
	this.addEventListener("onShutdown", cb);
};

/**
 * When the application sends out a shutdown message, this function is invoked. It iterates through any registered cleanup methods. When all of them have finished (or 10 seconds elapses), it sends a response to the application saying that it's completed cleanup (`shutdownComplete`, below).
 * @private
*/
BaseService.prototype.handleShutdown = function (err, message) {
	var self = this;
	function handleShutdownAction(handler, done) {
		let cleanup = async.asyncify(handler);
		cleanup = async.timeout(cleanup, self.customData.manifest.finsemble.shutdownTimeout || 10000); // services may need some time to cleanup (depends on service)
		cleanup(null, done);
	}
	function shutdownComplete(err, data) {
		if (err) {
			Logger.system.error(err);
		}
		self.shutdownComplete();
	}
	if (this.listeners.onShutdown) {
		this.RouterClient.transmit("Application.shutdownResponse", {
			waitForMe: true,
			name: this.name
		});

		async.each(this.listeners.onShutdown, handleShutdownAction, shutdownComplete);
	} else {
		this.RouterClient.transmit("Application.shutdownResponse", {
			waitForMe: false,
			name: this.name
		});
		self.shutdownComplete();
	}
};
/**
 * Fired when all cleanup methods have been finished.
 * @private
*/
BaseService.prototype.shutdownComplete = function () {
	Logger.system.info(`"APPLICATION LIFECYCLE:SHUTDOWN:SERVICE SHUTDOWN: ${this.name}`);
	this.RouterClient.transmit("Finsemble.serviceOffline", {
		name: this.name,
		uuid: fin.desktop.Application.getCurrent().uuid
	});

	this.RouterClient.disconnectAll();
};
BaseService.prototype.checkStartupDependencies = function () {
	FSBLDependencyManager.startup.checkDependencies();
};
BaseService.prototype.parentUuid = fin.desktop.Application.getCurrent().uuid;
/**
* Starts the service.
 * @private
*/
BaseService.prototype.start = function () {
	var service = this;
	Logger.system.debug(`${this.name} starting`);
	// Wrap OF functions that have callbacks to insure all callbacks invoked;
	// since class/constructor, must wrap at prototype level (otherwise prototypes won't be picked up)
	if (this.wrapOFCalls) {
		Logger.system.log("BaseService wrapping OF calls");
		wrapCallbacks(fin.desktop.Application.prototype);
		wrapCallbacks(fin.desktop.Window.prototype);
		wrapCallbacks(fin.desktop.System); // not a class so done pass in prototype
	} else {
		Logger.system.log("BaseService not wrapping OF calls");
	}

	async.series([init, onRouterReady, cacheCustomData, service.delayStartup.bind(service), readyToGo]);

	function cacheCustomData(done) {
		Logger.system.debug("BaseService.start.setParentUUID");
		fin.desktop.Window.getCurrent().getOptions(opts => {
			BaseService.prototype.customData = opts.customData;
			BaseService.prototype.parentUuid = opts.customData.parentUuid;
			done();
		});
	}

	function init(done) {
		Logger.system.debug("APPLICATION LIFECYCLE:STARTUP:SERVICE:BaseService.start.init");
		service.waitedLongEnough = false;
		service.__parent = window.opener;
		done();
	}

	function onRouterReady(done) {
		service.RouterClient.ready(function () {
			window.addEventListener("beforeunload", service.RouterClient.disconnectAll);
			Logger.system.debug("APPLICATION LIFECYCLE:STARTUP:SERVICE:BaseService.start.onRouterReady");
			service.initializeListeners(service);
			done();
		});
	}

	function readyToGo(done) {
		Logger.system.debug("APPLICATION LIFECYCLE:STARTUP:SERVICE:BaseService.start.readyToGo");
		console.log(performance.now(), "ReadyToGo called");
		service.waitedLongEnough = true;
		service.isReadyToSetOnline = service.isReadyToSetOnline.bind(service);
		service.handleShutdown = service.handleShutdown.bind(service);
		console.log("Startup Dependencies", service.name, service.startupDependencies);
		console.log("Shutdown Dependencies", service.name, service.shutdownDependencies);
		let dependency = FSBLDependencyManager.startup.waitFor(service.startupDependencies, service.isReadyToSetOnline);
		FSBLDependencyManager.shutdown.waitFor(service.shutdownDependencies, service.handleShutdown);

		//
		dependency.on("err", err => {
			Logger.system.error(err);
		});
		RouterClient.transmit(`${fin.desktop.Window.getCurrent().name}.onSpawned`, {});
		done();
	}
};

module.exports = BaseService;

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\services\\baseService.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\services\\baseService.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0)))

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
            (typeof self !== "undefined" && self) ||
            window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(76);
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                       (typeof global !== "undefined" && global.setImmediate) ||
                       (this && this.setImmediate);
exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                         (typeof global !== "undefined" && global.clearImmediate) ||
                         (this && this.clearImmediate);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var Logger = __webpack_require__(2);

const ADD_STACKTRACE = false; // if true add stacktrace data to errors (this is expensive so only enable when needed)

/**
 * Wraps all child functions that have callbacks to insure callbacks are actually called.
 * @param {object} parentObject object with child functions to wrap if they have callbacks
 * @param {object=} params optional parameters
 * @param {string=} [params.successCallbackName="callback"] function's callback signature, defaults to "callback"
 * @param {string=} [params.errorCallbackName="errorCallback"] function's error callback signature, defaults to "errorCallback";
 * @param {number=} [params.noResponseTimeout=10000] no-response timeout value in milliseconds
 * @param {number=} [params.verySlowTimeout=2000]  very-slow-response timeout value in milliseconds
 * @param {number=} [params.slowTimeout=1000] slow-response timeout in milliseconds
 * @private
*/
function wrapCallbacks(parentObject, params) {
	// variable number of parameters
	params = params || {};
	var successCallbackName = params.successCallbackName || "callback";
	var errorCallbackName = params.errorCallbackName || "errorCallback";
	var noResponseTimeout = params.noResponseTimeout || 10000;
	var verySlowTimeout = params.verySlowTimeout || 2000;
	var slowTimeout = params.slowTimeout || 1000;

	/**
  * Returns an array of a function's argument names from the function's signiture
  * @param {object} func the function
  * @returns {array} the array of parameter names (i.e. strings)
  * @private
 */
	function getSignatureFromDefinition(func) {
		const STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
		const ARGUMENT_NAMES = /([^\s,]+)/g;
		var childPropertyStr = func.toString().replace(STRIP_COMMENTS, ""); // this get the function's signature
		var result = childPropertyStr.slice(childPropertyStr.indexOf("(") + 1, childPropertyStr.indexOf(")")).match(ARGUMENT_NAMES);
		if (result === null) {
			result = [];
		}
		return result;
	}

	/**
  * Returns function-signature overrides
  * @returns {Object} returns object where function name is key and value is an array of parameters (i.e. the signature)
  * @private
 */
	function getSignatureOverrides() {
		var overrides = {};

		// list of hardcoded overrides to address misc problems
		overrides["launchExternalProcess"] = ["options", "callback", "errorCallbackName"];

		return overrides;
	}

	/**
  * Returns signature for specific function
  * @param {string} func the function whose signature will be returned
  * @returns {Array} array of parameter names (i.e. the signature)
  * @private
 */
	function getFunctionSignature(func) {
		var signature;
		var sigOverrides = getSignatureOverrides(func); // special exceptions

		if (func.name in sigOverrides) {
			// use override if it exists
			signature = sigOverrides[func.name];
		} else {
			signature = getSignatureFromDefinition(func); // else parse signature from function's toString()
		}
		Logger.system.verbose(`Signature for ${func.name}: ${signature}`);
		return signature;
	}

	/**
  * Add callback timers; a timer fires if callback wasn't invoked within time interval; multiple timers provide better diagnostics
  * @param {object} functionName the function name for diagnostics
  * @param {object} traceData the called function's trace data for diagnostics
  * @returns {objects} object containing all the timer IDs (so can be cleared if needed)
  * @private
 */
	// add callback timers; a timer fires if callback wasn't invoked within time interval; multiple timers provide better diagnostics
	function addTimeouts(functionName, traceData) {
		var timers = {};
		if (noResponseTimeout) {
			timers.noResponseTimeoutID = setTimeout(function () {
				Logger.error(`Callback Timeout: ${noResponseTimeout} millisecond timeout waiting on ${functionName}`, traceData);
			}, noResponseTimeout);
		}

		if (verySlowTimeout) {
			timers.verySlowTimeoutID = setTimeout(function () {
				Logger.warn(`Callback Timeout: ${verySlowTimeout} millisecond timeout waiting on ${functionName}`, traceData);
			}, verySlowTimeout);
		}

		if (slowTimeout) {
			timers.slowTimeoutID = setTimeout(function () {
				Logger.debug(`Callback Timeout: ${slowTimeout} millisecond timeout waiting on ${functionName}`, traceData);
			}, slowTimeout);
		}
		return timers;
	}

	/**
  * Remove callback timers
  * @param {object} timers object containing all the timer IDs (so can be cleared)
  * @private
 */
	function removeTimeouts(timers) {
		Logger.system.debug("wrapCallbacks Clearing Timers:", timers);
		clearTimeout(timers.noResponseTimeoutID);
		clearTimeout(timers.verySlowTimeoutID);
		clearTimeout(timers.slowTimeoutID);
	}

	/**
  * Verify input function has a callback parameter at the give argument index; if so wrap it with new callback that clears the timers
  * @param {string} functionName the number of the function (for diagnostics)
  * @param {array} args the functions arguments array
  * @param {number} callbackIndex index within args that may have the callback (if its passed in)
  * @param {object} timers the object holding all the timers so they can be cleared when callback is invoked
  * @returns {boolean} true if the callback was wrapped
  * @private
 */
	function verifyAndWrapOneCallback(functionName, args, callbackIndex, timers) {
		var isWrapped = false;
		if (callbackIndex > -1 && args.length >= callbackIndex && typeof args[callbackIndex] === "function") {
			// confirm the callback parameter passed in
			let originalCB = args[callbackIndex]; // save original CB to use within replacement CB
			// this is the wrap callback function that clears timers then calls the orignal callback
			let successReplacementCB = function wrapCallback() {
				Logger.system.verbose(`In Wrap Callback ${functionName}`);
				removeTimeouts(timers);
				if (originalCB) {
					originalCB.apply(null, arguments); // invoke original callback
				}
			};
			args[callbackIndex] = successReplacementCB;
			isWrapped = true;
		}
		return isWrapped; // return true if callback replaced above
	}

	/**
  * Walk though each child properties of an object and wrap any function property with callbacks
  * @param {object} parentObject the parent object
  * @private
 */
	function wrapPropertiesWithCallbacks(parentObject) {
		for (let childProperty in parentObject) {
			if (typeof parentObject[childProperty] === "function") {
				Logger.system.verbose(`Iterating through function ${childProperty}`);

				let originalFunction = parentObject[childProperty]; // save the original function before overwriting it

				let argNamesFromSignature = getFunctionSignature(originalFunction);
				let successCallbackIndex = argNamesFromSignature.indexOf(successCallbackName); // find the typical argument location of the callback
				let errorCallbackIndex = argNamesFromSignature.indexOf(errorCallbackName); // find the typical argument location of the error callback

				if (successCallbackIndex > -1 || errorCallbackIndex > -1) {
					// if a callback defined in function definition
					Logger.system.verbose(`Wrapping ${successCallbackName} and/or ${errorCallbackName} in ${childProperty}: ${originalFunction}`);

					// this is the actual wrap function, replacing the original function at run time
					parentObject[childProperty] = function wrapFunction() {
						let args = Array.from(arguments); // copy arguments into real array so can manipulate
						let traceData = "Wrapper call trace disabled for efficiency";

						if (ADD_STACKTRACE) {
							traceData = new Error().stack.replace("Error", "Wrapper Callback Trace"); // trace data for diagnostics
						}

						let timers = addTimeouts(childProperty, traceData); // start the timers now (will clear in callbacks below)

						let isWrapped1 = verifyAndWrapOneCallback(childProperty, args, successCallbackIndex, timers);
						let isWrapped2 = verifyAndWrapOneCallback(childProperty, args, errorCallbackIndex, timers);

						if (!isWrapped1 && !isWrapped2) {
							// if no callback was wrapped then immediately clear the timers
							removeTimeouts(timers);
						}

						originalFunction.apply(this, args); // after executing the above patch function, now call the original function
					};
				}
			}
		}
	}

	/**** wrapCallbacks main ****/
	console.log("WrapCallbacks Start", parentObject);
	if (!("wrapCallbacksDone" in parentObject)) {
		// only wrap children if hasn't already been wrapped
		wrapPropertiesWithCallbacks(parentObject);
		parentObject.wrapCallbacksDone = true; // annotate object so only wrapped once
	}
}

module.exports = wrapCallbacks;

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\common\\wrapCallbacks.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\common\\wrapCallbacks.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0)))

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/*!
* Copyright 2017 by ChartIQ, Inc.
* All rights reserved.
*/
var StorageClient = __webpack_require__(78);
var WorkspaceClient = __webpack_require__(87);
var util = __webpack_require__(6);
var System = __webpack_require__(46);
var BaseClient = __webpack_require__(9);
var Logger = __webpack_require__(2);
var Validate = __webpack_require__(7); // Finsemble args validator
var deepEqual = __webpack_require__(88);
const async = __webpack_require__(12);
//var finWindow;
var finsembleWindow;
window.deepEqual = deepEqual;
/**
 *
 * Helper to see if element has a class.
 * @param {HTMLElement} el
 * @param {String} className
 * @private
 * @return {HTMLElement}
 */
function hasClass(el, className) {
	if (el.classList) {
		return el.classList.contains(className);
	} else {
		return !!el.className.match(new RegExp("(\\s|^)" + className + "(\\s|$)"));
	}
}

/**
 * Adds a class to an HTML element
 * @param {HTMLElement} el
 * @param {String} className
 * @private
 */
function addClass(el, className) {
	if (el.classList) {
		el.classList.add(className);
	} else if (!hasClass(el, className)) {
		el.className += " " + className;
	}
}

/**
 *
 * Removes class from HTML element
 * @param {HTMLElement} el
 * @param {String} className
 * @private
 */
function removeClass(el, className) {
	if (el.classList) {
		el.classList.remove(className);
	} else if (hasClass(el, className)) {
		var reg = new RegExp("(\\s|^)" + className + "(\\s|$)");
		el.className = el.className.replace(reg, " ");
	}
}

/**
 *
 *@introduction
  <h2>Window Client</h2>
  ----------
 * The Window Client is primarily responsible for managing the `windowState` (the window's bounds) and `componentState` (data inside of your component). 
 * It also injects the **window title bar** control, which contains controls for minimizing, maximizing, closing, and restoring your window. 
 * The reference below is provided in case you'd like to manually trigger events.
 *
 * This is the Window Client API reference. 
 * If you're looking for information about the window title bar, please see the [Presentation Component tutorial](tutorial-understandingUIComponents.html#window-title-bar) for more information.
 *
 * @hideConstructor true
 * @param {object} params
 * @constructor
 * @returns {WindowClient}
 */
function WindowClient(params) {
	Validate.args(params, "object=") && params && Validate.args2("params.onReady", params.onReady, "function=");

	const WORKSPACE_CACHE_TOPIC = "finsemble.workspace.cache"; // window data stored in this topic for access by workspace service


	/** @alias WindowClient# */
	BaseClient.call(this, params);

	var self = this;
	//We store the options that the window is created with in this property.
	/**
 * A copy of the `finWindow`'s options value. This is where we store information like monitorDimensions, initialization information, and any other data that needs to be passed from the parent application into the created window.
 * @type WindowClient
 */
	this.options = {};
	//The hash we use to save data with.
	this.windowHash = "";
	//Window's title.
	this.title = null;
	//This is the bottom edge of the toolbar. The window's position will be offset by this much.
	//@todo move this value to a config.
	this.toolbarBottom = 40;
	//default value. The window assigns the containers it cares about before starting.
	this.containers = [];
	//window state for restoration purposes.
	this.componentState = {};
	//This can be either normal, minimized, or maximized.
	this.windowState = "normal";
	// This gets set to true if the window has a header
	this.hasHeader = false;
	/**
  * This function is fired every time the window's bounds change. It saves the window's position.
  * @param {object} bounds
  * @private
  */
	var onWindowRestored = function () {
		self.updateHeaderState("Maximize", { hide: false });
	};
	var onWindowMaximized = function () {
		self.updateHeaderState("Maximize", { hide: true });
	};
	var onWindowBlurred = function () {
		if (self.hasHeader) {
			self.setActive(false);
		}
	};
	var onWindowFocused = function () {
		if (self.hasHeader) {
			self.setActive(true);
		}
	};
	var onMinimizedRestored = function () {
		self.routerClient.transmit("DockingService.windowRestored", finsembleWindow.name);
		finsembleWindow.removeEventListener("restored", onMinimizedRestored);
	};
	var onWindowMinimized = function () {
		self.routerClient.query("DockingService.windowMinimized", finsembleWindow.name, Function.prototype);
		finsembleWindow.addEventListener("restored", onMinimizedRestored);
	};
	/**
  * Closes Window.
  * @param {boolean} removeFromWorkspace whether to remove the window from the workspace.
  * Defaults are to remove the window from the workspace if the user presses the X button, but not if the window is closed via an app-level request (e.g., we need to switch workspaces, so all windows need to close).
  * @example
  *	//Close window and remove from workspace (e.g., user closes the window).
  *	FSBL.Clients.WindowClient.close(true);
  *	//Close window and keep in workspace (e.g., application requests that all windows close themselves).
  *	FSBL.Clients.WindowClient.close(false);
  */
	var onClose = function (params, cb) {
		if (!params) {
			params = { removeFromWorkspace: true, closeWindow: true };
		}
		let { removeFromWorkspace, closeWindow } = params;
		if (typeof params === "boolean") {
			removeFromWorkspace = params;
		}
		if (typeof closeWindow === "undefined") {
			closeWindow = true;
		}

		if (!finsembleWindow) finsembleWindow = self.finsembleWindow;
		//if (!finWindow) finWindow = fin.desktop.Window.getCurrent(); //TODO: check if we already have this.finsembleWindow?? why are we checking here? why is this not a class method?
		//hide window, then do cleanup. This makes close feel more responsive.
		finsembleWindow.hide();
		let bounds = {
			left: self.options.defaultLeft,
			width: self.options.defaultWidth,
			height: self.options.defaultHeight,
			top: self.options.defaultTop
		};
		self.saveWindowBounds(bounds, false);
		Validate.args(removeFromWorkspace, "boolean");
		Logger.system.log("WINDOW LIFECYCLE:onClose Invoked");
		self.removeFinWindowEventListeners();
		if (removeFromWorkspace === true) {
			WorkspaceClient.removeWindow({
				name: finsembleWindow.name
			}, function (err, response) {
				if (cb) {
					cb();
				}
				if (closeWindow) {
					self.deregisterWithDockingManager(removeFromWorkspace);
					self.routerClient.disconnectAll();
					finsembleWindow.close(true, function (err) {
						if (err) {
							console.log("finsembleWindow.close err", err);
						} else {
							console.log("finsembleWindow.close success");
						}
					});
				}
			});
		} else {
			if (cb) {
				cb();
			}
			//on shutdown, we don't close the window -- finsemble handles that, not the windowClient. TODO - this looks like a dupe.
			if (closeWindow) {
				self.deregisterWithDockingManager(removeFromWorkspace);
				self.routerClient.disconnectAll();
				finsembleWindow.close(true, function (err) {
					if (err) {
						console.log("finsembleWindow.close err", err);
					} else {
						console.log("finsembleWindow.close success");
					}
				});
			}
		}
	};
	//This is here so that the method can be accessed publicly.
	this.close = onClose;
	/**
  * @private
  * @returns {windowHash}
  */
	this.getWindowHash = function () {
		return self.windowHash;
	};

	/**
  * Retrieves the window's title.
  * @returns {String} title
  * @example
  * var windowTitle = FSBL.Clients.WindowClient.getWindowTitle();
  */
	this.getWindowTitle = function () {
		return this.title;
	};

	/**
  * This function retrieves the dimensions of the monitor that the window is on. It's currently used in the {@link launcherClient}.
  * @param {function} callback
  * @private
  * @todo  this is bad. The monitor can change if the window is moved. Use util monitor functions instead. Instead, use the util style getMyMonitor, and keep monitor dimensions up to date statically at FSBL level with a listener on launcher (unclaimedRect).
  */
	this.retrieveMonitorDimensions = function (callback) {
		util.getMonitor(null, function (monitorInfo) {
			self.options.monitorDimensions = monitorInfo.monitorRect;
			if (callback) {
				callback();
			}
		});
	};
	/**
  * Listens for changes in the hash and persists the change to the url property, and then saves it.
  * @private
  */
	this.listenForHashChanges = function () {
		//There's no pushState event in the browser. This is a monkey patched solution that allows us to catch hash changes. onhashchange doesn't fire when a site is loaded with a hash (e.g., salesforce).
		(function (history) {
			var pushState = history.pushState;
			history.pushState = function (state) {
				if (typeof history.onpushstate === "function") {
					history.onpushstate({ state: state });
				}
				pushState.apply(history, arguments);
				self.options.url = window.top.location.toString();
				StorageClient.save({ topic: WORKSPACE_CACHE_TOPIC, key: self.windowHash, value: self.options });
				return;
			};
		})(window.history);

		window.addEventListener("hashchange", () => {
			self.options.url = window.top.location.toString();
			StorageClient.save({ topic: WORKSPACE_CACHE_TOPIC, key: self.windowHash, value: self.options });
		});
	};

	/**
  * Gets the options from the window on startup and caches them on the object.
  * @private
  * @param {function} callback
  */
	this.getInitialOptions = function (callback) {
		finsembleWindow.getOptions(function (err, options) {
			if (options.customData && options.customData.manifest) {
				//should not persist the manifest.
				delete options.customData.manifest;
			}
			Logger.system.verbose("WindowClient:getting options", options);
			self.options = Object.assign(self.options, options);
			callback();
		});
	};
	/**
  * Gets the bounds for the window on startup and saves them to the workspace.
  * @private
  * @param {function} callback
  */
	this.cacheInitialBounds = function (callback) {
		self.cacheBounds(bounds => {
			try {
				if (!self.options.customData.foreign.components["Window Manager"].persistWindowState) {
					return callback();
				}
				self.options.url = window.top.location.toString();
				self.saveWindowBounds(bounds, false);
			} catch (e) {
				Logger.system.warn("customData.foreign,components[\"Window Manager\" is undefined");
			}
			callback();
		});
	};
	/**
  * Sets initial state for the window. This data is modified on subsequent saves.
  * @param {function} callback
  * @private
  */
	this.setinitialWindowBounds = function (callback) {
		Logger.system.warn("`FSBL.Clients.WindowClient.setInitialWindowBounds is deprecated and will be removed in a future version of finsemble. Use 'getInitialOptions' and 'cacheInitialBounds' instead.");
		async.parallel([self.getInitialOptions.bind(self), self.cacheInitialBounds.bind(self)], callback);
	};

	/**
  * Returns windowBounds as of the last save.
  * @returns {object}
  * @private
  */
	this.getWindowBounds = function () {
		return {
			top: self.options.defaultTop,
			left: self.options.defaultLeft,
			width: self.options.defaultWidth,
			height: self.options.defaultHeight
		};
	};

	/**
  *
  * Saves the window's state. Rarely called manually, as it's called every time your window moves.
  * @param {Object} bounds optional param.
  * @example <caption>The code below is the bulk of our listener for the <code>bounds-changed</code> event from the openFin window. Every time the <code>bounds-changed</code> event is fired (when the window is resized or moved), we save the window's state. The first few lines just prevent the window from being dropped behind the toolbar.</caption>
  *finWindow.addEventListener('disabled-frame-bounds-changed', function (bounds) {
  * 	if (bounds.top < 45) {
  *		finWindow.moveTo(bounds.left, 45);
  *		return;
  *	}
  *	self.saveWindowBounds(bounds);
  *});
  */
	this.saveWindowBounds = function (bounds, setActiveWorkspaceDirty) {
		Logger.system.debug("WINDOW LIFECYCLE:SavingBounds:", bounds, "setActiveWOrkspaceDirty", setActiveWorkspaceDirty);
		if (typeof setActiveWorkspaceDirty === "undefined") {
			setActiveWorkspaceDirty = false;
		}
		Validate.args(bounds, "object") && Validate.args2("bounds.top", bounds.top, "number");
		if (!bounds) {
			return;
		}
		// openfin looks at defaultTop, terry looks at top. for some reason, when the app started fresh, the window's position was being overwritten. We also were saving the position on `defaultTop`/`defaultLeft`, and the launcherService wasn't looking for that. We may be able to get rid of the first assignment on the left, but I want terry to fully look at this.
		self.options.defaultTop = self.options.top = Math.round(bounds.top);
		self.options.defaultLeft = self.options.left = Math.round(bounds.left);
		self.options.defaultWidth = self.options.width = Math.round(bounds.width);
		self.options.defaultHeight = self.options.height = Math.round(bounds.height);
		try {
			if (!self.options.customData.foreign.components["Window Manager"].persistWindowState) {
				return;
			}
		} catch (e) {
			//prop doesn't exist.
			return;
		}

		StorageClient.save({ topic: WORKSPACE_CACHE_TOPIC, key: self.windowHash, value: self.options });
		if (setActiveWorkspaceDirty) {
			Logger.system.log("APPLICATION LIFECYCLE: Setting Active Workspace Dirty: Window Moved");
			self.dirtyTheWorkspace();
		}
	};

	/**
  * This event is fired when a window is resized or moved.
  * @private
  */
	this.listenForBoundsChanged = function () {
		window.addEventListener("beforeunload", () => {
			if (self.options.customData && self.options.customData.foreign && self.options.customData.foreign.services && self.options.customData.foreign.services.launcherService && self.options.customData.foreign.services.launcherService.inject) {
				self.routerClient.transmit("Launcher.windowReloading", {
					uuid: this.options.uuid,
					name: this.options.name,
					url: window.location.toString()
				});
			}
		});
	};

	/**
  * Minmizes window.
  * @param {function} [cb] Optional callback
  * @example
  * FSBL.Clients.WindowClient.minimize();
  */
	this.minimize = function (cb) {
		this.cacheBounds(function () {
			finsembleWindow.minimize(function (err) {
				if (!err) {
					self.windowState = "minimized";
				} else {
					Logger.system.error("WindowClient:minimize", err);
				}
				if (cb) {
					cb(err);
				}
			});
		});
	};

	/**
  * Sets whether window is always on top.
  * @param {function} [cb] Optional callback
  * @example
  * FSBL.Clients.WindowClient.setAlwaysOnTop(true);
  */
	this.setAlwaysOnTop = function (alwaysOnTop, cb) {
		finsembleWindow.updateOptions({ alwaysOnTop: alwaysOnTop }, () => {
			self.options.alwaysOnTop = alwaysOnTop;
			if (cb) cb();
		});
	};

	/**
  * Minmizes window along with all windows docked to it.
  * @param {function} [cb] Optional callback
  * @example
  * FSBL.Clients.WindowClient.minimizeWithDockedWindows();
  * @private
  */
	this.minimizeWithDockedWindows = this.minimize;

	/**
  * Restores window from a maximized state.
  * @param {function} [cb] Optional callback
  * @example
  * FSBL.Clients.WindowClient.restore();
  */
	this.restore = function (cb) {
		finsembleWindow.getState((err, windowState) => {

			if (windowState === "minimized") {
				finsembleWindow.restore(function (err) {
					if (!err) {
						self.windowState = "normal";
					} else {
						Logger.system.error("WindowClient:restore", err);
					}
					if (cb) {
						cb(err);
					}
				});
			} else {
				self.options.defaultLeft = self.options.cachedLeft;
				self.options.defaultTop = self.options.cachedTop;
				self.options.defaultWidth = self.options.cachedWidth;
				self.options.defaultHeight = self.options.cachedHeight;
				self.routerClient.query("DockingService.restoreFromMaximize", {
					name: finsembleWindow.name
				}, function (err, response) {
					if (cb) {
						cb(err);
					}
				});
			}
		});
	};

	this.cacheBounds = function (cb) {
		this.getBounds((err, bounds) => {
			this.options.cachedLeft = this.options.defaultLeft = bounds.left;
			this.options.cachedTop = this.options.defaultTop = bounds.top;
			this.options.cachedWidth = this.options.defaultWidth = bounds.width;
			this.options.cachedHeight = this.options.defaultHeight = bounds.height;
			if (cb) {
				cb(bounds);
			}
		});
	};

	/**
  * Maximizes the window. Also takes into account the application toolbar.
  * @param {function} cb Optional callback
  * @todo, when fixed components are a thing, make sure that maximize doesn't sit on top of them either.
  * @example
  * FSBL.Clients.WindowClient.maximize();
  */
	this.maximize = function (cb) {
		var self = this;
		this.cacheBounds(function () {
			self.routerClient.query("DockingService.maximizeWindow", {
				name: finsembleWindow.name,
				windowIdentifier: finsembleWindow.windowIdentifier
			}, function (err, response) {
				self.options.defaultLeft = response.data.left;
				self.options.defaultTop = response.data.top;
				self.options.defaultWidth = response.data.width;
				self.options.defaultHeight = response.data.height;

				self.windowState = "maximized";
				if (cb) {
					return cb(err);
				}
			});
		});
	};
	/**
  * FinWindow destructor (more or less). Removes all of the listeners that we added when the window was created.
  */
	this.removeFinWindowEventListeners = function () {
		finsembleWindow.removeEventListener("maximized", onWindowMaximized);
		finsembleWindow.removeEventListener("restored", onWindowRestored);
		finsembleWindow.removeEventListener("blurred", onWindowBlurred);
		finsembleWindow.removeEventListener("focused", onWindowFocused);
		finsembleWindow.removeEventListener("close-requested", onClose);
		finsembleWindow.removeEventListener("minimized", onWindowMinimized);
	};

	/**
  * This function injects the header bar into all frameless windows that request it. This should only be used if you've decided not to use the provided <code>WindowClient.start()</code> method.
  *
  * **NOTE:** If you are using the finsemble windowTitleBar component, you do not need to call this function.
  * @private
  */
	this.injectDOM = function (headerHeight) {
		//for the aesthetics.

		if (document.getElementById("FSBLHeader")) {
			return;
		}
		var template = document.createElement("div");
		template.innerHTML = "<div id=\"FSBLHeader\"" + (headerHeight ? " style=height:" + headerHeight : "") + "></div>";
		document.body.insertBefore(template.firstChild, document.body.firstChild);
	};

	/**
  * Injects the windowTitleBar into the window.
  * @param {function} cb Callback function
  * @return {object} Reference to a RouterClient.query
  * @private
  */
	this.injectFSBL = function (params, cb) {
		//This flag is set by the launcher service. It tells us if FSBL was injected
		return self.routerClient.query("Launcher.getWindowTitleBar", { config: self.options, titleComponent: params.component }, function (err, response) {
			//Should probably switch this to a launcher client calls
			if (params.bodyMarginTop == "auto") {
				function setHeaderHeight() {
					let header = document.getElementsByClassName("fsbl-header")[0];
					if (!header) {
						//wait for header to be rendered
						return setTimeout(setHeaderHeight, 100);
					}
					let headerHeight = window.getComputedStyle(header, null).getPropertyValue("height");
					document.body.style.marginTop = headerHeight;
					if (params.bumpElements && params.bumpElements.bumpBy === "auto") {
						params.bumpElements.bumpBy = headerHeight;
						self.bumpFixedElements(params.bumpElements);
					}
				}
				setHeaderHeight();
			}
			if (cb) {
				cb(err, response);
			}
		});
	};

	/**
  * Given a field, this function retrieves app state. If no params are given you get the full state
  * @param {object} params
  * @param {string} params.field field
  *  @param {array} params.fields fields
  * @param {function} cb Callback
  * @example <caption>The example below shows how we retrieve data to restore the layout in our charts.</caption>
  * FSBL.Clients.WindowClient.getComponentState({
  *	 field: 'myChartLayout',
  *}, function (err, state) {
  *	if (state === null) {
  *		return;
  *	}
  *	importLayout(state);
  *});
  * FSBL.Clients.WindowClient.getComponentState({
  *	 fields: ['myChartLayout', 'chartType'],
  *}, function (err, state) {
  *	if (state === null) {
  *		return;
  *	}
  * 	var chartType = state['chartType'];
  *  var myChartLayout = state['myChartLayout'];
  *});
  **/
	this.getComponentState = function (params, cb) {

		if (!params) {
			params = {};
		}
		if (params.fields && !Array.isArray(params.fields)) {
			params.fields = [params.fields];
		}
		Validate.args(params, "object", cb, "function");
		//if (!finWindow) { finWindow = fin.desktop.Window.getCurrent(); } //TODO: why are we checking here??
		params.windowName = finsembleWindow.name;

		var hash = self.getContainerHash(params.windowName);

		StorageClient.get({ topic: WORKSPACE_CACHE_TOPIC, key: hash }, function (err, response) {
			var data = response;
			if (response && params.field) {
				self.componentState = data || {};
				cb(err, data[params.field]);
			} else if (params.fields) {
				var respObject = {};
				for (var i = 0; i < params.fields.length; i++) {
					if (data[params.fields[i]]) {
						respObject[params.fields[i]] = data[params.fields[i]];
					}
				}
				return cb(null, respObject);
			} else if (response) {
				return cb(null, data);
			} else {
				Logger.system.info("WindowClient:getComponentState:error, response, params", err, response, params);
				cb("Not found", response);
			}
		});
	};

	/**
  * Checks to see if this save makes the workspace 'dirty'. We use this when deciding whether to prompt the user to save their workspace.
  * @param {object} params
  * @param {string} params.field field
  * @param {string} params.windowName windowName
  * @param {function} cb Callback
  * @private
  */
	this.compareSavedState = function (params) {
		// if (!WorkspaceClient || WorkspaceClient.activeWorkspace.isDirty) { return; }
		var hash = util.camelCase(WorkspaceClient.activeWorkspace.name, finsembleWindow.name, params.windowName);
		StorageClient.get({ topic: WORKSPACE_CACHE_TOPIC, key: hash }, function (err, response) {
			Logger.system.debug("comparing saved state response:", response, "params:", params);

			/**
    * We clone the value below because:
    *
    * let's say that the user passes this in:
    * {value: undefined,
    * anotherValue: true}.
    *
    * When that is persisted to localStorage, it'll come back as {anotherValue: true}. Those two values are different. So we stringify the value coming in to compare it to what was saved.
    */
			let cleanValue = JSON.parse(JSON.stringify(params.value));
			if (!response || !deepEqual(response[params.field], cleanValue)) {
				Logger.system.debug("APPLICATION LIFECYCLE:  Setting Active Workspace Dirty: Saved state does not match current component state");
				self.dirtyTheWorkspace();
			}
		});
	};

	/**
  * Given a field, this function sets and persists app state.
  * @param {object} params
  * @param {string} [params.field] field
  * @param {array} [params.fields] fields
  * @param {function=} cb Callback
  * @example <caption>The example below shows how we save our chart layout when it changes.</caption>
  * var s = stx.exportLayout(true);
  * //saving layout'
  * FSBL.Clients.WindowClient.setComponentState({ field: 'myChartLayout', value: s });
  * FSBL.Clients.WindowClient.setComponentState({ fields: [{field:'myChartLayout', value: s }, {field:'chartType', value: 'mountain'}]);
  **/
	this.setComponentState = function (params, cb) {
		Validate.args(params, "object", cb, "function=") && Validate.args2("params.field", params.field, "string");
		params.windowName = finsembleWindow.name;
		var hash = self.getContainerHash(params.windowName);
		let fields = params.fields;

		if (params.field) {
			fields = [{
				field: params.field,
				value: params.value
			}];
		}
		for (let i = 0; i < fields.length; i++) {
			let field = fields[i];
			if (!field.field || !field.value) {
				continue;
			}
			self.componentState[field.field] = field.value;
		}
		self.compareSavedState(params);
		Logger.system.debug("COMPONENT LIFECYCLE:SAVING STATE:", self.componentState);
		StorageClient.save({ topic: WORKSPACE_CACHE_TOPIC, key: hash, value: self.componentState }, function (err, response) {
			if (cb) {
				cb(err, response);
			}
		});
	};
	/**
  * Gets containerHash given a containerId.
  * @param {string} windowName The name of the window
  * @returns {string} Hash for the window
  * @private
  */
	this.getContainerHash = function (windowName) {
		return util.camelCase(self.windowHash, windowName);
	};
	this.formGroup = function () {
		self.routerClient.transmit("DockingService.formGroup", {
			windowName: finsembleWindow.name
		});
		this.dirtyTheWorkspace();
	};
	this.dirtyTheWorkspace = function () {
		if (WorkspaceClient && !WorkspaceClient.activeWorkspace.isDirty) {
			this.routerClient.transmit("WorkspaceService.setActiveWorkspaceDirty", null, null);
		}
	};
	/**
  * This function is critical if you want docking and snapping to work. It transmits a message to the LauncherService, which registers it as a dockable window.
  *
  * **NOTE:** If you are using the finsemble windowTitleBar component, you do not need to call this function.
  * @param {object} params Parameters
  * @example
  * FSBL.Clients.WindowClient.registerWithDockingManager();
  * @private
  */
	this.registerWithDockingManager = function (params, cb) {
		var windowName = finsembleWindow.name;
		var uuid = finsembleWindow.uuid;
		self.routerClient.query("DockingService.registerWindow", {
			name: windowName,
			uuid: uuid,
			options: params || {},
			windowType: "OpenFinWindow"
		}, function () {
			Logger.system.debug("WINDOW LIFECYCLE: Docking Registration complete.");
			if (cb) {
				cb();
			}
		});
		self.routerClient.addListener("DockingService." + windowName, function (err, response) {
			if (response.data.command === "saveWindowLocation") {
				self.saveWindowBounds(response.data.bounds, true);
			} else if (response.data.command === "updateWindowLocation") {
				self.options.defaultLeft = response.data.bounds.left;
				self.options.defaultTop = response.data.bounds.top;
				self.options.defaultWidth = response.data.bounds.width;
				self.options.defaultHeight = response.data.bounds.height;
			}
		});
	};

	/**
  * This function is critical if you don't want to keep references of windows in the LauncherService after they close. It simply notifies the LauncherService that the window is no longer dockable. It's invoked when the window is closed.
  * **NOTE:** If you are using the finsemble windowTitleBar component, you do not need to call this function.
  * @param {boolean} removeFromWorkspace true to remove from workspace
  * @example
  * FSBL.Clients.WindowClient.deregisterWithDockingManager();
  * @private
  */
	this.deregisterWithDockingManager = function (removeFromWorkspace) {
		var windowName = finsembleWindow.name;
		this.routerClient.transmit("DockingService.deregisterWindow", {
			name: windowName,
			userInitiated: removeFromWorkspace
		});
	};

	/**
  * @private
  */
	this.enableHotkeys = function () {
		this.enableDevToolsHotkey();
		this.enableReloadHotkey();
	};

	/**
  * Helper function to display devtools if you disable context-menus on your chromium windows. You must call this function if you want the hotkey to work.
  * @private
  */
	this.enableReloadHotkey = function () {
		window.addEventListener("keydown", function (e) {
			if (e.keyCode === 82 && e.altKey && e.ctrlKey) {
				fin.desktop.System.clearCache({
					cache: true,
					cookies: false,
					localStorage: false,
					appcache: true,
					userData: false
				});
				window.location.reload();
			}
		});
	};

	/**
  * Helper function to display devtools if you disable context-menus on your chromium windows. You must call this function if you want the hotkey to work.
  * @private
  */
	this.enableDevToolsHotkey = function () {
		window.addEventListener("keydown", function (e) {
			if (e.keyCode === 68 && e.altKey && e.ctrlKey) {
				var application = fin.desktop.Application.getCurrent();
				application.getManifest(function (manifest) {
					var uuid = manifest.startup_app.uuid;
					var windowName = finsembleWindow.name;
					fin.desktop.System.showDeveloperTools(uuid, windowName);
				}, function (err) {
					Logger.system.error("devtools", err);
				});
			}
		});
	};

	/*
  * Bumps top-level containers down below the windowTitleBar.
  * @private
  */
	this.bumpFixedElements = function (params) {
		if (!params || !(params.absolute || params.fixed)) {
			return;
		}
		var elems = document.body.getElementsByTagName("*");
		var len = elems.length;

		for (var i = 0; i < len; i++) {
			if (elems[i].id === "FSBLHeader" || elems[i].classList.contains("fsbl-header")) {
				continue;
			}
			var style = window.getComputedStyle(elems[i], null),
			    possibleZeros = ["0", "0px", 0];

			var topStyle = style.getPropertyValue("top");

			//only target top-level fixed/absolutely positioned containers.
			if (params.absolute && elems[i].parentNode === document.body && style.getPropertyValue("position") == "absolute") {
				if (params.absolute == "all") {
					elems[i].style.top = "calc(" + topStyle + " + " + params.bumpBy + ")";
				} else if (params.absolute == "0Positioned" && possibleZeros.includes(topStyle)) {
					elems[i].style.top = params.bumpBy;
				}
			} else if (params.fixed && style.getPropertyValue("position") == "fixed") {
				if (params.fixed == "all") {
					elems[i].style.top = "calc(" + topStyle + " + " + params.bumpBy + ")";
				} else if (params.fixed == "0Positioned" && possibleZeros.includes(topStyle)) {
					elems[i].style.top = params.bumpBy;
				}
			}
		}
	};

	/*
  * Forces window to sit on top of other windows.
  * @example
  * FSBL.Clients.WindowClient.bringWindowToFront();
  */
	this.bringWindowToFront = function () {
		finsembleWindow.isShowing(function (err, isShowing) {
			if (isShowing) {
				finsembleWindow.bringToFront({ forceFocus: true }, function (err) {
					if (err) {
						Logger.system.error("WindowClient.bringWindowToFront: failure:" + err);
					} else {
						Logger.system.info("WindowClient.bringWindowToFront: success");
					}
				});
			}
		});
	};

	/**
  * The Finsemble Window Title Bar is injected if FSBLHeader: true or FSBLHeader is an object with the same items as the properties of params below as this function is in the component's config. If you want to inject the Finsemble header later, you can do so by calling this function
  * @param {object} 	params
  * @param {string} params.component Component to inject. Default is "windowTitleBar"
  * @param {object} params.bumpElements
  * @param {string} params.bumpElements.fixed Either false, "all" or "0Positioned". If all, all fixed elements are moved. 0Positioned only moves elements that have top 0. Default is all.
  * @param {string} params.bumpElements.absolute Either false, "all" or "0Positioned". If all, all fixed elements are moved. 0Positioned only moves elements that have top 0. Only applies to children of the body. Default is all.
  * @param {string} params.bumpElements.bumpBy Since version 2.3.2, default is "auto". "auto" only works if bodyMarginTop is also "auto". Default is "32px" in previous versions.
  * @param {string} params.bodyMarginTop Sets the body margin. Default is "auto" since version 2.3.2. Default is "30px" in prior versions
  * @param {string} params.forceHeaderHeight Sets a height to the main FSBLHeader div.
  */
	this.injectHeader = function (params, cb) {
		if (self.hasHeader) return;
		self.hasHeader = true;

		var defaultParams = {
			component: "windowTitleBar",
			bumpElements: {
				fixed: "all",
				absolute: "all",
				bumpBy: "auto"
			},
			bodyMarginTop: "auto",
			forceHeaderHeight: false
		};
		if (!params || params === true) {
			params = defaultParams;
		} else {
			params = Object.assign(defaultParams, params);
		}

		self.injectDOM(params.forceHeaderHeight);
		if (params.bumpElements && params.bumpElements.bumpBy !== "auto") {
			this.bumpFixedElements(params.bumpElements);
		}
		if (params.bodyMarginTop && params.bodyMarginTop !== "auto") {
			document.body.style.marginTop = params.bodyMarginTop;
		}

		async.parallel([done => {
			self.registerWithDockingManager({}, done);
		}, done => {
			self.injectFSBL(params, done);
		}], cb);
	};

	/**
  * This function is invoked inside of {@link WindowClient#start|WindowClient.start()}. It adds listeners for 'close' (when the workspace is switched), 'bringToFront', 'restore', and 'move' (used in AutoArrange).
  *
  * **NOTE:** If you are using the finsemble windowTitleBar component, you do not need to call this function.
  * @example
  * FSBL.Clients.WorkspaceClient.addWorkspaceListeners();
  * @private
  */
	this.addWorkspaceListeners = function () {

		// pubsub ensures close command can't be loss in a race condition (e.g. if close is issued while the destinateion window was reloading)
		self.routerClient.subscribe("WorkspaceService." + finsembleWindow.name, function (err, response) {
			if (response.data.state === "start") {
				// do nothing since normal startup
			} else if (response.data.state === "close") {
				// since going to close, reset this pubsub state back to default state (otherwise would keep closing);
				// note may not see local log of this outgoing publish because window is closing (but publish will go out before close)
				self.routerClient.publish("WorkspaceService." + finsembleWindow.name, { "state": "start" });

				onClose({
					removeFromWorkspace: false
				});
			} else {
				Logger.system.warn("incoming notify has unknown state", finsembleWindow.name, response.data);
			}
		});

		self.routerClient.addListener("WorkspaceService." + finsembleWindow.name, function (err, response) {
			switch (response.data.command) {
				case "bringToFront":
					self.bringWindowToFront();
					break;
				case "restore":
					self.restore();
					break;
				case "move":
					finsembleWindow.animate({
						transition: {
							position: {
								left: response.data.left,
								top: response.data.top,
								duration: 250
							}
						}, options: {}
					}, function (err) {
						if (err) {
							Logger.system.error("WindowClient:WorkspaceService: Animate failed: " + err);
						} else {
							self.routerClient.transmit("DockingService.updateWindowPositions", {});
							Logger.system.debug("WindowClient:WorkspaceService successfully moved window.");
							self.getBounds((err, bounds) => {
								self.saveWindowBounds(bounds, true);
							});
						}
					});
					break;
			}
		});
	};

	this.injectStylesheetOverride = function () {
		var node = document.createElement("style");
		node.type = "text/css";
		node.appendChild(document.createTextNode(self.options.customData.cssOverride));
		document.body.appendChild(node);
	};
	/**
  * If we spawned this openfin app from our parent application, we listen on that application for certain events that might fire _if_ our parent goes down. If the parent goes down, we want to kill its children as well.
  * @private
  */
	this.checkIfChildApp = function () {
		if (self.options && self.options.customData && self.options.customData.parentUUID && self.options.customData.parentUUID !== fin.desktop.Application.getCurrent().uuid) {
			let parent = fin.desktop.Application.wrap(self.options.customData.parentUUID);
			parent.addEventListener("crashed", onClose.bind(null, false));
			parent.addEventListener("initialized", onClose.bind(null, false));
			parent.addEventListener("out-of-memory", onClose.bind(null, false));
		}
	};
	/**
  * Adds listeners to handle hash changes and finWindow listeners.
  * @private
  * @param {function} cb
  */
	this.addListeners = function (cb = Function.prototype) {
		var self = this;

		self.listenForHashChanges();

		//FinsembleWindow listenrs
		finsembleWindow.addEventListener("close-requested", onClose);
		finsembleWindow.addEventListener("maximized", onWindowMaximized);
		finsembleWindow.addEventListener("minimized", onWindowMinimized);
		finsembleWindow.addEventListener("restored", onWindowRestored);
		// On Blur remove the border from window
		finsembleWindow.addEventListener("blurred", onWindowBlurred);
		// On focus add a border to the window
		finsembleWindow.addEventListener("focused", onWindowFocused);
		if (typeof FSBL !== "undefined") {
			FSBL.onShutdown(function () {
				Logger.system.info("WINDOW LIFECYCLE:SHUTDOWN: FSBL.onShutdown start");
				return new Promise(function (resolve) {
					Logger.system.debug("FSBL.onShutdown");
					onClose({
						removeFromWorkspace: false,
						closeWindow: false
					}, resolve);
				});
			});
		}

		cb();
	};

	/**
  * Sends a command to the header. Commands affect the header state,
  * so that the UI reflects what is going on in the component window.
  * @param {string} command The state object to set
  * @param {object} state The new state (merged with existing)
  */
	this.updateHeaderState = function (command, state) {
		if (!this.commandChannel) {
			return;
		}
		this.commandChannel(command, state);
	};

	/**
  * Establishes a command channel with a header. The WindowClient can
  * update header state via this channel.
  * @param {function} commandChannel A function callback that receives commands
  */
	this.headerCommandChannel = function (commandChannel) {
		this.commandChannel = commandChannel;
	};

	/**
  * Ejects the window from the docking group
  */
	this.ejectFromGroup = function () {
		var windowName = this.getCurrentWindow().name;
		FSBL.Clients.RouterClient.query("DockingService.leaveGroup", {
			name: windowName
		});
		this.dirtyTheWorkspace();
	};

	/**
  * This function does two things:
  *
  * 1. It sets the window's title in the windowTitleBar component, and
  * 2. It sets the title in the DOM.
  *
  * This is useful if you like to keep the window's title in sync with a piece of data (e.g., a Symbol);
  * @param {String} title Window title.
  * @todo Allow HTML or classes to be injected into the title.
  * @example <caption>The code shows how you would change your window title.</caption>
  *  FSBL.Clients.WindowClient.setWindowTitle("My Component's New Title");
  */
	this.setWindowTitle = function (title) {
		Validate.args(title, "string");
		this.title = title;
		//document.title = title;  // casuses flickering in chromium 53
		self.updateHeaderState("Main", { windowTitle: title });
	};
	/**
  * Retrieves data that was set with {@link LauncherClient#spawn}.
  * @return {object} The data or empty object if no data was set. *Note, this will never return null or undefined.*
  */
	this.getSpawnData = function () {
		if (!this.options.customData) {
			return {};
		}
		var spawnData = this.options.customData.spawnData;
		if (typeof spawnData === "undefined") {
			return {};
		}
		return spawnData;
	};

	/**
  * Returns a reference to the current window for the *component*. For most
  * components this will just return the finWindow, but for a compound component
  * it will return a CompoundWindow.
  * @returns {finWindow}
  */
	this.getCurrentWindow = function () {
		//TODO - return finsembleWindow
		return fin.desktop.Window.getCurrent();
	};

	/**
 	 * For the DOM element that has been passed in, this function returns a bounding box that is relative
 	 * to the OpenFin virtual monitor space. That is, it returns the position of the DOM element on the desktop.
 	 * @param {HTMLElement|string} element A selector or HTMLElement
 	 * @private
 	 * @todo convert to use monitor util function
 	 */
	this.getDesktopBoundingBox = function (element) {
		var el = element;
		if (typeof element === "string") {
			el = document.querySelector(element);
		}
		let box = el.getBoundingClientRect();
		let boundingBox = {
			top: this.options.defaultTop - box.top,
			left: this.options.defaultLeft + box.left,
			width: box.width,
			height: box.height
		};

		boundingBox.right = boundingBox.left + boundingBox.width;
		boundingBox.bottom = boundingBox.top + boundingBox.height;

		return boundingBox;
	};

	this.isPointInBox = function (point, box) {
		if (!box.bottom) box.bottom = box.top + box.height;
		if (!box.right) box.right = box.left + box.width;
		return point.x > box.left && point.x < box.right && point.y < box.bottom && point.y > box.top;
	};

	/**
  * Returns (via callback) true if the mouse is currently located (hovering) over the requested element.
  * @param {HTMLElement|string} element The element, or a selector, to check
  * @param {function} cb A function that returns a boolean
  * @private
  * @todo move to WindowClient
  */
	this.isMouseOverDOMElement = function (element, cb) {
		var boundingBox = this.getDesktopBoundingBox(element);
		System.getMousePosition((err, position) => {
			cb(this.isPointInBox(position, boundingBox));
		});
	};

	/**
  * Returns a window identifier for the current component.
  * @returns {windowIdentifier}
  */
	this.getWindowIdentifier = function () {
		var componentType = null;
		if (this.options.customData && this.options.customData.component) componentType = this.options.customData.component.type;
		return {
			windowName: this.options.name,
			uuid: this.options.uuid,
			componentType: componentType
		};
	};

	/**
  * Highlights the window as active by creating a border around the window.
  *
  * @param {boolean} active  Set to false to turn off activity
  */
	this.setActive = function (active) {
		if (active) {
			addClass(document.documentElement, "desktop-active");
		} else {
			removeClass(document.documentElement, "desktop-active");
		}
	};
	this.getBounds = function (cb) {
		fin.desktop.Window.getCurrent().getBounds(function (bounds) {
			cb(null, bounds);
		});
	};

	/* Stuff for tiling and tabbing */
	/**
  *
  * @param {*} params - params.windowIdentifier is required.
  * @param {*} cb
  */
	this.startTilingOrTabbing = function (params, cb) {
		FSBL.Clients.RouterClient.transmit("DockingService.startTilingOrTabbing", params);
	};

	/**
  *
  * @param {*} params - params.windowIdentifier is required.
  * @param {*} cb
  */
	this.cancelTilingOrTabbing = function (params, cb) {
		FSBL.Clients.RouterClient.transmit("DockingService.cancelTilingOrTabbing", params);
	};

	/**
  *
  * @param {*} params - params.windowIdentifier is required.
  * @param {*} cb
  */
	this.stopTilingOrTabbing = function (params = {}, cb) {
		let windowPosition = {
			left: self.options.left,
			top: self.options.top,
			height: self.options.height,
			width: self.options.width,
			right: self.options.right,
			bottom: self.options.bottom
		};
		if (!params.mousePosition) {
			return System.getMousePosition((err, position) => {
				params.mousePosition = position;
				if (!params.allowDropOnSelf && self.isPointInBox(position, windowPosition)) {
					return FSBL.Clients.RouterClient.transmit("DockingService.cancelTilingOrTabbing", params);
				}
				FSBL.Clients.RouterClient.transmit("DockingService.stopTilingOrTabbing", params);
			});
		} else {
			if (!params.allowDropOnSelf && self.isPointInBox(params.mousePosition, windowPosition)) {
				return FSBL.Clients.RouterClient.transmit("DockingService.cancelTilingOrTabbing", params);
			}
			FSBL.Clients.RouterClient.transmit("DockingService.stopTilingOrTabbing", params);
		}
	};

	/* End stuff for tiling and tabbing */

	/**
  * Private copy of getMonitorInfo from LauncherClient. We have to include it here to avoid a circular reference between LauncherClient and WindowClient.
  * @private
  */
	this.getMonitorInfo = function (params, cb) {
		util.getMyWindowIdentifier(function (myWindowIdentifier) {
			if (!params.windowIdentifier) {
				params.windowIdentifier = myWindowIdentifier;
			}
			self.routerClient.query("Launcher.getMonitorInfo", params, function (err, response) {
				if (cb) {
					cb(err, response.data);
				}
			});
		});
	};
	/**
  * Automatically resizes the height of the window to fit the full DOM.
  * @param {object} 	params
  * @param {object} params.padding
  * @param {number} params.padding.height
  * @param {number} params.padding.width
  * @param {function} [cb] Optional callback when complete
  */
	this.fitToDOM = function (params, cb) {
		var children = document.body.children;
		var element = document.getElementsByTagName("body")[0],
		    style = window.getComputedStyle(element),
		    marginTop = style.getPropertyValue("margin-top"),
		    marginBottom = style.getPropertyValue("margin-bottom");
		var margin = parseInt(marginTop, 10) + parseInt(marginBottom, 10);
		if (isNaN(margin)) margin = 0;
		var newHeight = margin;
		var newWidth = this.options.width;
		for (var i = 0; i < children.length; i++) {
			var child = children[i];

			newHeight += child.offsetHeight + margin;
			//elmMargin = parseInt(child.style.marginTop, 10) + parseInt(child.style.marginBottom, 10);
		}

		if (typeof params === "function") {
			cb = params;
			params = null;
		}
		if (params && params.padding) {
			if (params.padding.height) {
				newHeight += params.padding.height;
			}
			if (params.padding.width) {
				newWidth += params.padding.width;
			}
		}

		if (params && params.maxHeight && newHeight > params.maxHeight) {
			newHeight = params.maxHeight;
		}
		Logger.system.debug("WindowClient.FitToDOM:newHeight", newHeight, params);

		//@todo, do this statically
		this.getMonitorInfo({}, function (err, monitorInfo) {
			//Logger.system.log("updates111 in here");
			let fixBounds = true;
			if (newHeight >= monitorInfo.unclaimedRect.height) {
				newHeight = monitorInfo.unclaimedRect.height;
				fixBounds = true;
			}
			if (newWidth >= monitorInfo.unclaimedRect.width) {
				newWidth = monitorInfo.unclaimedRect.width;
				fixBounds = true;
			}

			if (fixBounds) {
				//bounds.x and bounds.y are null on mac. Not sure if they're set on windows, but this manifested itself with an error on macs that didn't resize.
				Logger.system.debug("WindowClient.FitToDOM:fixBounds", newHeight, newWidth);

				finsembleWindow.finWindow.resizeTo(newWidth, newHeight, "top-left", function () {
					finsembleWindow.getBounds(function (err, bounds) {
						if (cb) {
							cb();
						}
					});
				}, function (err) {
					Logger.system.error("Error in finsembleWindow.resizeTo", err);
				});
			} else if (cb) {
				setTimeout(cb, 0);
			}
		});
	};
	/**
  * Kicks off all of the necessary methods for the app. It
  * 1. Injects the header bar into the window.
  * 2. Sets up listeners to handle close and move requests from the appplication.
  * 3. Adds a listener that saves the window's state every time it's moved or resized.
  * @param {object} callback
  * See the [windowTitleBar tutorial]{@tutorial windowTitleBarComponent} for more information.
  * @private
  */
	this.start = function (callback = Function.prototype) {
		Validate.args(callback, "function");
		var customData = null,
		    isCompoundWindow = false,
		    shouldInjectHeader = false,
		    shouldInjectCSS = false;

		finsembleWindow = self.finsembleWindow;
		self.windowHash = util.camelCase("activeWorkspace", finsembleWindow.name);
		self.addListeners();
		self.retrieveMonitorDimensions();
		//where we store componentState for the window.
		self.componentState = {};

		self.getInitialOptions(() => {
			//The functions above are necessary to finish initializing the windowClient. The functions below are independent of one another.
			customData = self.options.customData;
			if (customData) {
				isCompoundWindow = typeof customData.window === "undefined" ? false : customData.window.compound;
				if (customData.cssOverride) {
					Logger.system.debug("Window has cssOverride. See local window to inspect object");
					console.debug(customData.cssOverride);
					shouldInjectCSS = true;
				}

				shouldInjectHeader = customData.foreign && !isCompoundWindow && customData.foreign.components["Window Manager"].FSBLHeader;
			}

			async.parallel([function cacheInitialBounds(done) {
				self.cacheInitialBounds(done);
			}, function addWorkspaceAndBoundsListeners(done) {
				if (!isCompoundWindow) {
					self.addWorkspaceListeners();
					self.listenForBoundsChanged();
				}
				done();
			}, function injectCSS(done) {
				if (shouldInjectCSS) {
					self.injectStylesheetOverride();
				}
				done();
			}, function injectHeader(done) {
				if (shouldInjectHeader) {
					self.injectHeader(customData.foreign.components["Window Manager"].FSBLHeader, done);
				} else {
					done();
				}
			}], callback);
		});
	};
	return self;
}

var windowClient = new WindowClient({
	startupDependencies: {
		requiredServices: ["storageService"]
	},
	onReady: function (cb) {
		windowClient.start(() => {
			cb();
		});
	},
	name: "windowClient"
});

//windowClient.initialize();

module.exports = windowClient;

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\clients\\windowClient.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\clients\\windowClient.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/*!
* Copyright 2017 by ChartIQ, Inc.
* All rights reserved.
*/

var Validate = __webpack_require__(7); // Finsemble args validator

var Logger = __webpack_require__(2);

/**
 *
 */
var BaseClient = __webpack_require__(9);

/**
 *
 * @introduction
 * <h2>Storage Client</h2>
 * The Storage Client handles saving and retrieving data for your application.
 * @hideConstructor true
 *  @todo add clear method
 * @constructor
 */
var StorageClient = function (params) {
	Validate.args(params, "object=") && params && Validate.args2("params.onReady", params.onReady, "function=");
	var self = this;
	BaseClient.call(this, params);

	/**
  * Define the username for storage (i.e., each user has unique storage)
  * @param {Object} params - Params object
  * @param {String} params.user -  user name
  * @param {function=} [cb] -  callback to be called on success
  *
  * @example
  * StorageClient.setUser("JohnDoe");
  */
	this.setUser = function (params, cb) {
		Validate.args(params.user, "string", cb, "function=");
		self.routerClient.query("Storage.setUser", { user: params.user }, function (err, response) {
			let logMethod = Logger.system.log;
			if (err) {
				logMethod = Logger.system.error;
			}
			logMethod("APPLICATION LIFECYCLE:StorageClient.setUser", params, err, response);
			if (cb) {
				cb(err, response.data);
			}
		});
	};

	/**
  * Specifies the datastore.  For normal operation this function doesn't have to be invoked -- the default datastore is set in configuration.
  * @param {Object} params - Params object
  * @param {String=} params.topic -  if specificed then data store is set only for topic
  * @param {Param} params.dataStore -  identifies the data store (e.g. "localStorage", "redis")
  * @param {function=} [cb=] -  callback to be called on success
  *
  * @example
  * StorageClient.setStore({topic:"finsemble", dataStore:"redis"})
  */
	this.setStore = function (params, cb) {
		Validate.args(params.topic, "string", params.dataStore, "string=", cb, "function=");
		Logger.system.log("APPLICATION LIFECYCLE:StorageClient.setStore", params, cb);
		self.routerClient.query("Storage.setStore", params, function (err, response) {
			let logMethod = Logger.system.info;
			if (err) {
				logMethod = Logger.system.error;
			}
			logMethod("Storage.setStore", err, response);
			if (cb) {
				cb(err, response.data);
			}
		});
	};

	/**
  * Save a key value pair into storage.
  * @param {Object} params - Params object
  * @param {String} params.topic -  storage topic for key being stored
  * @param {String} params.key -  The key to be stored
  * @param {Param} params.value -  The value to be stored
  * @param {function=} [cb] -  callback to be called on success
  *
  * @example
  * StorageClient.save({topic:"finsemble", key:"testKey", value:"testValue"})
  */
	this.save = function (params, cb) {
		Validate.args(params.topic, "string", params.key, "string", params.value, "any", cb, "function=");
		self.routerClient.query("Storage.save", params, function (err, response) {
			let logMethod = Logger.system.debug;
			if (err) {
				logMethod = Logger.system.error;
			}
			logMethod("Storage.save", err, response);
			if (cb) {
				cb(err, response.data);
			}
		});
	};

	/**
  * Get a value from storage.
  * @param {Object} params - Params object
  * @param {String} params.key -  The key to get from storage
  * @param {function} [cb] -  callback to be called on success
  *
  * @example
  * StorageClient.get({topic:"finsemble", key:"testKey"}, function(err, data){
  *	var myData = data;
  * });
  */
	this.get = function (params, cb) {
		Validate.args(params.topic, "string", params.key, "string", cb, "function=");
		self.routerClient.query("Storage.get", params, function (err, response) {
			let logMethod = Logger.system.info;
			if (err) {
				logMethod = Logger.system.error;
			}
			logMethod("Storage.get", err, response);
			if (cb) {
				cb(err, response.data);
			}
		});
	};

	/**
  * Get all keys for the topic.
  * @param {Object} params - Params object
  * @param {String} params.topic -  topic for the keys to return
  * @param {String=} params.keyPrefix -  filter all keys that don't start with this prefix
 
  * @param {function} [cb] -  callback to be called on success
  *
  * @example
  * StorageClient.keys({topic:"finsemble", keyPrefix:"test"}, function(err, data){
  *	var myKeys = data;
  * });
  */
	this.keys = function (params, cb) {
		Validate.args(params.topic, "string", cb, "function=");
		Logger.system.debug("StorageClient.keys", params, cb);
		self.routerClient.query("Storage.keys", params, function (err, response) {
			let logMethod = Logger.system.info;
			if (err) {
				logMethod = Logger.system.error;
			}
			logMethod("Storage.keys", err, response);
			if (cb) {
				cb(err, response.data);
			}
		});
	};
	/**
  * Get a multiple values from storage based on regex.(coming soon)
  * @param {Object} params - Params object
  * @param {function} [cb] -  callback to be called on success
  * @private
  * @todo make this work.
  * @example
  * StorageClient.get({key:"testKey"});
  */
	this.getMultiple = function (params, cb) {
		Logger.system.info("StorageClient.getMultiple", params, cb);
		self.routerClient.query("Storage.getMultiple", params, function (err, response) {
			let logMethod = Logger.system.info;
			if (err) {
				logMethod = Logger.system.error;
			}
			logMethod("StorageClient.getMultiple:", params, response);
			if (cb) {
				cb(err, response);
			}
		});
	};

	/**
  * Delete a value from storage.
  * @param {Object} params - Params object
  * @param {String} params.key -  The key to get from storage
  * @example
  * StorageClient.delete({key:"testKey"})
  */
	this.delete = function (params, cb) {
		Validate.args(params.topic, "string", params.key, "string", cb, "function=");
		self.routerClient.query("Storage.delete", params, function (err, response) {
			let logMethod = Logger.system.info;
			if (err) {
				logMethod = Logger.system.error;
			}
			logMethod("StorageClient.delete", err, response);
			if (cb) {
				cb(err, response.data);
			}
		});
	};
	this.clearCache = function (cb) {
		Validate.args(params.topic, "string", params.key, "string", cb, "function=");
		Logger.system.log("StorageClient.clearCache", cb);
		self.routerClient.query("Storage.clearCache", null, function (err, response) {
			let logMethod = Logger.system.info;
			if (err) {
				logMethod = Logger.system.error;
			}
			logMethod("StorageClient.clearCache", err, response);
			if (cb) {
				cb(err, response.data);
			}
		});
	};
};

var storageClient = new StorageClient({
	startupDependencies: {
		services: ["storageService"]
	},
	onReady: function (cb) {
		if (cb) {
			cb();
		}
	},
	name: "storageClient"
});
module.exports = storageClient;

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\clients\\storageClient.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\clients\\storageClient.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] =
cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
cloneableTags[boolTag] = cloneableTags[dateTag] =
cloneableTags[float32Tag] = cloneableTags[float64Tag] =
cloneableTags[int8Tag] = cloneableTags[int16Tag] =
cloneableTags[int32Tag] = cloneableTags[mapTag] =
cloneableTags[numberTag] = cloneableTags[objectTag] =
cloneableTags[regexpTag] = cloneableTags[setTag] =
cloneableTags[stringTag] = cloneableTags[symbolTag] =
cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] =
cloneableTags[weakMapTag] = false;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/**
 * Adds the key-value `pair` to `map`.
 *
 * @private
 * @param {Object} map The map to modify.
 * @param {Array} pair The key-value pair to add.
 * @returns {Object} Returns `map`.
 */
function addMapEntry(map, pair) {
  // Don't return `map.set` because it's not chainable in IE 11.
  map.set(pair[0], pair[1]);
  return map;
}

/**
 * Adds `value` to `set`.
 *
 * @private
 * @param {Object} set The set to modify.
 * @param {*} value The value to add.
 * @returns {Object} Returns `set`.
 */
function addSetEntry(set, value) {
  // Don't return `set.add` because it's not chainable in IE 11.
  set.add(value);
  return set;
}

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array ? array.length : 0;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */
function arrayReduce(array, iteratee, accumulator, initAccum) {
  var index = -1,
      length = array ? array.length : 0;

  if (initAccum && length) {
    accumulator = array[++index];
  }
  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }
  return accumulator;
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined,
    Symbol = root.Symbol,
    Uint8Array = root.Uint8Array,
    getPrototype = overArg(Object.getPrototypeOf, Object),
    objectCreate = Object.create,
    propertyIsEnumerable = objectProto.propertyIsEnumerable,
    splice = arrayProto.splice;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols,
    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
    nativeKeys = overArg(Object.keys, Object);

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView'),
    Map = getNative(root, 'Map'),
    Promise = getNative(root, 'Promise'),
    Set = getNative(root, 'Set'),
    WeakMap = getNative(root, 'WeakMap'),
    nativeCreate = getNative(Object, 'create');

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  return this.has(key) && delete this.__data__[key];
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  return getMapData(this, key)['delete'](key);
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  getMapData(this, key).set(key, value);
  return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  this.__data__ = new ListCache(entries);
}

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
}

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  return this.__data__['delete'](key);
}

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var cache = this.__data__;
  if (cache instanceof ListCache) {
    var pairs = cache.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      return this;
    }
    cache = this.__data__ = new MapCache(pairs);
  }
  cache.set(key, value);
  return this;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  // Safari 9 makes `arguments.length` enumerable in strict mode.
  var result = (isArray(value) || isArguments(value))
    ? baseTimes(value.length, String)
    : [];

  var length = result.length,
      skipIndexes = !!length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    object[key] = value;
  }
}

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @param {boolean} [isFull] Specify a clone including symbols.
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
  var result;
  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!isObject(value)) {
    return value;
  }
  var isArr = isArray(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag(value),
        isFunc = tag == funcTag || tag == genTag;

    if (isBuffer(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
      if (isHostObject(value)) {
        return object ? value : {};
      }
      result = initCloneObject(isFunc ? {} : value);
      if (!isDeep) {
        return copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = initCloneByTag(value, tag, baseClone, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new Stack);
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  if (!isArr) {
    var props = isFull ? getAllKeys(value) : keys(value);
  }
  arrayEach(props || value, function(subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    // Recursively populate clone (susceptible to call stack limits).
    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
  });
  return result;
}

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} prototype The object to inherit from.
 * @returns {Object} Returns the new object.
 */
function baseCreate(proto) {
  return isObject(proto) ? objectCreate(proto) : {};
}

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

/**
 * The base implementation of `getTag`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  return objectToString.call(value);
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var result = new buffer.constructor(buffer.length);
  buffer.copy(result);
  return result;
}

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  return result;
}

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

/**
 * Creates a clone of `map`.
 *
 * @private
 * @param {Object} map The map to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned map.
 */
function cloneMap(map, isDeep, cloneFunc) {
  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
  return arrayReduce(array, addMapEntry, new map.constructor);
}

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

/**
 * Creates a clone of `set`.
 *
 * @private
 * @param {Object} set The set to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned set.
 */
function cloneSet(set, isDeep, cloneFunc) {
  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
  return arrayReduce(array, addSetEntry, new set.constructor);
}

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    assignValue(object, key, newValue === undefined ? source[key] : newValue);
  }
  return object;
}

/**
 * Copies own symbol properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols(source, object) {
  return copyObject(source, getSymbols(source), object);
}

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * Creates an array of the own enumerable symbol properties of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11,
// for data views in Edge < 14, and promises in Node.js.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = objectToString.call(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : undefined;

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray(array) {
  var length = array.length,
      result = array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !isPrototype(object))
    ? baseCreate(getPrototype(object))
    : {};
}

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag(object, tag, cloneFunc, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag:
      return cloneArrayBuffer(object);

    case boolTag:
    case dateTag:
      return new Ctor(+object);

    case dataViewTag:
      return cloneDataView(object, isDeep);

    case float32Tag: case float64Tag:
    case int8Tag: case int16Tag: case int32Tag:
    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
      return cloneTypedArray(object, isDeep);

    case mapTag:
      return cloneMap(object, isDeep, cloneFunc);

    case numberTag:
    case stringTag:
      return new Ctor(object);

    case regexpTag:
      return cloneRegExp(object);

    case setTag:
      return cloneSet(object, isDeep, cloneFunc);

    case symbolTag:
      return cloneSymbol(object);
  }
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */
function cloneDeep(value) {
  return baseClone(value, true, true);
}

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = cloneDeep;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(10)(module)))

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/*!
* Copyright 2017 by ChartIQ, Inc.
* All rights reserved.
*/
var BaseClient = __webpack_require__(9);
var WindowClient = __webpack_require__(77);
var util = __webpack_require__(6);
var Validate = __webpack_require__(7); // Finsemble args validator

var Logger = __webpack_require__(2);

/**
 * An object that includes all the potential identifications for a window.
 * For instance, one can try and obtain a reference for a window if some of these values are known.
 *
 * @typedef LauncherClient~windowIdentifier
 * @property {string} [windowName] The name of the physical OpenFin window, or a reference to a native window that was launched with Assimilation service
 * @property {string} [uuid] Optional uuid of a particular OpenFin application process
 * @property {string} [componentType] The type of component
 * @property {number} [monitor] The number of the monitor. Potentially used to disambiguate multiple components with the same name (for searches only)
 */

/**
 * Finsemble windowDescriptor.
 * This is a superset of the [Openfin windowOptions object](http://cdn.openfin.co/jsdocs/stable/tutorial-windowOptions.html).
 * In addition to the values provided by OpenFin, the windowDescriptor includes the following values.
 *
 * @typedef LauncherClient~windowDescriptor
 * @type {object}
 * @property {string} [url] url to load (if HTML5 component).
 * @property {string} [native] The name of the native app (if a native component launched by Assimilation service).
 * @property {string} name The name of the window (sometimes randomly assigned).
 * @property {string} componentType The type of component (from components.json).
 */

/**
 *
 * A convenient assembly of native JavaScript window, OpenFin window and windowDescriptor.
 *
 * @typedef LauncherClient~rawWindowResult
 * @type {object}
 * @property {LauncherClient~windowDescriptor} windowDescriptor The window descriptor.
 * @property {Fin.Desktop.Window} finWindow The OpenFin window.
 * @property {Window} browserWindow The native JavaScript window.
 *
 */

// A map of related menus that is kept by handleToggle.
var okayToOpenMenu = {};

/**
 *
 * @introduction
 * <h2>Launcher Client</h2>
 * The Launcher Client handles spawning windows. It also maintains the list of spawnable components.
 * 
 *
 *
 * @hideConstructor true
 * @constructor
 */
class LauncherClient extends BaseClient {
	constructor(params) {
		super(params);
		Validate.args(params, "object=") && params && Validate.args2("params.onReady", params.onReady, "function=");
		this.windowClient = params.clients.windowClient;
	}

	/** @alias LauncherClient# */
	//var self = this;
	//BaseClient.call(this, params);

	/**
  * Get a list of registered components (those that were entered into *components.json*).
  *
  * @param {Function} cb Callback returns an object map of components. Each component object
  * contains the default config for that component.
  */
	getComponentList(cb) {
		Validate.args(cb, "function");
		this.routerClient.query("Launcher.componentList", {}, function (err, response) {
			if (cb) {
				cb(err, response.data);
			}
		});
	}

	/**
  * Get the component config (i.e. from components.json) for a specific component.
  *
  * @param {String} componentType The type of the component.
  * @param {Function} cb Callback returns the default config (windowDescriptor) for the requested componentType.
  *
  */
	getComponentDefaultConfig(componentType, cb) {
		Validate.args(cb, "function");
		this.routerClient.query("Launcher.componentList", {}, function (err, response) {
			if (cb) {
				cb(err, response.data[componentType]);
			}
		});
	}

	/**
  * Gets monitorInfo (dimensions and position) for a given windowIdentifier or for a specific monitor.
  * If neither the identifier or monitor are provided then the monitorInfo for the current window is returned.
  *
  *
  * The information returned contains a supplemented OpenFin monitor descriptor which contains:
  *
  * **monitorRect** - The full dimensions for the monitor from OpenFin.
  *
  * **availableRect** - The dimensions for the available space on the monitor (less windows toolbars).
  *
  * **unclaimedRect** - The dimensions for available monitor space less any space claimed by components (such as the application Toolbar).
  *
  * Each of these is supplemented with the following additional members:
  *
  * **width** - The width as calculated (right - left).
  *
  * **height** - The height as calculated (bottom - top).
  *
  * **position** - The position of the monitor, numerically from zero to X. Primary monitor is zero.
  *
  * **whichMonitor** - Contains the string "primary" if it is the primary monitor.
  *
  * @param  {object} [params]               Parameters
  * @param  {LauncherClient~windowIdentifier} [params.windowIdentifier] The windowIdentifier to get the monitorInfo. If undefined, then the current window.
  * @param  {any} [params.monitor] If passed then a specific monitor is identified. Valid values are the same as for {@link LauncherClient#spawn}.
  * @param  {Function} cb               Returns a monitorInfo object containing the monitorRect, availableRect and unclaimedRect.
  */
	getMonitorInfo(params, cb) {
		var self = this;
		util.getMyWindowIdentifier(function (myWindowIdentifier) {
			if (!params.windowIdentifier) {
				params.windowIdentifier = myWindowIdentifier;
			}
			self.routerClient.query("Launcher.getMonitorInfo", params, function (err, response) {
				if (cb) {
					cb(err, response.data);
				}
			});
		});
	}

	/**
  * Gets monitorInfo (dimensions and position) for all monitors. Returns an array of monitorInfo objects. See {@link LauncherClient#getMonitorInfo} for the format of a monitorInfo object.
  * 
  * 
  *
  * @param  {Function} cb               Returns an array of monitorInfo objects.
  */
	getMonitorInfoAll(cb) {
		this.routerClient.query("Launcher.getMonitorInfoAll", {}, function (err, response) {
			if (cb) {
				cb(err, response.data);
			}
		});
	}

	/**
  * A convenience method for dealing with a common use-case, which is toggling the appearance and disappearance of a child window when a button is pressed, aka drop down menus. Simply call this method from the click handler for your element. Your child window will need to close itself on blur events.
  * @param {HTMLElement|selector} element The DOM element, or selector, clicked by the end user
  * @param {windowIdentifier} windowIdentifier Identifies the child window
  * @param {object} params Parameters to be passed to {@link LauncherClient#showWindow} if the child window is allowed to open
  */
	toggleWindowOnClick(element, windowIdentifier, params) {
		var self = this;
		var key = windowIdentifier.windowName + ":" + windowIdentifier.uuid;
		if (!windowIdentifier.windowName) key = windowIdentifier.componentType;
		//If the element was clicked while the menu was open then return right away. The menu window will receive a blur event and close. This method is dependent on the fact that blur events are processed before click events. This is the case by default with OpenFin, but if this turns out to be a problem then put this call inside of a setTimeout().
		if (okayToOpenMenu[key] === false) {
			okayToOpenMenu[key] = true;
			return;
		}
		var onDisplayed = function (showError, showResponse) {
			if (!showResponse) return;
			let finWindow = showResponse.finWindow;
			var onBlur = function (err, blurResponse) {
				okayToOpenMenu[key] = true;
				self.windowClient.isMouseOverDOMElement(element, function (mouseIsOverElement) {
					okayToOpenMenu[key] = !mouseIsOverElement;
				});
				finWindow.removeEventListener("blurred", onBlur);
			};
			finWindow.addEventListener("blurred", onBlur);
		};
		this.showWindow(windowIdentifier, params, onDisplayed);
	}

	/**
  * Displays a window and relocates/resizes it according to the values contained in params.
  *
  * @param  {LauncherClient~windowIdentifier}   windowIdentifier A windowIdentifier.
  * @param  {object}   params           Parameters. These are the same as {@link LauncherClient#spawn} with the folowing exceptions:
  * @param {any} [params.monitor] Same as spawn() except that null or undefined means the window should not be moved to a different monitor.
  * @param {any} [params.left] Same as spawn() except that null or undefined means the window should not be moved from current horizontal location.
  * @param {any} [params.top] Same as spawn() except that null or undefined means the window should not be moved from current vertical location.
  * @param {boolean} [params.spawnIfNotFound=false] If true, then spawns a new window if the requested one cannot be found.
  * *Note, only works if the windowIdentifier contains a componentType.*
  * @param {boolean} [params.slave] Cannot be set for an existing window. Will only go into effect if the window is spawned.
  * (In other words, only use this in conjunction with spawnIfNotFound).
  * @param {Function} cb Callback to be invoked after function is completed. Callback contains an object with the following information:
  * **windowIdentifier** - The {@link LauncherClient~windowIdentifier} for the new window.
  * **windowDescriptor** - The {@link LauncherClient~windowDescriptor} of the new window.
  * **finWindow** - An OpenFin window referencing the new window.
  */
	showWindow(windowIdentifier, params, cb) {
		Validate.args(windowIdentifier, "object", params, "object=", cb, "function=");
		var self = this;
		if (!params) {
			params = {};
		}
		params = util.clone(params);
		if (!params.staggerPixels && params.staggerPixels !== 0) {
			params.staggerPixels = 100;
		}
		params.windowIdentifier = windowIdentifier;

		util.getMyWindowIdentifier(function (myWindowIdentifier) {
			if (!params.relativeWindow) {
				params.relativeWindow = myWindowIdentifier;
			}
			self.routerClient.query("Launcher.showWindow", params, function (err, response) {
				if (err) {
					return cb ? cb(err) : null;
				}
				var newWindowIdentifier = response.data.windowIdentifier;
				response.data.finWindow = fin.desktop.Window.wrap(newWindowIdentifier.uuid, newWindowIdentifier.windowName); //TODO: replace with FinsembleWindow - see also finishSpawn.
				cb ? cb(err, response.data) : null;
			});
		});
	}

	/**
  * Asks the Launcher service to spawn a new component. Any parameter below can also be specified in config/components.json, which will
  * then operate as the default for that value.
  * 
  * The launcher parameters mimic CSS window positioning.
  * For instance, to set a full size window use `left=0`,`top=0`,`right=0`,`bottom=0`.
  * This is functionally equivalent to: left=0,top=0,width="100%",height="100%"
  *
  * @param {String} component - Type of the component to launch. If null or undefined, then params.url will be used instead.
  *
  * @param {object} params
  * @param {any} [params.monitor="mine"] Which monitor to place the new window.
  * **"mine"** - Place the window on the same monitor as the calling window.
  * A numeric value of monitor (where primary is zero).
  * **"primary"**,**"next"** and **"previous"** indicate a specific monitor.
  * **"all"** - Put a copy of the component on all monitors
  *
  * @param {string} [params.position=unclaimed] Defines a "viewport" for the spawn, with one of the following values:
  *
  * **"unclaimed"** (the default) Positioned based on the monitor space excluding space "claimed" by other components (such as toolbars).
  * For instance, `top:0` will place the new component directly below the toolbar.
  *
  * **"available"** Positioned according to the coordinates available on the monitor itself, less space claimed by the operating system (such as the windows toolbar).
  * For instance, `bottom:0` will place the new component with its bottom flush against the windows toolbar.
  *
  * **"monitor"** Positioned according to the absolute size of the monitor.
  * For instance, `top:0` will place the component overlapping the toolbar.
  *
  * **"relative"** Positioned relative to the relativeWindow.
  * For instance, `left:0;top:0` will joing the top left corner of the new component with the top left corner of the relative window.
  *
  * **"virtual"** Positoned against coordinates on the virtual screen.
  * The virtual screen is the full viewing area of all monitors combined into a single theoretical monitor.
  * @param {boolean} [params.dockOnSpawn=false] If true, will automatically dock the window with the "relative" window (dock to the parent window unless specified in params.relativeWindow).
  * @param {any} [params.left] A pixel value representing the distance from the left edge of the viewport as defined by "position".
  * A percentage value may also be used, representing the percentage distance from the left edge of the viewport relative to the viewport's width.
  *
  * **"adjacent"** will snap to the right edge of the spawning or relative window.
  *
  * **"center"** will center the window
  *
  * If neither left nor right are provided, then the default will be to stagger the window based on the last spawned window.
  * *Note - the staggering algorithm has a timing element that is optimized based on user testing.*
  *
  * @param {any} [params.top] Same as left except related to the top of the viewport.
  * @param {any} [params.right] Same as left except releated to the right of the viewport.
  * @param {any} [params.bottom] Same as left except related to the bottom of the viewport.
  *
  * @param {any} [params.height] A pixel or percentage value.
  * @param {any} [params.width] A pixel value or percentage value.
  * @param {boolean} [params.forceOntoMonitor] If true will attempt to make the window no have parts outside the monitor boundary.
  *
  * @param {boolean} [params.ephemeral=false] Indicates that this window is ephemeral.
  * An ephemeral window is a dialog, menu or other window that is temporarily displayed but usually hidden.
  * Ephemeral windows automatically have the following OpenFin settings assigned: resizable: false, showTaskbarIcon: false, alwaysOnTop: true.
  * *Note, use `options:{autoShow: false}` to prevent an ephemeral widow from showing automatically.*
  *
  * @param {number} [params.staggerPixels=100] Number of pixels to stagger (default when neither left, right, top or bottom are set).
 
  * @param {boolean} [params.claimMonitorSpace] For use with permanent toolbars.
  * The available space for other components will be reduced by the amount of space covered by the newly spawned component.
  * This will be reflected in the `unclaimedRect` member from API calls that return monitorInfo. Users will be prevented
  * from moving windows to a position that covers the claimed space. See `position: 'unclaimed'`.
 
  * @param {LauncherClient~windowIdentifier} [params.relativeWindow=current window] The window to use when calculating any relative launches.
  * If not set then the window from which spawn() was called.
 
  * @param {boolean} [params.slave] If true then the new window will act as a slave to the relativeWindow (or the launching window if relativeWindow is not specified).
  * Slave windows will automatically close when their parent windows close.
 
  * @param {string} [params.url] Optional url to launch. Overrides what is passed in "component".
 
  * @param {string} [params.native] @deprecated Please use windowType instead. Optional native application to launch with Assimilation service. Overrides what is passed in "component".
 
  * @param {string} [params.windowType=openfin] Optional. Describes which type of component to spawn.
  * 
  * **openfin** - A normal OpenFin HTML window.
  * 
  * **assimilation** - A window that is managed by the Finsemble assimilation process (usually a native window without source code access). Requires "path" to be specified.
  * 
  * **native** - A native window that has implemented finsemble.dll. Requires "path" to be specified. [For more information](tutorial-RPCService.html).
  * 
  * **application** - A standalone application. This launch a component in its own browser process (splintered, giving it dedicated CPU and memory).
  * This can also point to a standalone OpenFin application (such as from a third party). [For more information on integrating Openfin apps](tutorial-IntegratingAnOpenfinApplication.html).
  *
  * @param {string} [params.alias] Used when windowType is "native" or "assimilation". Specifies the alias of an OpenFin bundled asset.
  * 
  * @param {string} [params.path] Used when windowType is "native" or "assimilation". Specifies the path to the application. The path can be:
  * The name of an exe that is on the system path (i.e. notepad.exe).
  * The full path to an executable on the user's machine (i.e. C:\Program Files\app.exe)
  * A system installed uri (i.e. myuri://myapp).
  * 
  * When windowType is "native" then additional arguments will be automatically appended to the path or the uri. These arguments can be captured by the native application
  * in order to tie it to Finsemble's window tracking. When building an application with finsemble.dll, this is handled automatically. Those arguments are:
  * 
  * **uuid** - A generated UUID that uniquely identifies this window.
  * 
  * **left** - The x coordinate of the new window
  * 
  * **top** - The y coordinate of the new window
  * 
  * **width** - The width of the new window
  * 
  * **height** - The height of the new window
  * 
  * **openfinVersion** - The openfin version that Finsemble runs (necessary for native windows to connection on the OpenFin IAB)
  * 
  * **openfinSocketPort** - The openfin socket used for the IAB (necessary for Java windows that wish to use the OpenFin IAB)
  * 
  * **finsembleWindowName** - The name of the window in the Finsemble config
  * 
  * **componentType** - The component type in the Finsemble config
  * 
  * A common troublesome problem is when a native application needs to be launched from an intermediary application (such as a launcher or batch script). That intermediary
  * application can pass these parameters which will allow the final application to connect back to Finsemble.
  * 
  * @param {string} [params.arguments] Used when windowType is "native" or "assimilation". Specifies the arguments to be sent to the application. This is used in conjunction with path. Arguments should be separated by spaces.
  * Note that when params.argumentsAsQueryString is true, arguments should be a single string in uri format (i.e. a=1&b=2)
  * 
  * @param {boolean} [params.argumentsAsQueryString] For native applications launched by URI, the automatic arguments assigned by path are converted into a query string.
  * 
  * @param {string} [params.name] Optional window name. If not provided, then a random name will be assigned to the newly created OpenFin window.
 
  * @param {string} [params.groupName] Optional group name. Adds windows to a group (unrelated to docking or linking) that is used for window management functions. If the group does not exist it will be created.
 
  * @param {any} [params.data] Optional data to pass to the opening window.
  * If set, then the spawned window can use {@link WindowClient#getSpawnData} to retrieve the data.
 
  * @param {LauncherClient~windowDescriptor} [params.options] Properties to merge with the default windowDescriptor.
  * Any value set here will be sent directly to the OpenFin window, and will override the effect of relevant parameters to spawn().
  * See {@link http://cdn.openfin.co/jsdocs/stable/fin.desktop.Window.html#~options} for the full set and defaults, with the following exception:
  * @param {boolean} [params.options.frame=false] By default, all Finsemble windows are frameless
 
  * @param {boolean} [params.addToWorkspace=false] Whether to add the new component to the workspace.
  * Even when true, the window will still not be added to the workspace if addToWorkspace==false in components.json config for the component type.
 
  * @param {Function=} cb Callback to be invoked after function is completed. Callback contains an object with the following information:
  * windowIdentifier - The {@LauncherClient~windowIdentifier} for the new component.
  * windowDescriptor - The {@LauncherClient~windowDescriptor} for the new window.
  * finWindow - An OpenFin window object that contains the spawned component.
  * 
  * @since 2.4.1 Added params.windowType (deprecated params.native), params.path, params.alias, params.argumentsAsQueryString - These are all for launching native apps.
  *
  */
	spawn(component, params, cb) {
		var self = this;

		Validate.args(component, "string", params, "object=", cb, "function=");
		if (!params) {
			params = {};
		}
		params = util.clone(params);
		params.component = component;
		if (!params.options) {
			params.options = {};
		}
		if (!params.options.customData) {
			params.options.customData = {};
		}
		if (!params.staggerPixels && params.staggerPixels !== 0) {
			params.staggerPixels = 50;
		}
		Logger.system.debug(`Calling Spawn for componentType:${component}`);
		util.getMyWindowIdentifier(function (windowIdentifier) {
			params.launchingWindow = windowIdentifier;
			self.callSpawn(params, cb);
		});
	}

	/**
  * Returns an object that provides raw access to a remote window.
  * It returns an object that contains references to the Finsemble windowDescriptor, to
  * the OpenFin window, and to the native JavaScript (browser) window.
  *
  * *This will only work for windows that are launched using the Finsemble Launcher API.*
  *
  * As in any browser, you will not be able to manipulate a window that has been launched
  * cross domain or in a separate physical OpenFin application (separate process). Caution
  * should be taken to prevent a window from being closed by the user if you plan on
  * referencing it directly. Due to these inherent limitations we strongly advise against a
  * paradigm of directly manipulating remote windows through JavaScript. Instead leverage the
  * RouterClient to communicate between windows and to use an event based paradigm!
  *
  * @param  {object} params Parameters
  * @param {string} params.windowName The name of the window to access.
  * @return {LauncherClient~rawWindowResult} An object containing windowDescriptor, finWindow, and browserWindow. Or null if window isn't found.
  * @deprecated Finsemble now uses a splintering agent which disconnects windows from the main launcher.
  * It becomes impossible to access raw windows. See LauncherClient.getActiveDescriptors() and Util.getFinWindow()
  */
	getRawWindow(params) {
		var launcher = window.opener;
		if (launcher.name !== "launcherService") {
			Logger.system.warn("LauncherClient.getNativeWindow: window not opened by Launcher Service");
		}
		return launcher.activeWindows.getWindow(params.windowName);
	}

	/**
  * @private
  */
	callSpawn(params, cb) {
		var self = this;
		Logger.perf.debug("CallSpawn", "start", "from spawn to callback");
		self.routerClient.query("Launcher.spawn", params, function (err, response) {
			var result = response.data;
			if (err) {
				invokeSpawnCallback(err, result);
				return Logger.system.error(err);
			}

			// Add a wrapped finWindow to the response (this can only be done client side)
			if (result.windowDescriptor.native) return invokeSpawnCallback(err, result); /// This is way too slow for native windows so we just let this pass through and assume the window is ready.
			var newWindowIdentifier = result.windowIdentifier;
			result.finWindow = fin.desktop.Window.wrap(newWindowIdentifier.uuid, newWindowIdentifier.windowName); //TODO - replace with FinsembleWindow

			let componentOnlineChannel = "Finsemble." + result.windowIdentifier.windowName + ".componentReady";
			let subscriberID = self.routerClient.subscribe(componentOnlineChannel, componentOnlineCallback);

			function componentOnlineCallback(err, response) {
				if (err) return Logger.system.error(err);
				//Ignore the initial "uninitialized" state message delivered by subscribe (a second message will contain the actual data)
				if (response && Object.keys(response.data).length === 0) return;
				if (params.position === "relative" && (params.groupOnSpawn || params.dockOnSpawn)) {
					let windows = [result.windowIdentifier.windowName, fin.desktop.Window.getCurrent().name]; //TODO - replace with FinsembleWindow
					self.routerClient.query("DockingService.groupWindows", {
						windows: windows,
						isMovable: true
					}, function (error, response) {
						Logger.perf.debug("CallSpawn", "stop");
						invokeSpawnCallback(err, result);
					});
				} else {
					Logger.perf.debug("CallSpawn", "stop");
					invokeSpawnCallback(err, result);
				}
				self.routerClient.unsubscribe(subscriberID);
			}
		});

		function invokeSpawnCallback(error, data) {
			if (cb) {
				cb(error, data);
			}
		}
	}

	/**
  * Convenience function to get a monitor descriptor for a given windowIdentifier, or for the
  * current window.
  *
  * @param {LauncherClient~windowIdentifier} [windowIdentifier] The window to find the monitor for. Current window if undefined.
  * @param  {Function} cb Returns a monitor descriptor (optional or use returned Promise)
  * @returns {Promise} A promise that resolves to a monitor descriptor
  * @private
  * @TODO this probably is unnecessary since a client can include util and a developer should be using this.getMonitorInfo which has full support for searching by component. Did Ryan need this?
  */
	getMonitor(windowIdentifier, cb) {
		return util.getMonitor(windowIdentifier, cb);
	}

	/**
  * Returns a {@link LauncherClient~windowIdentifier} for the current window
  *
  * @param {LauncherClient~windowIdentifier} cb Callback function returns windowIdentifier for this window (optional or use the returned Promise)
  * @returns {Promise} A promise that resolves to a windowIdentifier
  */
	// @TODO, [Terry] calls to launcherClient.myWindowIdentifier or launcherClient.getMyWindowIdentifier()
	// should be replaced with windowClient.getWindowIdentifier()
	getMyWindowIdentifier(cb) {
		return util.getMyWindowIdentifier(cb);
	}

	/**
 * Gets the {@link LauncherClient~windowDescriptor} for all open windows.
 *
 * *Note: This returns descriptors even if the window is not part of the workspace*.
 *
 * @param {function} cb Callback returns an array of windowDescriptors
 *
 */
	getActiveDescriptors(cb) {
		Validate.args(cb, "function");
		this.routerClient.query("Launcher.getActiveDescriptors", {}, function (err, response) {
			if (err) {
				return Logger.system.error(err);
			}
			if (cb && response) {
				cb(err, response.data);
			}
		});
	}

	/**
  * Adds a custom component. Private for now.
  * @private
  */
	addUserDefinedComponent(params, cb) {
		this.routerClient.query("Launcher.userDefinedComponentUpdate", {
			type: "add",
			name: params.name,
			url: params.url
		}, function (err, response) {
			if (cb) {
				cb(err, response.data);
			}
		});
	}

	/**
  * Adds a custom component. Private for now.
  * @private
  */
	removeUserDefinedComponent(params, cb) {
		this.routerClient.query("Launcher.userDefinedComponentUpdate", {
			type: "remove",
			name: params.name,
			url: params.url
		}, function (err, response) {
			if (cb) {
				cb(err, response.data);
			}
		});
	}

	/**
  * Gets components that can receive specfic data types. Returns an object containing a of ComponentTypes mapped to a list of dataTypes they can receive. This is based on the "advertiseReceivers" property in a component's config.
  * @param params
  * @param {Array} [params.dataTypes] An array of data types. Looks for components that can receive those data types
  *
  * @since 2.0
  *
  * @example
  * LauncherClient.getComponentsThatCanReceiveDataTypes({ dataTypes: ['chartiq.chart', 'salesforce.contact']}, function(err, response) {
  * 	//Response contains: {'chartiq.chart': ['Advanced Chart'], 'salesforce.contact': ['Salesforce Contact']}
  * })
  *
  */
	getComponentsThatCanReceiveDataTypes(params, cb) {
		Validate.args(cb, "function");
		if (params.dataTypes && !Array.isArray(params.dataTypes)) {
			params.dataTypes = [params.dataTypes];
		}
		Validate.args(params.dataTypes, "array");
		this.routerClient.query("LauncherService.getComponentsThatCanReceiveDataTypes", params, function (err, response) {
			if (cb) cb(err, response.data);
		});
	}

	/**@private
  * Brings a windows to front. If no windowList, groupName or componentType is specified, brings all windows to front.
  * @param params
  * @param {Array} [params.windowList] Optional. An array of window names or window identifiers. Not to be used with componentType.
  * @param {string} [params.groupName] Optional. The name of a window group to bring to front.
  * @param {string} [params.componentType] Optional. The componentType to bring to front. Not to be used with windowList.
  *
  * @since TBD
  *
  * @example
  * LauncherClient.bringWindowsToFront({ windowList: ['AdvancedChart-123-123', 'Symphony-Chat-234-234']}, function(err, response) {
  *
  * })
  *
  */
	bringWindowsToFront(params = {}, cb) {
		if (params.windowList && !Array.isArray(params.windowList)) {
			params.windowList = [params.windowList];
		}
		if (params.groupName) {
			Validate.args(params.groupName, "string");
		}
		if (params.componentType) {
			Validate.args(params.componentType, "string");
		}

		this.routerClient.transmit("LauncherService.bringWindowsToFront", params);
		if (cb) {
			cb();
		}
	}

	/**@private
  * Minimizes all but a specific list or group of windows. Either groupName or windowList must be specified.
  * @param params
  * @param {Array} [params.windowList] Optional. An array of window names or window identifiers. Not to be used with componentType.
  * @param {string} [params.groupName] Optional. The name of a window group to hyperFocus.
  * @param {string} [params.componentType] Optional. The Component Type to hyperFocus. Not to be used with windowList.
  *
  * @since TBD
  *
  * @example
  * LauncherClient.hyperFocus({ windowList: ['AdvancedChart-123-123', 'Symphony-Chat-234-234']}, function(err, response) {
  *
  * })
  *
  */
	hyperFocus(params, cb) {
		if (params.windowList && !Array.isArray(params.windowList)) {
			params.windowList = [params.windowList];
		}
		if (!params.windowList && !params.groupName && !params.componentType) {
			params.windowList = [this.myWindowIdentifier];
		}
		if (params.groupName) {
			Validate.args(params.groupName, "string");
		}
		if (params.componentType) {
			Validate.args(params.componentType, "string");
		}

		this.routerClient.transmit("LauncherService.hyperFocus", params);
		if (cb) {
			cb();
		}
	}

	/**@private
  * Minimize windows. If no windowList or groupName is specified, all windows will be minimized.
  * @param {*} params
  * @param {Array} [params.windowList] Optional. An array of window names or window identifiers. Not to be used with componentType.
  * @param {string} [params.groupName] Optional. The name of a window group to minimize.
  * @param {string} [params.componentType] Optional. The component type of windows to Minimize. Not to be used with windowList.
  *
  * @since TBD
  */
	minimizeWindows(params, cb) {
		if (params.windowList && !Array.isArray(params.windowList)) {
			params.windowList = [params.windowList];
		}
		if (params.groupName) {
			Validate.args(params.groupName, "string");
		}
		if (params.componentType) {
			Validate.args(params.componentType, "string");
		}
		this.routerClient.transmit("LauncherService.minimizeWindows", params);
		if (cb) {
			cb();
		}
	}

	/**@private
  * Create Window group
  * @param {*} params
  * @param {string} [params.groupName] The name of the window group to create
  * @param {Array} [params.windowList] An array of window names or window identifiers to add to the group. Optional.
  * @param {function} cb callback to be called upon group creation
  *
  * @since TBD
  */
	createWindowGroup(params, cb) {
		if (params.windowList && !Array.isArray(params.windowList)) {
			params.windowList = [params.windowList];
			delete params.groupName;
		}
		if (!params.groupName) {
			if (cb) {
				cb("Invalid Parameters");
			}
			return;
		}
		Validate.args(params.groupName, "string");

		this.routerClient.query("LauncherService.createWindowGroup", params, function (err, response) {
			if (cb) {
				cb(err, response);
			}
		});
	}

	/**@private
  * Add Windows to group
  * @param {*} params
  * @param {string} [params.groupName] The name of the window group
  * @param {Array} [params.windowList] An array of window names or window identifiers to add to the group.
  * @param {function} cb callback to be called upon group creation
  *
  * @since TBD
  */
	addWindowsToGroup(params, cb) {
		if (!params.groupName || !params.windowList) {
			if (cb) {
				cb("Invalid Parameters");
			}
			return;
		}
		if (params.windowList && !Array.isArray(params.windowList)) {
			params.windowList = [params.windowList];
		}

		Validate.args(params.groupName, "string");
		this.routerClient.query("LauncherService.addWindowsToGroup", params, function (err, response) {
			if (cb) {
				cb(err, response);
			}
		});
	}

	/**@private
  * Remove Windows from group
  * @param {*} params
  * @param {string} [params.groupName] The name of the window group
  * @param {Array} [params.windowList] An array of window names or window identifiers to remove from the group.
  * @param {function} cb callback to be called upon group creation
  *
  * @since TBD
  */
	removeWindowsFromGroup(params, cb) {
		if (!params.groupName || !params.windowList) {
			if (cb) {
				cb("Invalid Parameters");
			}
			return;
		}
		if (params.windowList && !Array.isArray(params.windowList)) {
			params.windowList = [params.windowList];
		}
		this.routerClient.query("LauncherService.removeWindowsFromGroup", params, function (err, response) {
			if (cb) {
				cb(err, response);
			}
		});
	}

	/**@private
  * Get Window Groups that a window belongs to. If no windowIdentifier is specified, gets  the groups of the current window.
  * @param {*} params
  * @param {LauncherClient~windowIdentifier} [params.windowIdentifier] Optional. If not specified uses current window
  * @param {*} cb callback with a list of groups
  *
  * @since TBD
  */
	getGroupsForWindow(params, cb) {
		if (typeof params === "function") {
			cb = params;
			params = null;
		}
		if (!params || !params.windowIdentifier) {
			this.windowClient.getComponentState({ field: "finsemble:windowGroups" }, function (err, groups) {
				cb(err, groups);
			});
			return;
		}
		this.routerClient.query("LauncherService.getGroupsForWindow", params, function (err, response) {
			if (cb) {
				cb(err, response.data);
			}
		});
	}

	/**
  *
  * @param {*} params
  * @param {LauncherClient~windowIdentifier} [params.windowIdentifier] Optional. Current window is assumed if not specified.
  * @param {Array} [params.groupNames] List of groupnames to add window to. Groups will be created if they do not exist.
  * @param {*} cb
  */
	addToGroups(params, cb) {
		Validate.args(params.groupNames, "array");
		if (!params.windowIdentifier) {
			params.windowIdentifier = this.myWindowIdentifier;
		}
		this.routerClient.query("LauncherService.addWindowToGroups", params, cb);
	}

	start(cb) {
		var self = this;
		// Get Group Updates (only if we are not in a service)
		if (typeof FSBL != "undefined") {
			// Get Groups from Component State on Load
			function subscribeToGroupUpdates() {
				self.routerClient.subscribe("Finsemble.LauncherService.updateGroups." + self.windowName, function (err, response) {
					console.log("Arguments for launcher updateGroups", arguments);
					self.windowClient.setComponentState({ field: "finsemble:windowGroups", value: response.data });
				});
			}
			FSBL.addEventListener("onReady", function () {
				self.windowClient.getComponentState({ field: "finsemble:windowGroups" }, function (err, groups) {
					console.log("groups from storage", groups);
					if (!err && groups) {
						return self.addToGroups({
							groupNames: groups
						}, subscribeToGroupUpdates);
					}
					subscribeToGroupUpdates();
				});
			});
		}

		setInterval(function () {
			self.routerClient.transmit("Finsemble.heartbeat", { type: "component", windowName: self.windowName, componentType: "finsemble" });
		}, 1000);

		// @TODO, [Terry] remove in favor of calls to windowClient.getMyIdentifier()
		this.getMyWindowIdentifier(identifier => {
			self.myWindowIdentifier = identifier;
			if (cb) {
				cb();
			}
		});
	}
}

function constructInstance(params) {
	params = params ? params : {};
	if (!params.windowClient) params.windowClient = WindowClient;
	return new LauncherClient({
		clients: params,
		startupDependencies: {
			services: ["launcherService"]
		},
		onReady: function (cb) {
			Logger.system.debug("launcherClient ready");
			Logger.perf.log("LauncherClientReadyTime", "stop");
			launcherClient.start(cb);
		},
		name: "launcherClient"
	});
}

var launcherClient = constructInstance();
launcherClient.constructInstance = constructInstance;

module.exports = launcherClient;

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\clients\\launcherClient.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\clients\\launcherClient.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {

const BOUNDS_CHANGING = "disabled-frame-bounds-changing";
const BOUNDS_CHANGED = "disabled-frame-bounds-changed";
var routerClient = __webpack_require__(3);
var Logger = __webpack_require__(2);
var System = __webpack_require__(46);
var FSBLWindow = __webpack_require__(19);

/**
 * This is a Finsemble Aware Native Window. It uses the Finsemble Bridge and communicates using the Openfin IAB with the actual window
 */
class FinsembleNativeWindow extends FSBLWindow {
	/**
  * @param {*} params
  *
  */
	constructor(params) {
		super(params);
		if (!this.callbackChannel) this.callbackChannel = this.name + "-channel";
		this.addEventListener = this.addListener;
		this.removeEventListener = this.removeListener;
		this.windowState = FSBLWindow.WINDOWSTATE.NORMAL;
		this.resizing = false;
		this.bindAllFunctions();
		this.addListeners();
	}

	/* private */
	bindAllFunctions() {
		let self = this;
		for (let name of Object.getOwnPropertyNames(Object.getPrototypeOf(self))) {
			let method = self[name];
			// skip constructor
			if (!(method instanceof Function) || method === FinsembleNativeWindow) continue;
			self[name] = self[name].bind(self);
		}
	}

	moved(err, message) {
		Logger.system.info("got move ", this.name, message);
		if (err) {
			return Logger.system.error(err);
		}
		if (!message.data.location) {
			return;
		}
		this.location = message.data.location;
		message.data.location.name = this.name;
		message.data.location.changeType = 0;
		this.emit(BOUNDS_CHANGING, message.data.location);
	}

	nativeEndMove(err, message) {
		Logger.system.info("got end move ", this.name, message);
		if (err) {
			return Logger.system.error(err);
		}
		// Logger.system.log("end sent");
		if (!message || !message.data.location) {
			return;
		}
		this.location = message.data.location;
		message.data.location.name = this.name;
		if (this.resizing) this.setBounds(message.data.location); // For some reason the window snaps back to original size, this prevents that.
		this.resizing = false;
		//this.emit(BOUNDS_CHANGING, message.data.location);
		this.emit(BOUNDS_CHANGED, message.data.location);
	}

	resized(err, message) {
		this.resizing = true;
		Logger.system.info("got resize ", this.name, message);
		if (err) {
			return Logger.system.error(err);
		}
		if (!message.data.location) {
			return;
		}
		this.location = message.data.location;
		message.data.location.name = this.name;
		message.data.location.changeType = 1;
		this.emit(BOUNDS_CHANGING, message.data.location);
	}

	locationChanged(err, message) {
		if (err) {
			return Logger.system.error(err);
		}
		// Logger.system.log("end sent");
		if (!message.data.location) {
			return;
		}
		this.location = message.data.location;
	}

	focused(err) {
		if (err) {
			return Logger.system.error(err);
		}
		this.emit("focused", {
			name: this.name,
			topic: "window",
			type: "focused"
		});
	}

	minimized() {
		if (this.windowState != FSBLWindow.WINDOWSTATE.MINIMIZED) {
			this.emit("minimized", {
				name: this.name,
				topic: "window",
				type: "minimized"
			});
			this.windowState = FSBLWindow.WINDOWSTATE.MINIMIZED;
		}
	}

	maximized() {
		if (this.windowState != FSBLWindow.WINDOWSTATE.MAXIMIZED) {
			this.emit("maximized", {
				name: this.name,
				topic: "window",
				type: "maximized"
			});
			this.windowState = FSBLWindow.WINDOWSTATE.MAXIMIZED;
		}
	}

	restored() {
		if (this.windowState != FSBLWindow.WINDOWSTATE.NORMAL) {
			this.emit("restored", {
				name: this.name,
				topic: "window",
				type: "restored"
			});
			this.windowState = FSBLWindow.WINDOWSTATE.NORMAL;
		}
	}

	addListeners() {
		routerClient.addListener(this.name + ".move", this.moved);
		routerClient.addListener(this.name + ".resize", this.resized);
		routerClient.addListener(this.name + ".endMovement", this.nativeEndMove);
		routerClient.addListener(this.name + ".location", this.locationChanged);
		routerClient.addListener(this.name + ".focused", this.focused);
		routerClient.addListener(this.name + ".minimized", this.minimized);
		routerClient.addListener(this.name + ".maximized", this.maximized);
		routerClient.addListener(this.name + ".restored", this.restored);
	}

	// Logger.system.log("window",self);
	setBounds(bounds, params, cb) {
		if (typeof params == "function") {
			cb = params;
		}
		this.location = params;
		// send to window
		routerClient.transmit("FinsembleNativeActions." + this.name, {
			action: "setBounds",
			bounds: bounds
		});
		routerClient.transmit("FinsembleNativeService.windowBoundsChanged", {
			windowName: this.name,
			bounds: bounds
		});
		if (cb) cb();
	}

	hide(params, cb) {
		if (typeof params == "function") {
			cb = params;
		}
		routerClient.transmit("FinsembleNativeActions." + this.name, {
			action: "hide"
		});
		if (cb) cb();
	}

	restore(params, cb) {
		if (typeof params == "function") {
			cb = params;
		}
		routerClient.transmit("FinsembleNativeActions." + this.name, {
			action: "restore"
		});

		if (cb) cb();
	}

	minimize(params, cb) {
		if (typeof params == "function") {
			cb = params;
		}
		routerClient.transmit("FinsembleNativeActions." + this.name, {
			action: "minimize"
		});
		if (cb) cb();
	}

	show(params, cb) {
		if (typeof params == "function") {
			cb = params;
		}
		routerClient.transmit("FinsembleNativeActions." + this.name, {
			action: "show"
		});
		if (cb) cb();
	}

	close(params, cb = Function.prototype) {
		if (typeof params === "function") {
			cb = params;
			params = {};
		}
		if (!params) params = {};

		routerClient.removeListener(this.name + ".move", this.moved);
		routerClient.removeListener(this.name + ".resize", this.resized);
		routerClient.removeListener(this.name + ".endMovement", this.nativeEndMove);
		routerClient.removeListener(this.name + ".location", this.locationChanged);
		routerClient.removeListener(this.name + ".focused", this.focused);
		params.windowName = this.name;
		routerClient.transmit("FinsembleNativeService.windowClosed", params);

		if (this.managedByAssimilation) {
			console.log("Assimilation.closeWindow", this.name);
			routerClient.query("Assimilation.closeWindow." + this.name, params, cb);
		} else {
			routerClient.query(this.name + ".closeRequested", params, () => {
				cb();
			});
		}
	}

	bringToFront(params, cb) {
		if (typeof params == "function") {
			cb = params;
		}
		routerClient.transmit("FinsembleNativeActions." + this.name, {
			action: "bringToFront"
		});
		if (cb) cb();
	}

	alwaysOnTop(params, cb = Function.prototype) {
		if (this.alwaysOnTop == params.alwaysOnTop) return;
		routerClient.transmit("FinsembleNativeActions." + this.name, {
			action: "alwaysOnTop",
			alwaysOnTop: params.alwaysOnTop
		});
		this.alwaysOnTop = params.alwaysOnTop;
		if (cb) cb();
	}

	setOpacity(opacity, cb) {
		routerClient.transmit("FinsembleNativeActions." + this.name, {
			action: "setOpacity",
			opacity: opacity
		});
		this.opacity = opacity;
		if (cb) cb();
	}

	disableFrame(cb) {
		this.frame = false; //paint
		if (cb) cb();
	}

	getBounds(cb) {
		if (this.location) {
			this.location.width = this.location.right - this.location.left;
			this.location.height = this.location.bottom - this.location.top;
			cb(null, this.location);
		} else {
			routerClient.query("FinsembleNativeService.getProperty", { name: this.name, propery: "location" }, (err, response) => {
				if (response.data) {
					this.location = response.data;
					this.getBounds(cb);
				} else cb("Could Not Get Bounds");
			});
		}
	}

	updateOptions(options, cb) {
		if (cb) cb("Not Implemented", null);
	}

	getMousePosition(cb) {
		System.getMousePosition(function (position) {
			cb(null, position);
		}, function (err) {
			cb(err);
		});
	}

	saveWindowOptions() {}

}

module.exports = FinsembleNativeWindow;

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\common\\window\\FinsembleNativeWindow.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\common\\window\\FinsembleNativeWindow.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {

const BOUNDS_CHANGING = "disabled-frame-bounds-changing";
const BOUNDS_CHANGED = "disabled-frame-bounds-changed";
var clone = __webpack_require__(79);
var Logger = __webpack_require__(2);
var routerClient = __webpack_require__(3);
var FSBLWindow = __webpack_require__(19);

var mouseLocation = {
	x: 0,
	y: 0
};

/**
 * NativeWindow
 */
class NativeWindow extends FSBLWindow {
	/**
  * @param {*} params
  * @param {string} [params.uuid]
  * @param {object} [params.location]
  * @param {string} [params.launchedByApp]
  *
  */
	constructor(params) {
		if (!params.windowType) {
			if (params.params) {
				params = Object.assign(params, params.params);
			}
			params.windowType = null;
		}
		super(params);
		Logger.system.log("registered");
		console.log("external params", params);
		this.addEventListener = this.addListener;
		this.removeEventListener = this.removeListener;
		this.windowState = FSBLWindow.WINDOWSTATE.NORMAL;
		this.isMaximized = false;
		this.key = params.uuid;
		this.saveOnBoundsChanged = this.launchedByApp;
		this.movements = [];
		this.lastLocation = this.location;
		this.events = {};
		this.lastMinimized = 0;
		this.lastRestored = 0;

		this.addListeners();
	}
	addListeners() {
		var self = this;
		/*self.addEventListener(BOUNDS_CHANGED, function () {
  	console.log("bounds changed....");
  });*/

		routerClient.addListener(this.key + ".move", function (err, message) {
			//debugger;
			Logger.system.verbose("got move ", self, message);
			self.key = message.data.uuid;
			//window.Logger.system.log("update location", message);
			// Logger.system.log("message", message);
			mouseLocation = {
				x: Number(message.data.mouseLocation.x),
				y: Number(message.data.mouseLocation.y)
			};
			if (err) {
				return Logger.system.error(err);
			}
			if (!message.data.location) {
				return;
			}
			var templocation = message.data.location;
			templocation.name = self.name;

			self.emit(BOUNDS_CHANGING, templocation);
		});

		routerClient.addListener(this.key + ".focused", function (err, message) {
			if (self.windowState == FSBLWindow.WINDOWSTATE.MINIMIZED) return; // Focus events are delayed and can happen after minimize. So ignore them if window is minimized.
			self.emit("focused", { name: self.name });
		});

		routerClient.addListener(this.key + ".minimized", function (err, message) {
			if (self.windowState != FSBLWindow.WINDOWSTATE.MINIMIZED) {
				self.lastMinimized = Date.now();
				self.emit("minimized", { name: self.name });
				self.windowState = FSBLWindow.WINDOWSTATE.MINIMIZED;
			}
		});

		routerClient.addListener(this.key + ".maximized", function (err, message) {
			if (self.windowState != FSBLWindow.WINDOWSTATE.MAXIMIZED) {
				self.emit("maximized", { name: self.name });
				self.windowState = FSBLWindow.WINDOWSTATE.MAXIMIZED;
			}
		});

		routerClient.addListener(this.key + ".restored", function (err, message) {
			if (self.windowState != FSBLWindow.WINDOWSTATE.NORMAL) {
				self.emit("restored", { name: self.name });
				self.windowState = FSBLWindow.WINDOWSTATE.NORMAL;
			}
		});

		routerClient.addListener(this.key + ".endMovement", function (err, message) {
			if (err) {
				return Logger.system.error(err);
			}
			// Logger.system.log("end sent");
			if (!message.data.location) {
				return;
			}

			location.name = self.name;
			self.emit(BOUNDS_CHANGED, location);
		});
	}

	// Logger.system.log("window",self);
	setBounds(params, cb) {
		var self = this;
		Logger.system.verbose("send move ", self);
		var newLocation = {
			left: Number(params.left),
			top: Number(params.top),
			width: Number(params.width),
			height: Number(params.height),
			right: Number(params.left) + Number(params.width),
			bottom: Number(params.top) + Number(params.height)
		};
		this.lastLocation = newLocation;
		this.location = newLocation;
		routerClient.transmit("Assimilation.moveWindow", { name: this.name, key: self.key, location: newLocation });

		if (cb) {
			cb();
		}
	}
	hide(cb) {
		routerClient.transmit("Assimilation.hideWindow", { name: this.name, key: this.key, location: this.location });
		if (cb) cb();
	}

	minimize(cb) {
		if (Date.now() - this.lastRestored < 50) return;
		routerClient.transmit("Assimilation.minimizeWindow", { name: this.name, key: this.key, location: this.location });
		if (cb) cb();
	}

	close(params, cb = Function.prototype) {
		if (typeof params === "function") {
			cb = params;
			params = {};
		}
		if (!params) params = {};
		routerClient.query("Assimilation.closeWindow." + this.name, { name: this.name, key: this.key, location: this.location }, params, cb);
	}

	show(cb) {
		routerClient.transmit("Assimilation.showWindow", { name: this.name, key: this.key, location: this.location });
		if (cb) cb();
	}
	restore(cb) {
		if (Date.now() - this.lastMinimized < 50) return;
		routerClient.transmit("Assimilation.restoreWindow", { name: this.name, key: this.key, location: this.location });
		if (cb) cb();
	}

	bringToFront(cb) {
		routerClient.transmit("Assimilation.bringToFront", { name: this.name });
		if (cb) cb();
	}

	setOpacity(opacity, cb) {
		// window.Logger.system.log("setOpacity wrapper", location);
		this.opacity = opacity;
		//routerClient.transmit("Assimilation.setOpacity",{key:key,opacity:opacity});
		if (cb) cb();
	}

	alwaysOnTop(isAlwaysOnTop, cb) {
		if (this.alwaysOnTop == isAlwaysOnTop) return;
		// window.Logger.system.log("setOpacity wrapper", location);
		this.alwaysOnTop = isAlwaysOnTop;
		routerClient.transmit("Assimilation.alwaysOnTop", { key: this.key, alwaysOnTop: isAlwaysOnTop });
		if (cb) cb();
	}

	disableFrame(cb) {
		this.frame = false; //paint
		if (cb) cb();
	}

	getMousePosition(cb) {
		cb(null, mouseLocation);
	}

	endMove() {
		routerClient.transmit("Assimilation.saveWindow", { key: this.key, location: this.location });
	}

	getBounds(cb) {
		this.location.width = this.location.right - this.location.left;
		this.location.height = this.location.bottom - this.location.top;
		cb(null, this.location);
	}

	updateOptions(options, cb) {
		if (cb) cb("Not Implemented", null);
	}

}

module.exports = NativeWindow;

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\common\\window\\externalWindowWrapper.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\common\\window\\externalWindowWrapper.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/*!
* Copyright 2017 by ChartIQ, Inc.
* All rights reserved.
*/



var RouterClient = __webpack_require__(3);
var Logger = __webpack_require__(2);

/*
Tiling Use Cases:
1) Drag a tab into window content within the same tile group.
2) Drag a tab into window content within a different tile group.
3) Drag tab into a seperate window's content
4) Drag tab into a native window's content
5) Dragging tab into a tile-group than isn’s tilable.  For example, can’t add window to a tile group that would cause a window to resize under its minimum size is legal.
6) Dragging a single-tab window into its own content area is illegal (i.e. can’t tile a window with itself).

High-Level Use Cases
A) From Tab Region: drag existing component using tab to new destination
7) From App Menu: as multiple new components are created automatically group by type (into tile group or tab group)
8) From App Menu: drag new component out of menu and drop to new destination on desktop, tab region, or inside window

NOTE: GROUPAPI CODE IS CURRENTLY UNTESTED. ALSO ROUTER INTERFACES (I.E. CHANNEL NAMES) NEEDS TO ALIGN WITH EXISTING DOCKING-SERVICE CODE
*/
class GroupAPI {

	constructor(params) {
		this.params = params;
	}

	/**
  * Creates a group, returning its groupID in the callback
  *
  * @param {object} params for future use
  * @param {function} callback function(error, groupId)
  * @memberof GroupAPI
  */
	createGroup(params, callback) {
		Logger.system.info("Docking.Group.createGroup");
		RouterClient.query("Docking.Group.createGroup", {}, function (err, queryResponseMessage) {
			if (err) {
				Logger.system.warn("Docking.Group.createGroup: query failed", err);
			} else {
				Logger.system.debug("Docking.Group.createGroup new groupId", queryResponseMessage.data);
			}
			callback(err, queryResponseMessage.data);
		});
	}

	/**
  * Returns through callback the groupId for a given window; error if windowIdentifier is not in a group
  *
  * @param {string} windowIdentifier
  * @param {object} params for future use
  * @param {function} callback function(error, groupId)
  * @memberof GroupAPI
  */
	getGroupID(windowIdentifier, params, callback) {
		Logger.system.info("Docking.Group.getGroupID", windowIdentifier);
		RouterClient.query("Docking.Group.getGroupID", { windowIdentifier }, function (err, queryResponseMessage) {
			if (err) {
				Logger.system.warn("Docking.Group.getGroupID: query failed", err);
			} else {
				Logger.system.debug("Docking.Group.getGroupID tileGroupId", queryResponseMessage.data);
			}
			callback(err, queryResponseMessage.data);
		});
	}

	/**
  * Returns through callback a group definition for a given groupIdentifier
  *
  * @param {string} groupIdentifier
  * @param {object} params for future use
  * @param {function} callback function(err, group)
  * @memberof GroupAPI
  */
	getGroup(groupIdentifier, params, callback) {
		Logger.system.info("Docking.Group.getGroupContent", windowIdentifier);
		RouterClient.query("Docking.Group.getGroupContent", { windowIdentifier }, function (err, queryResponseMessage) {
			if (err) {
				Logger.system.warn("Docking.Group.getGroupContent: query failed", err);
			} else {
				Logger.system.debug("Docking.Group.getGroupContent contents", queryResponseMessage.data);
			}
			callback(err, queryResponseMessage.data);
		});
	}

	/**
  * Add window to specified group.
  *
  * @param {string} windowIdentifier
  * @param {string} groupIdentifier
  * @param {object} params for future use
  * @param {function=} callback function(err)
  * @memberof GroupAPI
  */
	addWindow(windowIdentifier, groupIdentifier, params, callback) {
		Logger.system.info("Docking.Group.addWindow", windowIdentifier);
		RouterClient.query("Docking.Group.addWindow", { windowIdentifier, groupIdentifier }, function (err, queryResponseMessage) {
			if (err) {
				Logger.system.warn("Docking.Group.addWindow: query failed", err);
			} else {
				Logger.system.debug("Docking.Group.addWindow complete");
			}
			if (callback) callback(err); // optional callback
		});
	}
	/**
  * Remove window from specified group.
  *
  * @param {string} windowIdentifier
  * @param {string} groupIdentifier
  * @param {object} params
  * @param {function=} callback function(err)
  * @memberof GroupAPI
  */
	removeWindow(windowIdentifier, groupIdentifier, params, callback) {
		Logger.system.info("Docking.Group.decoupleWindow", windowIdentifier);
		RouterClient.query("Docking.Group.decoupleWindow", { windowIdentifier, groupIdentifier }, function (err, queryResponseMessage) {
			if (err) {
				Logger.system.warn("Docking.Group.decoupleWindow: query failed", err);
			} else {
				Logger.system.debug("Docking.Group.decoupleWindow complete");
			}
			if (callback) callback(err); // optional callback
		});
	}
}

module.exports = new GroupAPI();

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\common\\window\\groupAPI.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\common\\window\\groupAPI.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var FSBLWindow = __webpack_require__(19);
var RouterClient = __webpack_require__(3);
const BOUNDS_SET = "bounds-set";
/**
 * OpenFinWindow
 */
class OpenFinWindow extends FSBLWindow {
	/**
  *
  * @param {*} params
  * @param {finWindow} [params.finWindow] If not provided, must provide uuid
  * @param {string} [params.uuid] If not provided, must provide finWindow
  * @param {string} [params.name]
  */
	constructor(params) {
		super(params);
		this.name = params.name;
		this.uuid = params.uuid;
		this.canMinimize = typeof params.canMinimize === "undefined" ? true : params.canMinimize;
		if (params.finWindow) {
			this.finWindow = params.finWindow;
			this.uuid = this.finWindow.uuid;
			if (!this.name) this.name = this.finWindow.name;
		}

		if (!this.finWindow && this.uuid) {
			this.uuid = params.uuid;
			this.finWindow = fin.desktop.Window.wrap(params.uuid, this.name);
		}
		this.windowIdentifier = { windowName: this.name, uuid: this.uuid };
		this.wrapFunctions();
		this.initialWindowOptions = {};
		this.windowOptions = {};
		this.setMyOptions();
		this.windowState = FSBLWindow.WINDOWSTATE.NORMAL;
		this.getChannel = this.getChannel.bind(this);
		this.handleBoundsSet = this.handleBoundsSet.bind(this);
		this.addListeners();
	}

	getChannel(eventName) {
		return `${this.name}.${eventName}`;
	}

	addListeners() {
		this.finWindow.addEventListener("minimized", () => {
			this.windowState = FSBLWindow.WINDOWSTATE.MINIMIZED;
		});
		this.finWindow.addEventListener("restored", () => {
			this.windowState = FSBLWindow.WINDOWSTATE.NORMAL;
		});
		this.finWindow.addEventListener("maximized", () => {
			this.windowState = FSBLWindow.WINDOWSTATE.MAXIMIZED;
		});
		// Fire events when options are updated. e.g. alwaysOnTop
		RouterClient.addListener(this.name + ".updateOptions", (err, response) => {
			for (let o in response.data) {
				if (this.windowOptions[o] == response.data[o]) return;
				this.windowOptions[o] = response.data[o];
				let dataToEmit = {
					windowName: this.name
				};
				dataToEmit[o] = response.data[o];
				this.emit(o, response.data);
			}
		});

		RouterClient.addListener(this.getChannel(BOUNDS_SET), this.handleBoundsSet);
	}

	handleBoundsSet(err, response) {
		this.emit(BOUNDS_SET, response.data);
	}

	setMyOptions(cb) {
		this.finWindow.getOptions(opts => {
			this.initialWindowOptions = opts;
			this.windowOptions = opts;
			if (cb) cb();
		});
	}
	//Had to move this because jScrambler was screwing up when we obfuscated.
	wrapFunctions() {
		var openFinWindowFunctionsWithoutParams = ["getBounds", "disableFrame", "hide", "show", "getOptions", "isShowing", "getState"];
		openFinWindowFunctionsWithoutParams.forEach(f => {
			this[f] = cb => {
				this.callOpenFinWindowFunction(f, false, cb);
			};
		});

		var openFinWindowFunctionsWithDirectlyPassableParams = ["close", "updateOptions"];
		openFinWindowFunctionsWithDirectlyPassableParams.forEach(f => {
			this[f] = (params, cb) => {
				this.callOpenFinWindowFunction(f, params, cb);
			};
		});

		var openFinWindowFunctionsWithoutParamsToBeWrappedInIsShowing = ["maximize", "focus"];
		openFinWindowFunctionsWithoutParamsToBeWrappedInIsShowing.forEach(f => {
			this[f] = cb => {
				if (["minimize", "maximize"].includes(f) && this.windowDescriptor && !this.windowDescriptor.resizable) {
					if (cb) {
						return cb("Cannot Perform this action on non-resizable windows");
					} else {
						return;
					}
				}
				this.finWindow.isShowing(isShowing => {
					if (isShowing) {
						this.callOpenFinWindowFunction(f, false, cb);
					} else {
						if (cb) {
							cb("This Window is hidden");
						}
					}
				});
			};
		});
	}

	/**
  *
  * @param {*} functionName Name of the openFin window functio to call
  * @param {*} params  The parameters to the function (except callbacks) as an array
  * @param {*} cb The callback to be called. This is in the format function (err, response) {} and errors will be in err unlike Openfin which requires two callbacks.
  */
	callOpenFinWindowFunction(functionName, params, cb) {
		if (params) {
			if (!Array.isArray(params)) params = [params];
			// add success callback to params
			params.push((...args) => {
				// call the actual callback
				if (cb) {
					cb(null, args);
				}

				// fire event for updateOptions
				if (functionName == "updateOptions") {
					if (!params[0].dontFireEvents) {
						RouterClient.transmit(this.name + ".updateOptions", params[0]);
					}
					for (let o in params[0]) {
						// in some cases (such as our bringTofront hack we dont want to fire spurious events). Also dont fire events if the option doesnt change
						if (o == "dontFireEvents" || this.windowOptions[o] == params[0][o]) continue;
						this.windowOptions[o] = params[0][o];
						if (!params[0].dontFireEvents) {
							this.emit(o, {
								windowName: this.name,
								o: params[0][o]
							});
						}
					}
				}
			});

			// add error callback to params
			params.push(err => {
				if (cb) {
					console.error(err);
					cb(err);
				}
			});

			// call the openfin function
			this.finWindow[functionName](...params);
		} else {
			this.finWindow[functionName](function () {
				if (cb) {
					cb(null, ...arguments);
				}
			}, err => {
				if (cb) {
					console.error(err);
					cb(err);
				}
			});
		}
	}

	callOpenFinSystemFunction(functionName, params, cb) {
		if (params) {
			if (!Array.isArray(params)) params = [params];
			params.push(function () {
				if (cb) {
					cb(null, ...arguments);
				}
			});
			params.push(err => {
				if (cb) {
					console.error(err);
					cb(err);
				}
			});
			fin.desktop.System[functionName](...params);
		} else {
			fin.desktop.System[functionName](function () {
				if (cb) {
					cb(null, ...arguments);
				}
			}, err => {
				if (cb) {
					console.error(err);
					cb(err);
				}
			});
		}
	}

	minimize(params = { notifyDocking: true }) {
		let { notifyDocking } = params;
		let self = this;
		//Some windows cannot minimize, e.g., (toolbars);
		if (!this.canMinimize) return;
		function doMinimize() {
			self.windowState = FSBLWindow.WINDOWSTATE.MINIMIZED;
			self.finWindow.minimize();
		}

		this.finWindow.isShowing(isShowing => {
			if (isShowing) {
				if (notifyDocking) {
					RouterClient.query("DockingService.windowMinimized", this.name, () => {
						doMinimize();
					});
				} else {
					doMinimize();
				}
			}
		});
	}
	restore(params = { checkMinimize: true, checkMaximize: true }, cb = Function.prototype) {
		if (typeof params === "function") {
			cb = params;
			params = { checkMinimize: true, checkMaximize: true };
		}

		if (typeof params.checkMaximize === "undefined") {
			params.checkMaximize = true;
		}
		if (typeof params.checkMinimize === "undefined") {
			params.checkMinimize = true;
		}

		//this.finWindow.getState((state) => {
		if (params.checkMinimize && this.windowState === FSBLWindow.WINDOWSTATE.MINIMIZED || params.checkMaximize && this.windowState === FSBLWindow.WINDOWSTATE.MAXIMIZED) {
			this.windowState = FSBLWindow.WINDOWSTATE.NORMAL;
			//this.finWindow.restore(cb, (err) => console.error(err));
			this.callOpenFinWindowFunction("restore", false, cb);
		} else {
			if (cb) cb();
		}
		//});
	}

	bringToFront(params, cb = Function.prototype) {
		let defaults = { restoreWindows: false };
		if (typeof params === "function") {
			cb = params;
			params = defaults;
		}
		let doBringToFront = () => {
			if (this.windowOptions.alwaysOnTop) return;
			let callback = () => {
				//console.log(this.finWindow.name, this.initialWindowOptions.alwaysOnTop);
				this.finWindow.updateOptions({ alwaysOnTop: this.windowOptions.alwaysOnTop, dontFireEvents: true }, cb, err => console.error(err));
			};
			this.finWindow.updateOptions({ alwaysOnTop: true, dontFireEvents: true }, callback, err => console.error(err));
		};
		//If for some reason there's no windowOptions, go ahead and set them, then bring to front. I never saw this happen, but you know, just in case.
		if (!this.windowOptions) {
			this.setMyOptions(doBringToFront);
		}
		doBringToFront();
	}

	setOpacity(opacity, cb) {
		this.callOpenFinWindowFunction("updateOptions", { opacity: opacity }, cb);
	}

	alwaysOnTop(isAlwaysOnTop, cb) {
		if (this.windowOptions.alwaysOnTop == isAlwaysOnTop) return;
		this.windowOptions.alwaysOnTop = isAlwaysOnTop;
		this.callOpenFinWindowFunction("updateOptions", { alwaysOnTop: isAlwaysOnTop }, cb);
	}

	setTaskbarIconGroup(tasbarIconGroup, cb) {
		this.callOpenFinWindowFunction("updateOptions", { tasbarIconGroup: tasbarIconGroup }, cb);
	}

	setBounds(params, cb) {
		let ofParams = [params.left, params.top, params.width, params.height];
		RouterClient.transmit(this.getChannel(BOUNDS_SET), params);
		this.callOpenFinWindowFunction("setBounds", ofParams, cb);
	}

	animate(params, cb) {
		this.finWindow.animate(params.transitions, params.options, function () {
			if (cb) cb();
		}, function (error) {
			if (cb) cb(error);
		});
	}

	getMousePosition(cb) {
		this.callOpenFinSystemFunction("getMousePosition", false, function (err, position) {
			cb(err, position ? { x: position.left, y: position.top } : null);
		});
	}

	addEventListener(event, handler, cb) {
		this.callOpenFinWindowFunction("addEventListener", [event, handler], cb);
	}

	removeEventListener(event, handler, cb) {
		this.callOpenFinWindowFunction("removeEventListener", [event, handler], cb);
	}

	showAt(params, cb) {
		this.callOpenFinWindowFunction("showAt", [params.left, params.top, params.force], cb);
	}

}

module.exports = OpenFinWindow;

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\common\\window\\openfinWindowWrapper.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\common\\window\\openfinWindowWrapper.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/*!
* Copyright 2017 by ChartIQ, Inc.
* All rights reserved.
*/



var Validate = __webpack_require__(7); // Finsemble args validator
var BaseClient = __webpack_require__(9);
var async = __webpack_require__(12);

var Logger = __webpack_require__(2);

/**
 * @introduction
 * <h2>Config Client</h2>
 *
 * This client provides run-time access to Finsemble's configuration. See the [Configuration tutorial]{@tutorial understandingConfiguration} for an overview.
 * The Config Client functions similarly to a global store created with the Distributed Store Client and offers many of the same methods.
 * Values modified at run time are not persisted.
 *
 * @hideConstructor true
 * @constructor
 */
var ConfigClient = function (params) {
	var self = this;
	var listeners = [];
	BaseClient.call(this, params);

	/**
  * Get a value from the config.
  * @param {Object | String} params - Params object. This can also be a string
  * @param {String} params.field - The field where the value is stored.
  * @param {Function} [cb] -  Will return the value if found.
  * @returns {Any} - The value of the field. If no callback is given and the value is local, this will run synchronous
  * @example
  * 	FSBL.Clients.ConfigClient.getValue({field:'field1'},function(err,value){});
  *  FSBL.Clients.ConfigClient.getValue('field1',function(err,value){});
  */
	this.getValue = function (params, cb) {
		if (typeof params === "string") {
			params = { field: params };
		}
		if (!params.field) {
			if (!cb) {
				return "no field provided";
			}
			return cb("no field provided");
		}
		self.routerClient.query("configService.getValue", {
			field: params.field
		}, function (err, response) {
			if (err) {
				return cb(err);
			}
			return cb(err, response.data);
		});
	};

	/**
  * Get multiple values from the config.
 * @param {Object[] | String[]} fields - An array of field objects. If there are no fields proviced, the complete configuration manifest are returned.
  * @param {String} fields[].field - The name of the field
  * @param {Function} [cb] -  Will return the value if found.
  * @returns {Object} - returns an object of with the fields as keys.If no callback is given and the value is local, this will run synchronous
  * @example
 FSBL.Clients.ConfigClient.getValues([{field:'field1'},{field2:'field2'}],function(err,values){});
 FSBL.Clients.ConfigClient.getValues(['field1','field2'],function(err,values){});
 FSBL.Clients.ConfigClient.get(null, callback); // returns the complete manifest containing the finsemble property
 */
	this.getValues = function (fields, cb) {
		if (typeof fields === "function") {
			cb = fields;
			fields = null;
		}
		if (fields && !Array.isArray(fields)) {
			return this.getValue(fields, cb);
		}
		self.routerClient.query("configService.getValues", {
			fields: fields
		}, function (err, response) {
			if (err) {
				return cb(err);
			}
			return cb(err, response.data);
		});
	};

	/**
  * Set a value in the config. Setting a value will trigger events that you can listen to using addListener
  * @param {Object} params - Params object
  * @param {String} params.field - The name of the field where data will be stored
  * @param {String} params.value - Value to be stored
  * @returns {null}
  *
  * @example
  * FSBL.Clients.ConfigClient.setValue({field:'field1',value:"new value"});
  */
	this.setValue = function (params, cb) {
		var data = {
			field: params.field,
			value: params.value
		};
		return self.routerClient.query("configService.setValue", data, function (err) {
			return cb ? cb(err) : null;
		});
	};

	/**
  * This will set multiple values in the config.
  * @param {Object[]} fields - An Array of field objects
  * @param {String} fields[].field - The name of the field
  * @param {Any} fields[].value - Field value
  * @returns {null}
  *
  * @example
  * FSBL.Clients.ConfigClient.setValues([{field:'field1',value:"new value"}]);
  */
	this.setValues = function (fields, cb) {
		if (!fields) {
			return Logger.system.error("ConfigClient.SetValues. No params given");
		}
		if (!Array.isArray(fields)) {
			return Logger.system.error("ConfigClient.SetValues. Params must be an array");
		}
		return self.routerClient.query("configService.setValues", fields, function (err) {
			return cb ? cb(err) : null;
		});
	};

	/**
  * Remove a value from the config.
  * @param {Object | String} params - Either an object or string
  * @param {String} param.field - The name of the field
  * @param {Function} [cb] -  returns an error if there is one
  * @example
  * FSBL.Clients.ConfigClient.removeValue({field:'field1'},function(err,bool){});
  */
	this.removeValue = function (params, cb) {
		if (!params.field) {
			if (params !== undefined) {
				params = { field: params };
			} else {
				return cb("no field provided");
			}
		}
		params.value = null;
		return self.setValue(params, cb);
	};

	/**
  * Removes multiple values from the config.
  * @param {Object[] | String[]} params - An Array of field objects
  * @param {String} param[].field - The name of the field
  * @param {Function} [cb] -  returns an error if there is one.
  * @example
  * FSBL.Clients.ConfigClient.removeValue({field:'field1'},function(err,bool){});
  */
	this.removeValues = function (params, cb) {
		if (!Array.isArray(params)) {
			return cb("The passed in parameter needs to be an array");
		}
		async.map(params, this.removeValue, function (err, data) {
			return cb(err, data);
		});
	};

	/**
  * make sure we dont have duplicate router subscribers
  * @private
  */
	this.changeSub = function (change) {
		if (!this.subs) this.subs = {};
		if (!this.subs[change]) {
			this.routerClient.query("configService.addListener", change, function (err, queryResponse) {
				self.routerClient.subscribe(change, handleChanges);
			});
			this.subs[change] = true;
		}
	};

	/**
 * Add a listener to the config at either the root config level or field level. If no field is given, the root config level is used. You can also listen for changes to config fields any number of levels deep -- finsemble.configitem.deeperconfigitem.evendeeperconfigitem
 * @param {Object} params - Params object
 * @param {String} [params.field] - The data field to listen for. If this is empty it listen to all changes of the store.
 * @param {Function} fn -  the function to call when a listener is triggered
 * @param {Function} [cb] - callback
 * @example
 *var myFunction = function(err,data){
 }
 * FSBL.Clients.ConfigClient.addListener({field:'field1'},myFunction,cb);
 
 */
	this.addListener = function (params, fn, cb) {
		var field = null;
		if (typeof params === "function") {
			fn = params;
			params = {};
		}
		if (params.field) {
			field = params.field;
		}

		var combined = "configService" + (field ? "." + field : "");
		if (listeners[combined]) {
			listeners[combined].push(fn);
		} else {
			listeners[combined] = [fn];
		}

		self.changeSub(combined);
		return cb ? cb() : null;
	};

	/**
 * Add an array of listeners as objects or strings. If using strings, you must provide a function callback.
 * @param {Object[] | String[]} params - Params object
 * @param {String} params[].field - The data field to listen for.
 * @param {String} params[].listener - the function to call when a listener is triggered. If this is empty, fn is used.
 * @param {function=} fn -  the function to call when a listener is triggered
 *
 * @example
 *var myFunction = function(err,data){
 
 }
 FSBL.Clients.ConfigClient.addListeners([{field:'field1',listener:myFunction},{field:'field2',listener:myFunction}],null,cb);
 
 FSBL.Clients.ConfigClient.addListeners([{field:'field1'},{field:'field2',listener:myFunction}],myFunction,cb);
 
 FSBL.Clients.ConfigClient.addListeners(['field1','field2'],myFunction,cb);
 */
	this.addListeners = function (params, fn, cb) {
		if (!Array.isArray(params)) {
			return this.addListener(params, fn, cb);
		}

		for (var i = 0; i < params.length; i++) {
			var field = null;
			var item = params[i];
			var ls;
			if (typeof item === "string") {
				field = item;
			} else if (item.field) {
				field = item.field;
				ls = params[i].listener;
			}

			var combined = "configService" + (field ? "." + field : "");
			if (!ls) {
				if (fn && typeof fn === "function") {
					ls = fn;
				}
			}
			if (listeners[combined]) {
				listeners[combined].push(ls);
			} else {
				listeners[combined] = [ls];
			}
			self.changeSub(combined);
		}
		return cb ? cb() : null;
	};

	/**
  * Remove a listener from config. If no field is given, we look for a config root listener
  * @param {Object} params - Params object
  * @param {String} [params.field] - The data field
  * @param {function=} fn -  the function to remove from the listeners
  * @param {function=}cb -  returns true if it was succesfull in removing the listener.
  *
  * @example
  * var myFunction = function(err,data){
 		}
  * FSBL.Clients.ConfigClient.removeListener({field:'field1'},MyFunction,function(bool){});
 FSBL.Clients.ConfigClient.removeListener(MyFunction,function(bool){});
  */
	this.removeListener = function (params, fn, cb) {
		var field = null;

		if (typeof params === "function") {
			cb = fn;
			fn = params;
			params = {};
		}

		if (params.field) {
			field = params.field;
		}
		var combined = this.name + (field ? "." + field : "");
		if (listeners[combined]) {
			for (var i = 0; i < listeners[combined].length; i++) {
				if (listeners[combined][i] === fn) {
					listeners[combined].pop(i);
					return cb ? cb(null, true) : null;
				}
			}
		}
		return cb ? cb(null, false) : null;
	};

	/**
  * Remove an array of listeners from the config
  * @param {Object[] | String[]} params - Params object
  * @param {String} params[].field - The data field to listen for. If this is empty it listen to all changes of the store.
  * @param {String} params[].listener - The listener function
  * @param {function=} fn -  the function to remove from the listeners
  * @param {function=}cb -  returns true if it was succesfull in removing the listener.
  *
  * @example
  * var myFunction = function(err,data){
 		}
  * FSBL.Clients.ConfigClient.removeListeners({field:'field1'},MyFunction,function(bool){});
 FSBL.Clients.ConfigClient.removeListeners([{field:'field1',listener:MyFunction}],function(bool){});
 FSBL.Clients.ConfigClient.removeListeners(['field1'],MyFunction,function(bool){});
  */
	this.removeListeners = function (params, fn, cb) {
		if (!Array.isArray(params)) {
			if (typeof params === "function") {
				this.removeListener({}, params, cb);
			} else if (params.field) {
				this.removeListener(params, fn, cb);
			}
			return cb("missing fields");
		}
		var removeCount = 0;
		for (var i = 0; i < params.length; i++) {
			var field = null;
			var item = params[i];
			var ls;
			if (typeof item === "string") {
				field = item;
			} else if (item.field) {
				field = item.field;
				ls = params[i].listener;
			}

			var combined = "configService" + (field ? "." + field : "");
			if (!ls) {
				if (fn && typeof fn === "function") {
					ls = fn;
				} else {
					continue;
				}
			}

			for (var j = 0; j < listeners[combined].length; j++) {
				if (listeners[combined][j] === ls) {
					listeners[combined].pop(i);
					removeCount++;
				}
			}
		}

		if (removeCount < params.length) {
			return cb("All listeners could not be found", false);
		}
		return cb ? cb(null, true) : null;
	};

	//This handles all changes coming in from the service
	function handleChanges(err, response) {
		// we use this to format our responses
		if (err) {
			Logger.system.error(err);
		}
		if (!response.data.field) {
			response.data.field = null;
		}
		//var combined = "configService" + (response.data.field ? "." + response.data.field : "");
		var val = response.data.storeData ? response.data.storeData : response.data.value;
		triggerListeners(response.data.field ? response.data.field : "configService", val);
	}
	// Trigger any function that is listening for changes
	function triggerListeners(listenerKey, data) {
		if (listeners[listenerKey]) {
			for (var i = 0; i < listeners[listenerKey].length; i++) {
				if (typeof listeners[listenerKey][i] === "function") {
					listeners[listenerKey][i](null, { field: listenerKey, value: data });
				} else {
					Logger.system.warn("ConfigClient:triggerListeners: listener is not a function", listenerKey);
				}
			}
		}
	}

	/**
  * Get all or a portion of the configuration from the Config Service. Typically this function is used to return Finsemble configuration
  * (e.g. "finesemble.components"); however, if can also return all or part of the Openfin manifest which contains the finsemble config property.
  * If no configReference parameter is passed in (i.e. only the callback parameter is specified), then the complete manifest object is returned
  * (including manifest.finsemble).
  *
  * @param {object=} params field property indentifies specific config to return
  * @param {function} callback callback function(error, data) to get the configuration data
  * @private
  * @example
  *
  * FSBL.Clients.ConfigClient.get({ field: "finsemble" },function(err, finsemble) {
  *		if (!err) {
  *			finsembleConfig = finsemble;
  *		} else {
  *			console.error("failed to get finsemble configuration");
  *		}
  * });
  *
  * FSBL.Clients.ConfigClient.get({ field: "finsemble.isAuthEnabled" }, function(err, isAuthEnabled) {
  *		var authorizationOn = isAuthEnabled;
  * });
  *
  * FSBL.Clients.ConfigClient.get(callback); // returns the complete manifest containing the finsemble property
  * FSBL.Clients.ConfigClient.get(null, callback); // alternate form; returns the complete manifest containing the finsemble property
  * FSBL.Clients.ConfigClient.get({}, callback); // alternate form; returns the complete manifest containing the finsemble property
  * FSBL.Clients.ConfigClient.get({ field: "finsemble.components" }, callback);
  * FSBL.Clients.ConfigClient.get({ field: "finsemble.services" }, callback);
  * FSBL.Clients.ConfigClient.get({ field: "finsemble.components" },callback);
  * FSBL.Clients.ConfigClient.get({ field: "finsemble.assimilation.whitelist" }, callback);
  * FSBL.Clients.ConfigClient.get({ field: "runtime.version",callback) }; // returns the manifest's runtime.version property
  */
	this.get = function (params, callback) {
		Logger.system.debug("ConfigClient.Get", params);
		Logger.system.warn("This functionality has been deprecated. It will be removed in Finsemble version 3.0. Use getValue instead.", params);

		// if only one argument then assume no filtering parameters -- the complete manifest will be returned
		if (arguments.length === 1) {
			callback = params; // since only one arg, it must be the callback
			Validate.args(callback, "function");
			params = {};
		} else {
			Validate.args(params, "object", callback, "function");
		}
		this.routerClient.query("config.get", params, function (queryErr, queryResponse) {
			callback(queryErr, queryResponse ? queryResponse.data : null);
		});
	};

	/**
  * This is designed to mirror the get. Private because security TBD.
  * @private
  *
  * @param {any} params
  * @param {any} callback
  */

	function set(params, callback) {
		Logger.system.debug("ConfigClient.Set", params);
		// if only one argument then assume no filtering parameters -- the complete manifest will be returned
		if (arguments.length === 1) {
			callback = params; // since only one arg, it must be the callback
			Validate.args(callback, "function");
			params = {};
		} else {
			Validate.args(params, "object", callback, "function");
		}
		this.routerClient.query("config.set", params, function (queryErr, queryResponse) {
			callback(queryErr, queryResponse ? queryResponse.data : null);
		});
	}

	/**
  * Dynamically set config values within the Finsemble configuration.  New config properties may be set or existing ones modified. Note that configuration changes will not necessarily dynamically modify the components or services that use the corresponding configuration -- it depends if the component or service handles the corresponding change notifications (either though PubSub or the Config's DataStore). Also, these changes do not persist in any config files.)
  *
  * Special Note: Anytime config is set using this API, the newConfig along with the updated manifest will by published to the PubSub topic "Config.changeNotification".  To get these notifications any component or service can subscribe to the topic. An example is shown below.
  *
  * Special Note: Anytime config is set using this API, the dataStore underlying configuration 'Finsemble-Configuration-Store' will also be updated. To get these dataStore events a listener can be set as shown in the example below. However, any config modifications made directly though the DataStore will not result in corresponding PubSub notifications.
  *
  * @param {object} params
  * @param {object} params.newConfig  provides the configuration properties to add into the existing configuration under manifest.finsemble. This config must match the Finsembe config requirements as described in [Understanding Finsemble's Configuration]{@tutorial understandingConfiguration}. It can include importConfig references to dynamically fetch additional configuration files.
  * @param {boolean=} params.overwrite if true then overwrite any preexisting config with new config (can only set to true when running from same origin, not cross-domain); if false then newConfig must not match properties of existing config, including service and component configuration.
  * @param {boolean=} params.replace true specifies any component or service definitions in the new config will place all existing non-system component and service configuration
  *
  * @example
  * // Examples using processAndSet()
  *FSBL.Clients.ConfigClient.processAndSet({ newConfig: { myNewConfigField: 12345 }, overwrite: false});
  *FSBL.Clients.ConfigClient.processAndSet(
  *{
  *	newConfig: {
  *		"myNewConfigField": 12345,
  *		"myNewConfigObject": {
  *			A: "this is a test",
  *			B: "more test"
  *		},
  *		"importConfig": [
  *			"$applicationRoot/configs/application/test.json",
  *		]
  *	},
  *	overwrite: true,
  *  replace: false,
  *},
  *	function (err, finsemble) {
  *		if (err) {
  *			console.error("ConfigClient.set", err);
  *		} else {
  *			console.log("new finsemble config", finsemble);
  *		}
  *	}
  * );
  *
  *  // example subscribing to PubSub to get notifications of dynamic updates
  *RouterClient.subscribe("Config.changeNotification", function (err, notify) {
  *		console.log("set notification", notify.data.newConfig, notify.data.finsemble);
  *	});
  *
  *  // example using DataStore to get notifications of dynamic updates
  *DistributedStoreClient.getStore({ store: 'Finsemble-Configuration-Store', global: true }, function (err, configStore) {
  *		configStore.addListener({ field: "finsemble" }, function (err, newFinsembleConfig) {
  *			console.log("new manifest.finsemble configuration", newFinsembleConfig);
  *		});
  *});
  *
  */
	this.processAndSet = function (params, callback) {
		Logger.system.debug("ConfigClient.processAndSet", params);

		Validate.args(params, "object", callback, "function=") && Validate.args2("params.newConfig", params.newConfig, "object", "params.overwrite", params.overwrite, "boolean=", "params.replace", params.replace, "boolean=");

		if (!params.overwrite && params.replace) {
			var errMsg = "cannot use replace option unless overwrite is also true";
			Logger.system.warning("ConfigClient.processAndSet:", errMsg);
			if (callback) {
				callback(errMsg, null);
			}
		} else {
			this.routerClient.query("config.processAndSet", params, function (queryErr, queryResponse) {
				if (callback) {
					callback(queryErr, queryResponse ? queryResponse.data : null);
				}
			});
		}
	};

	/**
  * Sets a value on the configStore and persists that value to storage. On application restart, this value will overwrite any application defaults.
  * @param {Object} params - Params object
  * @param {String} params.field - The name of the field where data will be stored
  * @param {any} params.value - Value to be stored
  * @param {function} callback - callback to be invoked when preferences have been retrieved from the service.
  * @example
  * FSBL.Clients.ConfigClient.setPreference({field: "finsemble.initialWorkspace", value: "Workspace 2" }, (err, response) => {
  * 		//preference has been set
  * });
  */
	this.setPreference = function (params, callback) {
		this.routerClient.query("PreferencesService.setPreference", params, function (queryErr, queryResponse) {
			if (callback) {
				callback(queryErr, queryResponse ? queryResponse.data : null);
			}
		});
	};

	/**
  * Retrieves all of the preferences set for the application.
  * @param {function} callback - callback to be invoked when preferences have been retrieved from the service.
  * @example
  * FSBL.Clients.ConfigClient.getPreferences((err, preferences)=>{
  * 		//use preferences.
  * });
  */
	this.getPreferences = function (params, callback) {
		if (typeof params === "function") {
			callback = params;
			params = null;
		}
		this.routerClient.query("PreferencesService.getPreferences", params, function (queryErr, queryResponse) {
			if (callback) {
				callback(queryErr, queryResponse ? queryResponse.data : null);
			}
		});
	};
};

var configClient = new ConfigClient({
	onReady: function (cb) {
		if (cb) {
			cb();
		}
	},
	name: "configClient"
});

module.exports = configClient;

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\clients\\configClient.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\clients\\configClient.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 86 */,
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/*!
* Copyright 2017 by ChartIQ, Inc.
* All rights reserved.
*/

var BaseClient = __webpack_require__(9);
var Util = __webpack_require__(6);
var Validate = __webpack_require__(7); // Finsemble args validator

var Logger = __webpack_require__(2);

/**
 * @introduction
 * <h2>Workspace Client</h2>
 * ----------
 * The Workspace Client manages all calls to load, save, rename, and delete workspaces. For an overview, please read the [Workspace tutorial](tutorial-understandingWorkspaces.html).
 * 
 * @hideConstructor true
 * @constructor
 * @summary You don't need to ever invoke the constructor. This is done for you when WindowClient is added to the FSBL object.
 */
function WorkspaceClient(params) {
	Validate.args(params, "object=") && params && Validate.args2("params.onReady", params.onReady, "function=");
	/** @alias WorkspaceClient# */
	BaseClient.call(this, params);

	var self = this;

	/**
 * List of all workspaces within the application.
 */
	this.workspaces = [];

	/**
 * Reference to the activeWorkspace object
 */
	this.activeWorkspace = {};

	/**
  * Adds window to active workspace.
  * @private
  * @param {object} params
  * @param {string} params.name Window name
  * @param {function} cb Callback
  */
	this.addWindow = function (params, cb) {
		Validate.args(params, "object", cb, "function=") && params && Validate.args2("params.name", params.name, "string");
		cb = cb || function noop() {}; // cb is optional but not for underlying query
		this.routerClient.query("WorkspaceService.addWindow", params, (err, response) => {
			Logger.system.log(`WORKSPACE LIFECYCLE: Window added:WorkspaceClient.addWindow: Name (${params.name})`);
			cb(err, response);
		});
	};
	/**
  * AutoArranges windows.
  * @param {object} 	[params] Parameters
  * @param {string} [params.monitor] Same options as {@link LauncherClient#showWindow}. Default is monitor of calling window.
  * @param {function=} cb Callback
  * @example
  * FSBL.Clients.WorkspaceClient.autoArrange(function(err, response){
  * 		//do something after the autoarrange, maybe make all of the windows flash or notify the user that their monitor is now tidy.
  * });
  */
	this.autoArrange = function (params, cb) {
		Validate.args(params, "object", cb, "function=");
		cb = cb || function noop() {}; // cb is optional but not for underlying query
		params = params ? params : {};
		FSBL.Clients.LauncherClient.getMonitorInfo({
			windowIdentifier: FSBL.Clients.LauncherClient.myWindowIdentifier
		}, function (err, dimensions) {
			params.monitorDimensions = dimensions.unclaimedRect;
			params.monitorDimensions.name = dimensions.name;
			self.routerClient.query("DockingService.autoArrange", params, cb);
		});
	};
	/**
  * Minimizes all windows.
  * @param {object} params
  * @param {string} 	[params.monitor=all] Same options as {@link LauncherClient#showWindow} except that "all" will work for all monitors. Defaults to all.
  * @param {function} [cb] Callback.
  * @example
  * FSBL.Clients.WorkspaceClient.bringWindowsToFront();
  */
	this.minimizeAll = function (params, cb) {
		Validate.args(params, "object", cb, "function=");
		cb = cb || function noop() {}; // cb is optional but not for underlying query
		params = params ? params : { monitor: "all" };
		Util.getMyWindowIdentifier(function (myWindowIdentifier) {
			if (!params.windowIdentifier) {
				params.windowIdentifier = myWindowIdentifier;
			}
			self.routerClient.query("WorkspaceService.minimizeAll", params, cb);
		});
	};
	/**
  * Brings all windows to the front.
  * @param {object} params
  * @param {string} 	[params.monitor] Same options as {@link LauncherClient#showWindow} except that "all" will work for all monitors. Defaults to the monitor for the current window.
  * @param {function} [cb] Callback.
  * @example
  * FSBL.Clients.WorkspaceClient.bringWindowsToFront();
  */
	this.bringWindowsToFront = function (params, cb) {
		Validate.args(params, "object", cb, "function=");
		cb = cb || function noop() {}; // cb is optional but not for underlying query
		params = params ? params : { monitor: "all" };
		Util.getMyWindowIdentifier(function (myWindowIdentifier) {
			if (!params.windowIdentifier) {
				params.windowIdentifier = myWindowIdentifier;
			}
			self.routerClient.query("WorkspaceService.bringWindowsToFront", params, cb);
		});
	};

	/**
  * Gets the currently active workspace.
  * @param {function} cb Callback
  * @example <caption>This function is useful for setting the initial state of a menu or dialog. It is used in the toolbar component to set the initial state.</caption>
  *
 FSBL.Clients.WorkspaceClient.getActiveWorkspace(function (err, response) {
 	//setState is a React component method.
 	self.setState({
 		workspaces: response
 	});
 });
  */
	this.getActiveWorkspace = function (cb) {
		Validate.args(cb, "function");
		Logger.system.debug("workspaceClient getActiveWorkspace", this.activeWorkspace);

		cb(null, this.activeWorkspace);
	};

	/**
  * Returns the list of saved workspaces.
  * @param {function} cb Callback
  * @example <caption>This function is useful for setting the initial state of a menu or dialog.</caption>
  *
 FSBL.Clients.WorkspaceClient.getWorkspaces(function (err, response) {
 	//setState is a React component method.
 	self.setState({
 		workspaces: response
 	});
 });
  */
	this.getWorkspaces = function (cb) {
		Validate.args(cb, "function");
		this.routerClient.query("WorkspaceService.getWorkspaces", null, function getWorkspacesCallback(err, response) {
			if (err) {
				return Logger.system.error("WorkspaceClient.getWorkspaces:", err);
			}
			if (response) {
				cb(err, response.data);
			} else {
				cb(err, null);
			}
		});
	};

	this.setWorkspaces = function (params, cb) {
		let { workspaces } = params;
		Validate.args(cb, "function");
		this.routerClient.query("WorkspaceService.setWorkspaces", workspaces, function setWorkspacesCallback(err, response) {
			if (err) {
				return Logger.system.error("set worspaces", err);
			}
			if (response) {
				cb(err, response.data);
			} else {
				cb(err, null);
			}
		});
	};
	/**
  * Removes a workspace. Either the workspace object or its name must be provided.
  * @param {object} params
  * @param {Boolean}	[params.persist=false] Whether to persist the change.
  * @param {Object} 	[params.workspace] Workspace
  * @param {string} 	[params.name] Workspace Name
  * @param {function=} cb Callback to fire after 'Finsemble.WorkspaceService.update' is transmitted.
  * @example <caption>This function removes 'My Workspace' from the main menu and the default storage tied to the applicaton.</caption>
  * FSBL.Clients.WorkspaceClient.remove({
 	name: 'My Workspace',
 	persist: true
   }, function(err, response){
  		//You typically won't do anything here. If you'd like to do something when a workspace change happens, we suggest listening on the `Finsemble.WorkspaceService.update` channel.
   });
  */
	this.remove = function (params, cb) {
		Validate.args(params, "object", cb, "function=") && !(params.name || params.workspace) && Validate.args2("params.name", params.name, "string");
		cb = cb || function noop() {}; // cb is optional but not for underlying query

		if (typeof (params.workspace !== undefined) && params.workspace === self.activeWorkspace) {
			cb("Error: Cannot remove active workspace " + self.activeWorkspace.name, null);
			Logger.system.error("APPLICATION LIFECYCLE:  Cannot remove active workspace : WorkspaceClient.remove:attempt to remove active workspace:" + self.activeWorkspace.name);
		} else if (typeof (params.name !== undefined) && params.name === self.activeWorkspace.name) {
			cb("Error: Cannot remove active workspace name " + self.activeWorkspace.name, null);
			Logger.system.error("APPLICATION LIFECYCLE:  Cannot remove active workspace: WorkspaceClient.remove:attempt to remove active workspace name:" + self.activeWorkspace.name);
		} else {
			// remove the inactive workspace
			var defaultParams = {
				persist: false,
				workspace: null,
				name: null
			};
			//sets defaults for undefined params.
			params.prototype = Object.create(defaultParams);
			this.routerClient.query("WorkspaceService.remove", params, function removeWorkspaceCallback(err, response) {
				if (err) {
					return Logger.system.error(err);
				}
				Logger.system.log(`APPLICATION LIFECYCLE: Workspace Removed:WorkspaceClient.remove:successfully removed ${params.name}`);
				if (response) {
					cb(err, "success");
				} else {
					cb(err, null);
				}
			});
		}
	};
	/**
  * Removes window from active workspace.
  * @param {object} params
  * @param {string} params.name Window name
  * @param {function=} [cb] Callback
  * @example <caption>This method removes a window from a workspace. It is rarely called by the developer. It is called when a window that is using the window manager is closed. That way, the next time the app is loaded, that window is not spawned.</caption>
  *FSBL.Clients.WorkspaceClient.removeWindow({name:windowName}, function(err, response){
 	 //do something after removing the window.
  });
  */
	this.removeWindow = function (params, cb) {
		Validate.args(params, "object", cb, "function=") && Validate.args2("params.name", params.name, "string");
		cb = cb || function noop() {}; // cb is optional but not for underlying query
		this.routerClient.query("WorkspaceService.removeWindow", params, function removeWindowCallback(err, response) {
			if (err) {
				return Logger.system.error(err);
			}
			Logger.system.log(`WORKSPACE LIFECYCLE:WorkspaceClient.removeWindow:Window removed: Name (${params.name})`);
			if (response) {
				cb(err, response.data);
			} else {
				cb(err, null);
			}
		});
	};

	/**
  * Renames the workspace with the provided name. Also removes all references in storage to the old workspace's name.
  * @param {object} params
  * @param {string} params.oldName Name of workspace to rename.
  * @param {string} params.newName What to rename the workspace to.
  * @param {boolean=} [params.removeOldWorkspace=true] Whether to remove references to old workspace after renaming.
  * @param {boolean=} [params.overwriteExisting=false] Whether to overwrite an existing workspace.
  * @param {function=} cb Callback
  * @example <caption>This method is used to rename workspaces. It is used in the main Menu component.</caption>
  * FSBL.Clients.WorkspaceClient.rename({
 	oldName: 'My Workspace',
 	newName: 'The best workspace',
 	removeOldWorkspace: true,
   }, function(err, response){
  		//Do something.
   });
  */
	this.rename = function (params, cb) {
		Validate.args(params, "object", cb, "function=") && Validate.args2("params.oldName", params.oldName, "string", "params.newName", params.newName, "string");
		cb = cb || function noop() {}; // cb is optional but not for underlying query
		if (!params.overwriteExisting && this.workspaceIsAlreadySaved(params.newName)) {
			cb(new Error("WorkspaceAlreadySaved"), params);
			return;
		}
		this.routerClient.query("WorkspaceService.rename", params, function renameWorkspaceCallback(err, response) {
			if (err) {
				return Logger.system.error(err);
			}
			Logger.system.log(`APPLICAITON LIFECYCLE:WorkspaceClient.rename:Workspace Renamed: WorkspaceClient.rename:New Name(${params.newName}), Old Name(${params.oldName}`);
			if (response) {
				cb(err, response.data);
			} else {
				cb(err, null);
			}
		});
	};

	/**
  * Makes a clone (i.e. copy) of the workspace.  The active workspace is not affected.
  * @param {object} params
  * @param {string} params.name Name of workspace to clone.
  * @param {function} Callback cb(err,response) with response set to the name of the cloned workspace if no error
  * @example <caption>This method is used to clone workspaces. </caption>
  * FSBL.Clients.WorkspaceClient.clone({
 	name: 'The best workspace'
   }, function(err, response){
 			//Do something.
   });
  */
	this.clone = function (params, cb) {
		Validate.args(params, "object", cb, "function=") && Validate.args2("params.name", params.name, "string");
		cb = cb || function noop() {}; // cb is optional but not for underlying query
		this.routerClient.query("WorkspaceService.clone", params, function cloneWorkspaceCallback(err, response) {
			if (err) {
				return Logger.system.error(err);
			}
			if (response) {
				cb(err, response.data.newWorkspaceName);
			} else {
				cb(err, null);
			}
		});
	};

	/**
  * Saves the currently active workspace. It does not overwrite the saved instance of the workspace. It simply overwrites the <code>activeWorkspace</code> key in storage.
  * @param {function} cb Callback
  * @example <caption>This function persists the currently active workspace.</caption>
  * FSBL.Clients.WorkspaceClient.save(function(err, response){
 			//Do something.
   });
  */
	this.save = function (cb) {
		Validate.args(cb, "function=");
		cb = cb || function noop() {}; // cb is optional but not for underlying query
		this.routerClient.query("WorkspaceService.save", null, cb);
	};
	/**
  * Helper that tells us whether a workspace is saved.
  * @private
  */
	this.workspaceIsAlreadySaved = function (workspaceName) {
		Validate.args(workspaceName, "string");
		for (var i = 0; i < self.workspaces.length; i++) {
			if (workspaceName === self.workspaces[i].name) {
				return true;
			}
		}
		return false;
	};
	/**
  *
  * Saves the currently active workspace with the provided name.
  * @param {object} params
  * @param {string} params.name new name to save workspace under.
  * @param {string} [params.force=false] Whether to overwrite a workspace already saved with the provided name.
  * @param {function} cb Callback
  * @example <caption>This function persists the currently active workspace with the provided name.</caption>
  * FSBL.Clients.WorkspaceClient.saveAs({
 	name: 'My Workspace',
   }, function(err, response){
 			//Do something.
   });
  */
	this.saveAs = function (params, cb) {
		Validate.args(params, "object", cb, "function=") && Validate.args2("params.name", params.name, "string");
		cb = cb || function noop() {}; // cb is optional but not for underlying query

		if (!params.force && this.workspaceIsAlreadySaved(params.name)) {
			cb(new Error("WorkspaceAlreadySaved"), null);
			return;
		}
		this.routerClient.query("WorkspaceService.saveAs", params, function workspaceSaveAsCallback(err, response) {
			if (err) {
				return Logger.system.error("APPLICATION LIFECYCLE:Workspace Save As:WorkspaceClient.saveAs", err);
			}
			Logger.system.log(`APPLICATION LIFECYCLE:Workspace Saved As:WorkspaceClient.saveAs: Name:${params.name}`);
			if (response) {
				cb(err, response.data);
			} else {
				cb(err, null);
			}
		});
	};

	/**
  * Switches to a workspace.
  * @param {object} params
  * @param {string} 	params.name Workspace Name
  * @param {function} cb Callback
  * @example <caption>This function loads the workspace 'My Workspace' from the storage tied to the application.</caption>
  * FSBL.Clients.WorkspaceClient.switchTo({
 	name: 'My Workspace',
   }, function(err, response){
 			//Do something.
   });
  */
	this.switchTo = function (params, cb) {
		Logger.system.log("APPLICATION LIFECYLE:Loading Workspace:WorkspaceClient.switchTo:" + params.name);
		Validate.args(params, "object", cb, "function") && Validate.args2("params.name", params.name, "string");
		// not the workspace will be undated in this client before the below query response is received (see 'Finsemble.orkspaceService.update' listener)
		this.routerClient.query("WorkspaceService.switchTo", params, function (err, response) {
			var res = null;
			if (err) {
				Logger.system.error("APPLICATION LIFECYLE:Loading Workspace:WorkspaceClient.switchTo:", err);
			} else {
				Logger.system.log("APPLICATION LIFECYLE:Loading Workspace:WorkspaceClient.switchTo:success" + params.name);
				self.activeWorkspace = response.data;
				res = self.activeWorkspace;
			}
			if (cb) {
				cb(err, res);
			}
		});
	};

	/**
  * Checks to see if the workspace is dirty. If it's already dirty, the window doesn't need to compare its state to the saved state.
  * @param {Function} Callback cb(err,response) with response set to true if dirty and false otherwise (when no error)
  * @example <caption>This function will let you know if the activeWorkspace is dirty.</caption>
  * FSBL.Clients.WorkspaceClient.isWorkspaceDirty(function(err, response){
 			//Do something like prompt the user if they'd like to save the currently loaded workspace before switching.
   });
  */
	this.isWorkspaceDirty = function (cb) {
		Validate.args(cb, "function");
		cb(null, this.activeWorkspace.isDirty);
	};
	function escapeRegExp(str) {
		return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
	}
	/**
  * If more than one copy of the workspaceName has been saved, this function returns the next number in the sequence. See the example section for more. This is an internal helper.
  * @private
  * @param {string} workspaceName
  * @example
  * workspaceList = "apple banna ketchup"
  * getWorkspaceName("mayo") returns "mayo".
  *
  * workspaceList = "apple banna ketchup ketchup (1)"
  * getWorkspaceName("ketchup") returns "ketchup (2)".
  *
  * workspaceList = "apple banna ketchup ketchup (1) ketchup (2) ketchup (7)";
  * getWorkspaceName("ketchup") returns "ketchup (8)".
  *
  */
	this.getWorkspaceName = function (workspaceName) {
		var workspaces = FSBL.Clients.WorkspaceClient.workspaces;
		let workspaceNames = workspaces.map(workspace => workspace.name);
		let escapedName = escapeRegExp(workspaceName);
		//match "name" or "name (143)" or "name (2)"

		//Number of modifiers already on the name.
		let existingModifiers = workspaceName.match(/\(\d+\)/g);
		let numModifiers = existingModifiers === null ? "{1}" : `{${existingModifiers.length++}}`;
		let matchString = `\\b(${escapedName})(\\s\\(\\d+\\)${numModifiers})?\\,`;
		let regex = new RegExp(matchString, "g");
		let matches = workspaceNames.sort().join(",").match(regex);

		if (matches && matches.length) {
			let lastMatch = matches.pop();
			//Find the last modifier at the end (NUMBER), and get rid of parens.
			let highestModifier = lastMatch.match(/\(\d+\)\,/g);
			// console.log(existingModifiers ? existingModifiers.length : 0, modifier ? modifier.length : 0);
			//If we're trying to create something stupid like "workspace (1) (1)", and workspace (1) (1) already exists, they'll spit out workspace (1) (1) (2).
			console.log("Existing modifiers", existingModifiers ? existingModifiers.length : 0, highestModifier ? highestModifier.length : 0, highestModifier, matches);
			if (existingModifiers && existingModifiers.length != highestModifier.length) {
				workspaceName = lastMatch.replace(",", "") + " (1)";
			} else {
				if (highestModifier && highestModifier.length) {
					highestModifier = highestModifier[highestModifier.length - 1];
					highestModifier = highestModifier.replace(/\D/g, "");
					highestModifier = parseInt(highestModifier);
					highestModifier++;
					workspaceName = lastMatch.replace(/\(\d+\)\,/g, `(${highestModifier})`);
				} else {
					highestModifier = 1;
					workspaceName += " (" + highestModifier + ")";
				}
			}
		}
		return workspaceName;
	};
	/**
  * Creates a new workspace. After creation the new workspace becomes the active workspace.
  * @param {String} workspaceName name for new workspace
  * @param {Object=} params optional params
  * @param {string} params.templateName name of template to use when creating workspace; if no template then empty workspace will be created
  * @param {boolean} [params.switchAfterCreation = true] Whether to switch to the new workspace after creating it.
  * @param {Function=} Callback cb(err,response) with response set to new workspace object if no error
  * @example <caption>This function creates the workspace 'My Workspace'.</caption>
  * FSBL.Clients.WorkspaceClient.createNewWorkspace(function(err, response){
  *		if (!err) {}
  *			//Do something like notify the user that the workspace has been created.
  *		}
  * });
  */
	this.createNewWorkspace = function (workspaceName, params, cb) {
		if (arguments.length === 2) {
			// if no params then second argument must be the cb
			cb = params;
			params = {};
		}

		var templateName = null;
		if (params && params.templateName) {
			templateName = params.templateName;
		}
		Logger.system.log(`APPLICATION LIFECYCLE:Create New Workspace:Workspacelient.createNewWorkspace: Name (${workspaceName})`);

		Validate.args(workspaceName, "string", params, "object=", cb, "function=");

		cb = cb || Function.prototype; // default to no-op

		//makse sure we don't duplicate an existing workspace.
		workspaceName = this.getWorkspaceName(workspaceName);
		Validate.args(workspaceName, "string", params, "object=", cb, "function=");
		//Default behavior is to switch after creating workspace.
		if (params.switchAfterCreation !== false) {
			Logger.system.log(`APPLICATION LIFECYCLE:Create New Workspace:Workspacelient.createNewWorkspace: Name (${workspaceName})`);
			this.switchTo({ name: workspaceName, templateName }, cb);
		} else {
			let workspace = new WorkspaceDefinition(workspaceName);
			this.addWorkspaceDefinition({
				workspaceJSONDefinition: workspace
			}, cb);
		}
	};

	this.getGroupData = function (cb) {
		cb(this.activeWorkspace.groups);
	};

	this.saveGroupData = function (data) {
		this.routerClient.transmit("WorkspaceService.saveGroupData", {
			groupData: data
		});
	};

	/**
  * Gets a workspace definition in JSON form.
  *
  * @param {object} params
  * @param {string} params.workspaceName the workspace name
  * @param {function} callback callback(error,workspaceDefinition)
  */
	this.getWorkspaceDefinition = function (params, callback) {
		Logger.system.info("workspaceClient.getWorkspaceDefinition", params);
		Validate.args(params, "object", callback, "function") && Validate.args2("params.workspaceName", params.workspaceName, "string");
		var workspaceName = params.workspaceName;
		this.routerClient.query("WorkspaceService.getWorkspaceDefinition", { workspaceName }, function (err, response) {
			let workspaceDefinition = response.data;
			let exportFormat = {};
			exportFormat[workspaceName] = workspaceDefinition;
			callback(err, exportFormat);
		});
	};

	/**
  * Adds a workspace definition to the list of available workspaces.
  *
  * @param {object} params
  * @param {object} params.workspaceJSONDefinition JSON for workspace definition
  * @param {function=} callback callback(err) where the operation was successful if !err; otherwise, err carries diagnostics
  *
  * @private
  */
	this.addWorkspaceDefinition = function (params, callback) {
		Logger.system.info("workspaceClient.addWorkspaceDefinition", params);
		Validate.args(params, "object", callback, "function=") && Validate.args2("params.workspaceJSONDefinition", params.workspaceJSONDefinition, "object");
		var workspaceJSONDefinition = params.workspaceJSONDefinition;
		var error = null;
		var workspaceName = Object.keys(workspaceJSONDefinition)[0];
		let viableWorkspaceName = this.getWorkspaceName(workspaceName);
		//If we already have a workspace with this name, we append a number to the end of it, and save it that way. The user can easily rename via the UI if they don't like the name.
		if (workspaceName !== viableWorkspaceName) {
			Logger.system.debug("Workspace name already exists. New name: ", viableWorkspaceName);
			workspaceJSONDefinition[viableWorkspaceName] = workspaceJSONDefinition[workspaceName];
			delete workspaceJSONDefinition[workspaceName];
			//New name.
			workspaceName = viableWorkspaceName;
			workspaceJSONDefinition[workspaceName].name = workspaceName;
		}

		if (typeof workspaceJSONDefinition === "object") {
			if (workspaceName && workspaceJSONDefinition[workspaceName].workspaceDefinitionFlag) {
				this.routerClient.query("WorkspaceService.addWorkspaceDefinition", { workspaceJSONDefinition }, function (err) {
					error = err;
				});
			} else {
				error = "workspaceClient.addWorkspaceDefinition: not legal workspace JSON";
			}
		} else {
			error = "workspaceClient.addWorkspaceDefinition: not legal workspace JSON";
		}
		Logger.system.debug("workspaceClient.addWorkspaceDefinition result", error || "successful");
		callback && callback(error); // invoke callback if defined
	};

	// validates legal workspace definition
	function validWorkspaceDefinition(workspaceJSON) {
		var result = false;
		if (typeof workspaceJSON === "object") {
			var workspaceName = Object.keys(workspaceJSON)[0];
			if (workspaceName && workspaceJSON[workspaceName].workspaceDefinitionFlag) {
				result = true;
			} else {
				Logger.system.error("workspaceClient.workspaceClient.convertWorkspaceDefinitionToTemplate: not legal workspace JSON", workspaceJSON);
			}
		} else {
			Logger.system.error("workspaceClient.workspaceClient.convertWorkspaceDefinitionToTemplate: input is not a legal object", workspaceJSON);
		}
		return result;
	}

	// constructor for new template given a workspace definition to derive it from
	function WorkspaceTemplate(templateName, workspaceJSON) {
		var newTemplate = workspaceJSON;
		var workspaceName = Object.keys(workspaceJSON)[0];
		newTemplate = Util.clone(workspaceJSON);
		newTemplate[templateName] = newTemplate[workspaceName];
		newTemplate[templateName].templateDefinitionFlag = true;
		newTemplate[templateName].name = templateName; // name is also carried in object for use in service
		if (templateName !== workspaceName) {
			// if using same name then can't delete data associated with name
			delete newTemplate[workspaceName];
		}
		delete newTemplate[templateName].workspaceDefinitionFlag;
		return newTemplate;
	}
	//Constructor for a new workspace definition. Given a name, it returns an empty workspace. Given some JSON, it'll merge the windows property with the new workspace.
	function WorkspaceDefinition(workspaceName, workspaceJSON) {
		var newWorkspace = {
			[workspaceName]: {
				workspaceDefinitionFlag: true,
				windows: [],
				name: workspaceName
			}
		};
		if (workspaceJSON) {
			let workspaceName = Object.keys(workspaceJSON)[0];
			let clonedWorkspace = Util.clone(workspaceJSON);
			if (clonedWorkspace[workspaceName] && clonedWorkspace[workspaceName].windows) {
				clonedWorkspace[workspaceName].windows = clonedWorkspace[workspaceName].windows;
			}
		}
		return newWorkspace;
	}
	/**
  * Convert a workspace JSON definition to a template JSON definition
  * @param {object} params
 	 * @param {string} params.newTemplateName template name for the new converted definition
  * @param {object} params.workspaceDefinition a workspace JSON definition return from getWorkspaceDefinition()
  * @returns the new template definition. If null then an error occurred because workspaceDefinition wasn't a legal JSON definition for a workspace
  */
	this.convertWorkspaceDefinitionToTemplate = function (params) {
		Logger.system.info("WorkspaceClient.convertWorkspaceDefinitionToTemplate", params);
		Validate.args(params, "object") && Validate.args2("params.newTemplateName", params.newTemplateName, "string", "params.workspaceDefinition", params.workspaceDefinition, "object");
		var templateJSON = null;
		if (validWorkspaceDefinition(params.workspaceDefinition)) {
			templateJSON = new WorkspaceTemplate(params.newTemplateName, params.workspaceDefinition);
		}
		return templateJSON;
	};

	/**
  * Get a template definition in JSON format.
  *
  * @param {object} params
  * @param {string} params.templateName name of template
  * @param {function} callback
  */
	this.getWorkspaceTemplateDefinition = function (params, callback) {
		Logger.system.info("workspaceClient.getWorkspaceTemplateDefinition", params);
		Validate.args(params, "object", callback, "function") && Validate.args2("params.newTemplateName", params.newTemplateName, "string");
		var templateName = params.templateName;
		this.routerClient.query("WorkspaceService.getWorkspaceTemplateDefinition", { templateName }, function (err, response) {
			Logger.system.debug("workspaceClient.getWorkspaceTemplateDefinition response", err, response.data);
			let workspaceTemplateDefinition = response.data;
			let exportFormat = {
				[templateName]: workspaceTemplateDefinition
			};
			callback(err, exportFormat);
		});
	};

	/**
  * Adds a template definition.  This adds to the template choices available when creating a new workspace.  The definition will persistent until removed with removeWorkspaceTemplateDefinition().
  *
  * @param {object} params
  * @param {object} params.workspaceTemplateDefinition JSON template definition typically from getWorkspaceTemplateDefinition() or convertWorkspaceDefinitionToTemplate()
  * @param {boolean=} params.force if true an existing template with the same name will be overwritten
  * @param {function=} callback
  */
	this.addWorkspaceTemplateDefinition = function (params, callback) {
		Logger.system.info("workspaceClient.addWorkspaceTemplateDefinition", params);
		Validate.args(params, "object", callback, "function=") && Validate.args2("params.workspaceTemplateJSONDefinition", params.workspaceTemplateJSONDefinition, "object");
		var workspaceTemplateDefinition = params.workspaceTemplateDefinition;
		var error, result;

		if ("workspaceTemplates" in workspaceTemplateDefinition) {
			// if JSON object has wrapper used for config then remove it
			let workspaceTemplates = workspaceTemplateDefinition.workspaceTemplates;
			workspaceTemplateDefinition = workspaceTemplates;
			Logger.system.debug("workspaceClient.addWorkspaceTemplateDefinition modified workspaceTemplateDefinition", workspaceTemplateDefinition);
		}

		Logger.system.debug("workspaceClient.addWorkspaceTemplateDefinition workspaceTemplateDefinition", workspaceTemplateDefinition);

		if (typeof workspaceTemplateDefinition === "object") {
			var templateName = Object.keys(workspaceTemplateDefinition)[0];
			Logger.system.debug("workspaceClient.addWorkspaceTemplateDefinition templateName", templateName);
			if (templateName && workspaceTemplateDefinition[templateName].templateDefinitionFlag) {
				this.routerClient.query("WorkspaceService.addWorkspaceTemplateDefinition", { workspaceTemplateDefinition, params }, function (err, response) {
					result = response.data;
				});
			} else {
				error = "workspaceClient.addWorkspaceTemplateDefinition: illegal template JSON";
			}
		} else {
			error = "workspaceClient.addWorkspaceTemplateDefinition: input is not a legal object";
		}
		Logger.system.debug("workspaceClient.addWorkspaceTemplateDefinition result", error, result);
		callback && callback(error, result); // invoke callback if defined
	};

	/**
  * Removes template definition (keep in mind if the template is defined in config then it will automatically be recreated on each startup)
  *
  * @param {object} params
  * @param {string} params.workspaceTemplateName
  * @param {function=} callback callback(err) is invoked on completion. If !err then the operation was successful; otherwise, err carries diagnostics
  */
	this.removeWorkspaceTemplateDefinition = function (params, callback) {
		Logger.system.info("workspaceClient.removeWorkspaceTemplateDefinition", workspaceTemplateName);
		Validate.args(params, "object", callback, "function=") && Validate.args2("params.workspaceTemplateName", params.workspaceTemplateName, "string");
		var workspaceTemplateName = params.workspaceTemplateName;
		this.routerClient.query("WorkspaceService.removeWorkspaceTemplateDefinition", { workspaceTemplateName }, function (err) {
			callback && callback(err); // invoke callback if defined
		});
	};

	/**
  * Saves one mor more template defintions in a selected file. Note the end user is prompted to identify file location during this save operation.  The file can optionally be imported during config initialization (see importConfig) although this requires administration support on the configuration/server side. The file can also be read using readWorkspaceTemplateFromConfigFile();
  *
  * @param {object} params
  * @param {object} params.workspaceTemplateDefinition legal template definition returned by either getWorkspaceTemplateDefinition() or convertWorkspaceDefinitionToTemplate()
  */
	this.saveWorkspaceTemplateToConfigFile = function (params) {
		Logger.system.info("workspaceClient.saveWorkspaceTemplateToConfigFile", params);
		Validate.args(params, "object") && Validate.args2("params.workspaceTemplateDefinition", params.workspaceTemplateDefinition, "object");
		var workspaceTemplateDefinition = params.workspaceTemplateDefinition;
		if (typeof workspaceTemplateDefinition === "object") {
			var templateName = Object.keys(workspaceTemplateDefinition)[0];
			if (templateName && workspaceTemplateDefinition[templateName].templateDefinitionFlag) {
				// confirm the object is a template definition
				var exportConfig = { workspaceTemplates: workspaceTemplateDefinition };
				FSBL.ConfigUtils.promptAndSaveJSONToLocalFile("workspaceConfig-" + templateName, exportConfig);
			} else {
				Logger.system.error("workspaceClient.saveWorkspaceTemplateToConfigFile. Input is not a legal template");
			}
		} else {
			Logger.system.error("workspaceClient.saveWorkspaceTemplateToConfigFile: Input is not a legal object");
		}
	};

	/**
  * Gets all workspace template definitions from workspace service.
  *
 * @param {function} callback callback(templateDefinitions) where templateDefinitions is an object containing all known template definitions; each property in templateDefinitions is a template
  */
	this.getTemplates = function (callback) {
		Logger.system.info("workspaceClient.getTemplates");
		Validate.args(callback, "function");
		this.routerClient.query("WorkspaceService.getTemplates", {}, function (err, response) {
			let templateDefinitions = {};
			if (!err) {
				templateDefinitions = response.data;
			}
			Logger.system.debug("workspaceClient.getTemplates response", err, templateDefinitions);
			callback(templateDefinitions);
		});
	};

	/**
  * Initializes listeners and sets default data on the WorkspaceClient object.
  * @private
  */
	this.start = function (cb) {
		/**
   * Initializes the workspace's state.
   */

		this.routerClient.subscribe("Finsemble.WorkspaceService.update", function (err, response) {
			Logger.system.debug("workspaceClient init subscribe response", err, response);
			if (response.data && response.data.activeWorkspace) {
				self.workspaceIsDirty = response.data.activeWorkspace.isDirty;
				self.workspaces = response.data.workspaces;
				self.activeWorkspace = response.data.activeWorkspace;
			}

			self.getActiveWorkspace(function (err, response) {
				self.activeWorkspace = response;
				self.getWorkspaces(function (err2, response2) {
					self.workspaces = response2;
					if (cb) {
						cb();
					}
				});
			});
		});
	};

	return this;
}

var workspaceClient = new WorkspaceClient({
	startupDependencies: {
		services: ["workspaceService"],
		clients: []
	},
	onReady: function (cb) {
		workspaceClient.start(() => {
			FSBL.Clients.LauncherClient.onReady(cb);
		});
	},
	name: "workspaceClient"
});

module.exports = workspaceClient;

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\clients\\workspaceClient.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\clients\\workspaceClient.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {/**
 * Lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    asyncTag = '[object AsyncFunction]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    nullTag = '[object Null]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    proxyTag = '[object Proxy]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    undefinedTag = '[object Undefined]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined,
    Symbol = root.Symbol,
    Uint8Array = root.Uint8Array,
    propertyIsEnumerable = objectProto.propertyIsEnumerable,
    splice = arrayProto.splice,
    symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols,
    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
    nativeKeys = overArg(Object.keys, Object);

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView'),
    Map = getNative(root, 'Map'),
    Promise = getNative(root, 'Promise'),
    Set = getNative(root, 'Set'),
    WeakMap = getNative(root, 'WeakMap'),
    nativeCreate = getNative(Object, 'create');

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(array);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!cacheHas(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(object);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */
function isEqual(value, other) {
  return baseIsEqual(value, other);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = isEqual;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(10)(module)))

/***/ }),
/* 89 */,
/* 90 */,
/* 91 */,
/* 92 */,
/* 93 */,
/* 94 */,
/* 95 */,
/* 96 */,
/* 97 */,
/* 98 */,
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var Logger = __webpack_require__(2);

class BoxMath {
	static isPointOnSegment(point, segment) {
		//y = mx + b;
		//Equation above transforms into this:
		//(y - y1)	 x - x1
		//-------- = --------
		//y2 - y1 	 x2 - x1

		//which is this:
		//(y - y1) * (x2 - x1) = (x - x1) * ( y2 - y1)
		var x = point.x,
		    y = point.y,
		    x1 = segment.min.x,
		    x2 = segment.max.x,
		    y1 = segment.min.y,
		    y2 = segment.max.y;

		var isInBounds = x >= x1 && x <= x2 && y >= y1 && y <= y2;
		//The equation above will tell us whether the point is on the line, assuming it has no start and end. This checks to see if the point is within the beginning and end of the segment. If not, it can't be on our segment.
		if (!isInBounds) {
			return false;
		}
		var isOnLine = (y - y1) * (x1 - x2) === (x - x1) * (y1 - y2);
		return isOnLine;
	}

	/**
 * @function {function name}
 * @param  {type} req {description}
 * @return {type} {description}
 */
	static getVertices(req) {
		return [
		//top left
		{
			x: req.left,
			y: req.top,
			label: "topLeft"
		},
		//top right
		{
			x: req.right,
			y: req.top,
			label: "topRight"
		}, {
			x: req.right,
			y: req.bottom,
			label: "bottomRight"
		}, {
			x: req.left,
			y: req.bottom,
			label: "bottomLeft"
		}];
	}

	/**
 * @function {function name}
 * @param  {type} segment {description}
 * @return {type} {description}
 */
	static getVertexOnSegment(segment) {
		for (let vertex in this.vertices) {
			if (BoxMath.isPointOnSegment(this.vertices[vertex], segment)) {
				return vertex;
			}
		}
		return false;
	}

	/**
 * @function {function name}
 * @param  {type} bounds     {description}
 * @param  {type} bufferSize {description}
 * @return {type} {description}
 */
	static getSnappingRegions(bounds, bufferSize = 0) {
		let { left, top, right, bottom } = bounds;
		let leftMinusBuffer = left - bufferSize,
		    leftPlusBuffer = left + bufferSize,
		    topMinusBuffer = top - bufferSize,
		    topPlusBuffer = top + bufferSize,
		    rightMinusBuffer = right - bufferSize,
		    rightPlusBuffer = right + bufferSize,
		    bottomPlusBuffer = bottom + bufferSize,
		    bottomMinusBuffer = bottom - bufferSize;
		return {
			topLeft: {
				min: {
					x: leftMinusBuffer,
					y: topMinusBuffer
				},
				max: {
					x: leftPlusBuffer,
					y: top
				}
			},
			topRight: {
				min: {
					x: rightMinusBuffer,
					y: topMinusBuffer
				},
				max: {
					x: rightPlusBuffer,
					y: top
				}
			},
			rightTop: {
				min: {
					x: right,
					y: top
				},
				max: {
					x: rightPlusBuffer,
					y: topPlusBuffer
				}
			},
			rightBottom: {
				min: {
					x: right,
					y: bottomMinusBuffer
				},
				max: {
					x: rightPlusBuffer,
					y: bottom
				}
			},

			bottomLeft: {
				min: {
					x: leftMinusBuffer,
					y: bottom
				},
				max: {
					x: leftPlusBuffer,
					y: bottomPlusBuffer
				}
			},
			bottomRight: {
				min: {
					x: rightMinusBuffer,
					y: bottom
				},
				max: {
					x: rightPlusBuffer,
					y: bottomPlusBuffer
				}
			},
			leftTop: {
				min: {
					x: leftMinusBuffer,
					y: top
				},
				max: {
					x: left,
					y: topPlusBuffer
				}
			},
			leftBottom: {
				min: {
					x: leftMinusBuffer,
					y: bottomMinusBuffer
				},
				max: {
					x: left,
					y: bottom
				}
			},
			left: {
				min: {
					x: leftMinusBuffer,
					y: topMinusBuffer
				},
				max: {
					x: leftPlusBuffer,
					y: bottomPlusBuffer
				}
			},
			bottom: {
				min: {
					x: leftMinusBuffer,
					y: bottom
				},
				max: {
					x: rightPlusBuffer,
					y: bottomPlusBuffer
				}
			},
			right: {
				min: {
					x: rightMinusBuffer,
					y: topPlusBuffer
				},
				max: {
					x: rightPlusBuffer,
					y: bottomPlusBuffer
				}
			},
			top: {
				min: {
					x: left,
					y: topMinusBuffer
				},
				max: {
					x: right,
					y: top
				}
			},
			inner: {
				min: {
					x: left,
					y: top
				},
				max: {
					x: right,
					y: bottom
				}
			}
		};
	}

	/**
 * @function {function name}
 * @param  {type} bounds {description}
 * @return {type} {description}
 */
	static getWindowBoundingBox(bounds) {
		return {
			min: {
				x: bounds.left,
				y: bounds.top
			},
			max: {
				x: bounds.right,
				y: bounds.bottom
			}
		};
	}

	static between(params) {
		var min = params.min,
		    max = params.max,
		    num = params.num,
		    inclusive = params.inclusive;
		if (inclusive) {
			return num >= min && num <= max;
		}
		return num > min && num < max;
	}

	/**
 * @function {function name}
 * @param  {type} window1 {description}
 * @param  {type} window2 {description}
 * @return {type} {description}
 */
	static intersectBoundingBoxes(window1, window2) {
		if (window1.max.x < window2.min.x) {
			return false;
		} // 1 is left of 2
		if (window1.min.x > window2.max.x) {
			return false;
		} // 1 is right of 2
		if (window1.max.y < window2.min.y) {
			return false;
		} // 1 is above 2
		if (window1.min.y > window2.max.y) {
			return false;
		} // 1 is below 2
		return true; // boxes overlap
	}

	/**
 * @function {function name}
 * @param  {type} num {description}
 * @param  {type} pct {description}
 * @return {type} {description}
 */
	static getPct(num, pct) {
		return pct * num;
	}

	/**
 * @function {function name}
 * @param  {type} num {description}
 * @param  {type} pct {description}
 * @return {type} {description}
 */
	static scaleProportionately(num, pct) {
		return Math.floor(num + this.getPct(num, pct));
	}

	/**
 * @function {function name}
 * @param  {type} num1 {description}
 * @param  {type} num2 {description}
 * @return {type} {description}
 */
	static getPercentChange(num1, num2) {
		var pctChange = Math.abs((num1 - num2) / num1);
		if (num2 < num1) {
			pctChange = -pctChange;
		}
		return pctChange;
	}

	/**
  * Gets the area of the overlap between two rectangles.
  * @param {*} rect1
  * @param {*} rect2
  */
	static getOverlap(rect1, rect2) {
		let x_overlap = Math.max(0, Math.min(rect1.right, rect2.right) - Math.max(rect1.left, rect2.left));
		let y_overlap = Math.max(0, Math.min(rect1.bottom, rect2.bottom) - Math.max(rect1.top, rect2.top));
		return x_overlap * y_overlap;
	}

	/**
  * Checks if point is in box (inclusive)
  * @param {*} point
  * @param {*} box
  */
	static isPointInBox(point, box) {
		if (point.left) point.x = point.left;
		if (point.top) point.y = point.top;
		if (!box.right) box.right = box.left + box.width;
		if (!box.bottom) box.bottom = box.top + box.height;
		if (point.x >= box.left && point.x <= box.right && point.y >= box.top && point.y <= box.bottom) {
			return true;
		}
		return false;
	}
	/**
  * Clip A with B. return where the boxes don't intersect.
  * @param {DockableBox} rectA
  * @param {DockableBox} rectB
  *
  * @memberof BoxMath
  */
	static clipRect(rectA, rectB, edge) {
		let clip = rectA;
		let corners = this.getVertices(rectB);
		//This array will hold the corners of the clipping rectangle that are within the clipped rectangle's boundaries.
		let cornersInBox = [];
		for (let i = 0; i < corners.length; i++) {
			let corner = corners[i];
			corner.label = corner.label.toLowerCase();
			//The goal here is to detect which edges of the clipping box exists within the clipped box's boundaries - EXCLUDING the edges of the clipped box.

			/**
    * The A = B + C. In other words, it's our hole. B is the window that we're using to fill the hole.
    *
   		In this case, A and B share their top right and top left corners. ALl we care about here is the bottom left and bottom right of B.
   		The result of this function is C.
    		+-------------------+
   		|                   |
   		|                   |
   		|                   |
   		|                   |
   		|         B         |
   		|                   |
   		|                   |
   		|                   |
   		+-------------------+
   		|                   |
   		|                   |
   		|                   |
   		|                   |
   		|         C         |
   		|                   |
   		|                   |
   		|                   |
   		|                   |
   		|                   |
   		+-------------------+
    * */

			//The block of code below kicks out any points on B that are corners on A.
			if (this.isPointInBox(corner, rectA)) {
				if (corner.label === "bottomright" && corner.y === rectA.bottom && corner.x === rectA.right) {
					continue;
				}

				if (corner.label === "bottomleft" && corner.y === rectA.bottom && corner.x === rectA.left) {
					continue;
				}

				if (corner.label === "topleft" && corner.x === rectA.left && corner.y === rectA.top) {
					continue;
				}

				if (corner.label === "topright" && corner.x === rectA.right && corner.y === rectA.top) {
					continue;
				}
				cornersInBox.push(corner.label);
			}
		}

		/**
   * Going back to our example earlier. Remember, A is the larger box that encompasses B and C. In this case, only two corners are within A. (bottom left, bottom right).
  		+-------------------+
  		|                   |
  		|                   |
  		|                   |
  		|                   |
  		|         B         |
  		|                   |
  		|                   |
  		|                   |
  		+-------------------+
  		|                   |
  		|                   |
  		|                   |
  		|                   |
  		|         C         |
  		|                   |
  		|                   |
  		|                   |
  		|                   |
  		|                   |
  		+-------------------+
  	* */
		if (cornersInBox.length === 2) {
			//left edge is in box.
			if (cornersInBox.includes("topleft") && cornersInBox.includes("bottomleft")) {
				clip.right = rectB.left;
			} else if (cornersInBox.includes("topright") && cornersInBox.includes("bottomright")) {
				clip.left = rectB.right;
			} else {
				if (cornersInBox.includes("topleft") && cornersInBox.includes("topright")) {
					clip.bottom = rectB.top;
				} else if (cornersInBox.includes("bottomleft") && cornersInBox.includes("bottomright")) {
					clip.top = rectB.bottom;
				}
			}
		} else {
			/****
   * In this case, A is the wide horizontal box. B is the tall vertical box. Their bottom left corners align at point X.
   *  In this case, only one corner (bottom left of B) is within the bounds of A.
   					    B
           +------------------+
   		|                  |
   		|                  |
   		|                  |
   		|                  |
   		|                  |
   		|                  |
   		|                  |
   		|                  |
   		|                  |
   		|                  |
   		|                  |
   		+---------------------------------------------------------------------+
   		|                  |                                                  |
   		|                  |                                                  |
   		|                  |                                                  |
   		|                  |                  CLIP                            |  A
   		|                  |                                                  |
   		|                  |                                                  |
   		+------------------+--------------------------------------------------+
   	   X
    */

			const ISLEFTORRIGHT = edge === "left" || edge === "right";
			const ISTOPORBOTTOM = edge === "top" || edge === "bottom";
			if (cornersInBox.includes("topleft")) {

				if (ISTOPORBOTTOM) {
					clip.right = rectB.left;
					if (rectB.top > rectA.bottom) {
						clip.bottom = rectB.top;
					}
				} else {
					clip.left = rectB.left;
					if (rectB.top < rectA.bottom) {
						clip.bottom = rectB.top;
					}
				}
			} else if (cornersInBox.includes("topright")) {
				if (ISTOPORBOTTOM) {
					clip.left = rectB.right;
					if (rectB.top > rectA.bottom) {
						clip.bottom = rectB.top;
					}
				} else {
					clip.right = rectB.right;
					if (rectB.top < rectA.bottom) {
						clip.bottom = rectB.top;
					}
				}
			} else if (cornersInBox.includes("bottomleft")) {

				if (ISLEFTORRIGHT) {
					if (rectB.bottom > rectA.top) {
						clip.top = rectB.bottom;
					}
				} else {
					clip.right = rectB.left;
					if (rectB.bottom < rectA.top) {
						clip.top = rectB.bottom;
					}
				}
			} else {

				if (ISLEFTORRIGHT) {
					if (rectB.bottom > rectA.top) {
						clip.top = rectB.bottom;
					}
				} else {
					clip.left = rectB.right;
					if (rectB.bottom < rectA.top) {
						clip.top = rectB.bottom;
					}
				}
			}
		}

		clip.width = clip.right - clip.left;
		clip.height = clip.bottom - clip.top;
		return clip;
	}

}
module.exports = BoxMath;

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\services\\docking\\boxMath.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\services\\docking\\boxMath.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 100 */,
/* 101 */,
/* 102 */,
/* 103 */,
/* 104 */,
/* 105 */,
/* 106 */,
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {const Logger = __webpack_require__(2);
const RouterClient = __webpack_require__(3);
var FSBLWindow = __webpack_require__(19);
const groupStates = {
	NORMAL: 0,
	MINIMIZING: 1,
	MINIMIZED: 2,
	RESTORING: 3
};
const async = __webpack_require__(12);
class WindowGroup {
	constructor(params) {
		this.name = params.name;
		this.groupState = groupStates.NORMAL;
		this.isAlwaysOnTop = false;
		if (params.windows) {
			this.windows = params.windows;
		} else {
			this.windows = {};
		}
	}

	destroy() {
		delete this.windows;
		delete this.name;
	}

	setWindows(windows) {
		this.windows = windows;
	}

	getWindows() {
		return this.windows;
	}

	addWindow(win) {
		this.windows[win.name] = win;
		if (this.isMovable) win.alwaysOnTop(this.isAlwaysOnTop);
	}

	/**
  *
  * @param {*} arr either a window name or window identifier or a list of window names or identifiers
  */
	removeWindows(arr) {
		var windowName;
		if (!Array.isArray(arr)) {
			arr = [arr];
		}
		var self = this;
		arr.forEach(function (win) {
			if (typeof win === "string" || win instanceof String) {
				windowName = win;
			} else {
				windowName = win.windowName || win.name;
			}
			if (this.windows[windowName]) {
				delete self.windows[windowName];
			} else {
				return;
			}
		}, this);
	}

	/**
  *
  * @param {*} win either a window name or window identifier
  */
	getWindow(win) {
		if (typeof win === "string" || win instanceof String) {
			//we have a window name
			return this.windows[win];
		} else {
			// we have an identifier
			if (win && (win.windowName || win.name)) {
				return this.windows[win.windowName || win.name];
			} else {
				return null;
			}
		}
	}

	getWindowNames() {
		let names = [];
		for (let name in this.windows) {
			names.push(name);
		}
		return names;
	}

	addWindows(arr) {
		if (!Array.isArray(arr)) {
			arr = [arr];
		}
		var self = this;
		arr.forEach(function (win) {
			self.windows[win.name] = win;
			if (this.isMovable && win.win.alwaysOnTop) win.win.alwaysOnTop(this.isAlwaysOnTop);
		}, this);
	}

	getWindowArray() {
		let arr = [];
		for (let windowName in this.windows) {
			arr.push(this.windows[windowName]);
		}
		return arr;
	}

	minimizeAll() {
		if (this.groupState == groupStates.RESTORING) {
			this.interruptRestore = true;
			this.groupState = groupStates.NORMAL;
		}
		if (this.groupState !== groupStates.NORMAL) return;
		this.groupState = groupStates.MINIMIZING;
		for (let windowName in this.windows) {
			let win = this.windows[windowName];
			if (win.windowState != FSBLWindow.WINDOWSTATE.MINIMIZED) win.minimize();
		}
		this.groupState = groupStates.MINIMIZED;
	}

	minimize(params) {
		if (!params) {
			return this.minimizeAll();
		}
		let { windowList, componentType } = params;
		if (componentType) windowList = this.findAllByComponentType(componentType);

		for (let w of windowList) {
			let win;
			if (!(typeof w === "string" || w instanceof String)) {
				win = this.getWindow(w.windowName || w.name);
			} else {
				win = this.getWindow(w);
			}
			if (win && win.windowState != FSBLWindow.WINDOWSTATE.MINIMIZED) {
				win.minimize();
			}
		}
	}

	restoreAll(cb = Function.prototype) {
		if (this.groupState !== groupStates.MINIMIZED) return cb();
		var self = this;
		this.groupState = groupStates.RESTORING;
		function restoreWindow(windowName, done) {
			if (self.interruptRestore) return done("restore interrupted");
			let win = self.windows[windowName];
			if (win.restore) {
				if (win.windowState != FSBLWindow.WINDOWSTATE.NORMAL) self.windows[windowName].restore(done);else done();
			} else {
				Logger.system.error(windowName + " does not implment restore");
				done();
			}
		}
		async.forEach(Object.keys(this.windows), restoreWindow, function (err, data) {
			if (!err) {
				self.groupState = groupStates.NORMAL;
			} else {
				self.interruptRestore = false;
			}
			cb(err, data);
		});
	}
	//takes an array of window names.
	restore(params, cb) {
		let { windowList } = params;
		var self = this;
		function restoreWindow(windowName, done) {
			let win = self.windows[windowName];
			if (win.restore) {
				if (win.windowState != FSBLWindow.WINDOWSTATE.NORMAL) self.windows[windowName].restore(done);else done();
			} else {
				Logger.system.error(windowName + " does not implment restore");
				done();
			}
		}
		async.forEach(windowList, restoreWindow, cb);
	}

	// Bring all windoes to top. Also sets the state of the group to always on top and new windows added to the group inherit the state of thw window
	allAlwaysOnTop(alwaysOnTop) {
		this.isAlwaysOnTop = alwaysOnTop;
		this.alwaysOnTop({ windowList: Object.keys(this.windows), restoreWindows: true, alwaysOnTop: alwaysOnTop });
	}

	// Set specific windows to top. Generally should call allAlwaysOnTop
	alwaysOnTop(params) {
		if (!params || params && Object.keys(params).length === 0) {
			params = { windowList: Object.keys(this.windows), restoreWindows: true };
		}
		let { windowList, componentType } = params;
		if (windowList && typeof windowList[0] !== "string") {
			windowList = windowList.map(win => win.windowName);
		}
		if (componentType) windowList = this.findAllByComponentType(componentType);
		var self = this;
		if (!windowList) windowList = Object.keys(this.windows);
		for (let w in windowList) {
			let win;
			if (Array.isArray(windowList)) w = windowList[w];

			if (!(typeof w === "string" || w instanceof String)) {
				win = self.getWindow(w.windowName || w.name);
			} else {
				win = self.getWindow(w);
			}
			if (win) {
				win.alwaysOnTop(params.alwaysOnTop);
			}
		}
	}

	bringAllToFront() {
		this.bringToFront({ windowList: Object.keys(this.windows), restoreWindows: true });
	}

	bringToFront(params) {
		if (!params || params && Object.keys(params).length === 0) {
			params = { windowList: Object.keys(this.windows), restoreWindows: true };
		}
		let { windowList, componentType } = params;
		if (windowList && typeof windowList[0] !== "string") {
			windowList = windowList.map(win => win.windowName);
		}
		if (componentType) windowList = this.findAllByComponentType(componentType);
		var self = this;
		if (!windowList) windowList = Object.keys(this.windows);
		function doBTF() {
			for (let w in windowList) {
				let win;
				if (Array.isArray(windowList)) w = windowList[w];

				if (!(typeof w === "string" || w instanceof String)) {
					win = self.getWindow(w.windowName || w.name);
				} else {
					win = self.getWindow(w);
				}
				if (win) {
					win.bringToFront();
				}
			}
		}

		if (params.restoreWindows) {
			this.restore({ windowList }, doBTF);
		} else {
			doBTF();
		}
	}

	hyperFocus(params) {
		let windowList = params.windowList;
		// If we got a list of identifiers, convert to names
		for (let w in windowList) {
			let win = windowList[w];
			if (!(typeof win === "string" || win instanceof String)) {
				windowList[w] = win.windowName || win.name;
			}
		}

		for (let windowName in this.windows) {
			if (!windowList.includes(windowName)) {
				this.windows[windowName].minimize();
			} else {
				this.windows[windowName].restore(() => {
					this.windows[windowName].bringToFront();
				});
			}
		}
	}

	findAllByComponentType(componentType) {
		var windowList = [];
		for (let windowName in this.windows) {
			var descriptor = this.windows[windowName].windowDescriptor;
			if (componentType === (descriptor.component ? descriptor.component.type : descriptor.customData.component.type)) {
				//TODO - figure out why this is different in some cases
				windowList.push(this.windows[windowName]);
			}
		}
		return windowList;
	}

}

module.exports = WindowGroup;

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\common\\window\\windowGroup.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\common\\window\\windowGroup.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(setImmediate, process) {

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.hasNextTick = exports.hasSetImmediate = undefined;
exports.fallback = fallback;
exports.wrap = wrap;

var _slice = __webpack_require__(109);

var _slice2 = _interopRequireDefault(_slice);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var hasSetImmediate = exports.hasSetImmediate = typeof setImmediate === 'function' && setImmediate;
var hasNextTick = exports.hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';

function fallback(fn) {
    setTimeout(fn, 0);
}

function wrap(defer) {
    return function (fn /*, ...args*/) {
        var args = (0, _slice2.default)(arguments, 1);
        defer(function () {
            fn.apply(null, args);
        });
    };
}

var _defer;

if (hasSetImmediate) {
    _defer = setImmediate;
} else if (hasNextTick) {
    _defer = process.nextTick;
} else {
    _defer = fallback;
}

exports.default = wrap(_defer);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(74).setImmediate, __webpack_require__(0)))

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = slice;
function slice(arrayLike, start) {
    start = start | 0;
    var newLen = Math.max(arrayLike.length - start, 0);
    var newArr = Array(newLen);
    for (var idx = 0; idx < newLen; idx++) {
        newArr[idx] = arrayLike[start + idx];
    }
    return newArr;
}
module.exports = exports["default"];

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isAsync = undefined;

var _asyncify = __webpack_require__(131);

var _asyncify2 = _interopRequireDefault(_asyncify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var supportsSymbol = typeof Symbol === 'function';

function isAsync(fn) {
    return supportsSymbol && fn[Symbol.toStringTag] === 'AsyncFunction';
}

function wrapAsync(asyncFn) {
    return isAsync(asyncFn) ? (0, _asyncify2.default)(asyncFn) : asyncFn;
}

exports.default = wrapAsync;
exports.isAsync = isAsync;

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {
module.exports = {

	EDGES: ["top", "left", "bottom", "right"],
	CORNERS: ["topLeft", "topRight", "bottomLeft", "bottomRight"],
	MINIMUM_HEIGHT: 32,
	MINIMUM_WIDTH: 98,
	OPPOSITE_EDGE_MAP: {
		left: "right",
		right: "left",
		top: "bottom",
		bottom: "top",
		topLeft: "bottomRight",
		topRight: "bottomLeft",
		bottomLeft: "topRight",
		bottomRight: "topLeft"
	},
	SPLIT_HANDLE_MAP: {
		bottomLeft: ["bottom", "left"],
		bottomRight: ["bottom", "right"],
		leftBottom: ["left", "bottom"],
		rightBottom: ["right", "bottom"],
		topRight: ["top", "right"],
		topLeft: ["top", "left"],
		rightTop: ["right", "top"],
		leftTop: ["left", "top"],
		left: ["left"],
		right: ["right"],
		top: ["top"],
		bottom: ["bottom"]
	}
};

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\services\\docking\\constants.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\services\\docking\\constants.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var BoxMath = __webpack_require__(99);
class DockableBox {
	constructor(bounds) {
		if (bounds) {
			this.left = bounds.left;
			this.top = bounds.top;
			this.right = bounds.right;
			this.bottom = bounds.bottom;
			this.width = bounds.right - bounds.left;
			this.height = bounds.bottom - bounds.top;
		}
		this.getVertices = BoxMath.getVertices;
		return this;
	}
	/**
 * @function {function name}
 * @param  {type} format         {description}
 * @param  {type} includeCorners {description}
 * @return {type} {description}
 */
	getEdges(format, includeCorners) {
		if (includeCorners === undefined || includeCorners === true) {
			includeCorners = 0;
		} else {
			includeCorners = 1;
		}

		var top = {
			min: {
				x: this.left + includeCorners,
				y: this.top
			},
			max: {
				x: this.right - includeCorners,
				y: this.top
			}
		};
		var left = {
			min: {
				x: this.left,
				y: this.top + includeCorners
			},
			max: {
				x: this.left,
				y: this.bottom - includeCorners
			}
		};
		var right = {
			min: {
				x: this.right,
				y: this.top + includeCorners
			},
			max: {
				x: this.right,
				y: this.bottom - includeCorners
			}
		};
		var bottom = {
			min: {
				x: this.left + includeCorners,
				y: this.bottom
			},
			max: {
				x: this.right - includeCorners,
				y: this.bottom
			}
		};

		if (format === "obj") {
			return {
				top: top,
				right: right,
				bottom: bottom,
				left: left
			};
		}
		return [top, right, bottom, left];
	}

	getCorners() {
		return this.getCornerObject(this.getBounds());
	}

	/**
 * @function {function name}
 * @param  {type} point          {description}
 * @param  {type} includeCorners {description}
 * @return {type} {description}
 */
	pointIsOnBoundingBox(point, includeCorners) {
		//If it's on the top or bottom edge.
		var edges = this.getEdges("arr", includeCorners);

		for (var i = 0; i < edges.length; i++) {
			var segment = edges[i];
			if (BoxMath.isPointOnSegment(point, segment)) {
				return true;
			}
		}
		return false;
	}

	/**
 * @function {function name}
 * @param  {type} corner {description}
 * @return {type} {description}
 */
	getPointByVertex(corner) {

		corner = corner.toLowerCase();
		var point = {
			x: this.left,
			y: this.top
		};
		if (corner.includes("bottom")) {
			point.y = this.bottom;
		}
		if (corner.includes("right")) {
			point.x = this.right;
		}
		return point;
	}

	/**
 * @function {function name}
 * @param  {type} point     {description}
 * @param  {type} tolerance {description}
 * @return {type} {description}
 */
	getEdgeByPoint(point, tolerance) {
		var edges = this.getEdges("obj");

		for (var edge in edges) {
			if (BoxMath.isPointOnSegment(point, edges[edge])) {
				return edge;
			}
		}
		return false;
	}

	/**
 * @function {function name}
 * @param  {type} point     {description}
 * @param  {type} tolerance {description}
 * @return {type} {description}
 */
	getVertexByPoint(point, tolerance) {
		if (tolerance === undefined) {
			tolerance = 0;
		}
		var corner = null,
		    justAnEdge = true;
		if (point.y <= this.windowBoundingBox.max.y + tolerance && point.y >= this.windowBoundingBox.max.y - tolerance) {
			corner = "bottom";
		}
		if (point.y <= this.windowBoundingBox.min.y + tolerance && point.y >= this.windowBoundingBox.min.y - tolerance) {
			corner = "top";
		}

		if (!corner) {
			return corner;
		}

		if (point.x <= this.windowBoundingBox.min.x + tolerance && point.x >= this.windowBoundingBox.min.x - tolerance) {
			justAnEdge = false;
			corner += "Left";
		}

		if (point.x <= this.windowBoundingBox.max.x + tolerance && point.x >= this.windowBoundingBox.max.x - tolerance) {
			justAnEdge = false;
			corner += "Right";
		}
		if (justAnEdge) {
			return null;
		}
		return corner;
	}

	/**
 * @function {function name}
 * @param  {type} win2 {description}
 * @return {type} {description}
 */
	getSharedEdges(win2, tolerance) {
		if (!tolerance) {
			tolerance = 0;
		}
		//from perspective of stationary window;
		var sharedEdges = {
			top: false,
			left: false,
			right: false,
			bottom: false
		};
		if (!BoxMath.intersectBoundingBoxes(this.buffer, win2.windowBoundingBox)) {
			return sharedEdges;
		}
		var inRightTolerance = BoxMath.between({
			num: win2.right,
			min: this.left - tolerance,
			max: this.left + tolerance,
			inclusive: true
		});
		var inLeftTolerance = BoxMath.between({
			num: win2.left,
			min: this.right - tolerance,
			max: this.right + tolerance,
			inclusive: true
		});
		var inTopTolerance = BoxMath.between({
			num: win2.top,
			min: this.bottom - tolerance,
			max: this.bottom + tolerance,
			inclusive: true
		});
		var inBottomTolerance = BoxMath.between({
			num: win2.bottom,
			min: this.top - tolerance,
			max: this.top + tolerance,
			inclusive: true
		});

		if (inRightTolerance) {
			if (win2.bottom > this.top - tolerance && win2.top < this.bottom + tolerance) {
				sharedEdges.left = true;
			}
		}
		if (inLeftTolerance) {
			//if(600 > 0 && 300 < 300)
			if (win2.bottom > this.top - tolerance && win2.top < this.bottom + tolerance) {
				sharedEdges.right = true;
			}
		}

		if (inBottomTolerance) {
			if (win2.left < this.right + tolerance && win2.right > this.left - tolerance) {
				sharedEdges.top = true;
			}
		}

		if (inTopTolerance) {
			if (win2.left < this.right + tolerance && win2.right > this.left - tolerance) {
				sharedEdges.bottom = true;
			}
		}

		return sharedEdges;
	}

	/**
 * @function {function name}
 * @param  {type} win2 {description}
 * @return {type} {description}
 */
	getSharedCorners(win2) {
		var sharedCorners = {
			topLeft: false,
			topRight: false,
			bottomLeft: false,
			bottomRight: false,

			//distinction is in the placement. a window placed to the side and top aligned would share the rightTop corner, but not the topRight
			rightTop: false,
			rightBottom: false,
			leftTop: false,
			leftBottom: false
		};

		let intersection = !BoxMath.intersectBoundingBoxes(this.innerBuffer, win2.windowBoundingBox) && BoxMath.intersectBoundingBoxes(this.buffer, win2.windowBoundingBox);
		if (!intersection) {
			return sharedCorners;
		}
		let myCorners = BoxMath.getVertices(this.getBounds());
		let theirCorners = BoxMath.getVertices(win2);
		myCorners.forEach(corner => {
			for (var i = 0; i < theirCorners.length; i++) {
				var theirCorner = theirCorners[i];
				if (corner.x === theirCorner.x && corner.y === theirCorner.y) {
					sharedCorners[corner.label] = true;
				}
			}
		});
		var sharedEdges = {
			bottom: this.bottom === win2.bottom || this.bottom === win2.top,
			top: this.top === win2.top || this.top === win2.bottom,
			right: this.right === win2.left || this.right === win2.right,
			left: this.left === win2.right || this.left === win2.left
		};
		var sideTop = false,
		    sideBottom = false;
		if (this.top === win2.top) {
			sideTop = true;
		}
		if (this.bottom === win2.bottom) {
			sideBottom = true;
		}
		if (sharedEdges.right) {
			if (sideTop) {
				sharedCorners.rightTop = true;
			}
			if (sideBottom) {
				sharedCorners.rightBottom = true;
			}
		}

		if (sharedEdges.left) {
			if (sideBottom) {
				sharedCorners.leftBottom = true;
			}
			if (sideTop) {
				sharedCorners.leftTop = true;
			}
		}

		return sharedCorners;
	}

	/**
 * @function {function name}
 * @return {type} {description}
 */
	getBounds() {
		return {
			left: this.left,
			right: this.right,
			top: this.top,
			bottom: this.bottom,
			width: this.width,
			height: this.height
		};
	}

	/**
 * @function {function name}
 * @param  {type} req {description}
 * @return {type} {description}
 */
	getCornerObject(req) {
		let corners = {};
		let vertices = BoxMath.getVertices(req);
		for (let i = 0; i < vertices.length; i++) {
			let corner = vertices[i];
			corners[corner.label] = corner;
		}
		return corners;
	}

	/**
 * @function {function name}
 * @param  {type} request {description}
 * @return {type} {description}
 */
	getResizeHandle(request) {
		if (this.resizeHandle) {
			return this.resizeHandle;
		}
		var resizeHandle;

		if (request.mousePosition) {
			resizeHandle = this.getVertexByPoint(request.mousePosition, 15);
			if (!resizeHandle) {
				resizeHandle = this.getGrabbedEdge(request.mousePosition);
			}
		}

		if (!resizeHandle) {
			if (request.top !== this.top) {
				resizeHandle = "top";
				if (request.right !== this.right) {
					resizeHandle = "topRight";
				} else if (request.left !== this.left) {
					resizeHandle = "topLeft";
				}
			} else if (request.right !== this.right) {
				resizeHandle = "right";
				if (request.bottom !== this.bottom) {
					resizeHandle = "bottomRight";
				} else if (request.top !== this.top) {
					resizeHandle = "topRight";
				}
			} else if (request.bottom !== this.bottom) {
				resizeHandle = "bottom";

				if (request.left !== this.left) {
					resizeHandle = "bottomLeft";
				} else if (request.right !== this.right) {
					resizeHandle = "bottomRight";
				}
			} else if (request.left !== this.left) {
				resizeHandle = "left";
				if (request.top !== this.top) {
					resizeHandle = "topLeft";
				} else if (request.bottom !== this.bottom) {
					resizeHandle = "bottomLeft";
				}
			}
		}

		if (resizeHandle && request.changeType !== 0) {
			//if we didn't find a resizeHandle, then no edges moved. Send last handle.
			this.resizeHandle = resizeHandle;
		} else if (!resizeHandle && request.changeType === 0) {
			resizeHandle = "top";
		}
		return resizeHandle;
	}

	/**
 * @function {function name}
 * @param  {type} bufferSize {description}
 * @return {type} {description}
 */
	setBuffer(bufferSize) {
		if (bufferSize === undefined && this.bufferSize === null) {
			return;
		} else if (bufferSize !== undefined) {
			this.bufferSize = bufferSize;
		} else {
			bufferSize = this.bufferSize;
		}
		this.buffer = {
			min: {
				x: this.left - bufferSize,
				y: this.top - bufferSize
			},
			max: {
				x: this.right + bufferSize,
				y: this.bottom + bufferSize
			}
		};
	}

	sharesACornerWith(win) {
		var sharedCorners = this.getSharedCorners(win);
		var corners = ["topLeft", "topRight", "rightTop", "leftTop", "bottomRight", "bottomLeft", "rightBottom", "leftBottom"];
		for (var i = 0; i < corners.length; i++) {
			var corner = corners[i];
			if (sharedCorners[corner]) {
				return true;
			}
		}
		return false;
	}

	/**
 * @function {function name}
 * @param  {type} win {description}
 * @return {type} {description}
 */
	sharesAnEdgeWith(win) {
		var sharedEdges = this.getSharedEdges(win);

		var edges = ["top", "right", "left", "bottom"];
		for (var i = 0; i < edges.length; i++) {
			var edge = edges[i];
			if (sharedEdges[edge]) {
				return true;
			}
		}
		return false;
	}

	/**
 * @function {function name}
 * @param  {type} request {description}
 * @return {type} {description}
 */
	canSnapToWindow(request) {
		if (this.sharesAnEdgeWith(request)) {
			return true;
		} else {
			return BoxMath.intersectBoundingBoxes(this.buffer, request.windowBoundingBox) && !BoxMath.intersectBoundingBoxes(this.innerBuffer, request.windowBoundingBox);
		}
	}
}
module.exports = DockableBox;

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\services\\docking\\dockableBox.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\services\\docking\\dockableBox.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 113 */,
/* 114 */,
/* 115 */,
/* 116 */,
/* 117 */,
/* 118 */,
/* 119 */,
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/* global RouterClient */
//replace with import when ready
var util = __webpack_require__(6);
const async = __webpack_require__(12);
var DockingCalculator = __webpack_require__(152);
var AutoArrange = __webpack_require__(148);
var FinsembleWindow = __webpack_require__(72);
var System = __webpack_require__(46);
var DockableWindow = __webpack_require__(151);
var BoxMath = __webpack_require__(99);
var LauncherClient = __webpack_require__(80);
LauncherClient.initialize();
var ConfigClient = __webpack_require__(85);
ConfigClient.initialize();
const FSBLDepdendencyManager = __webpack_require__(20);
var Logger = __webpack_require__(2);
Logger.start();

var DOCKINGSERVICE_AUTO_ARRANGE_CHANNEL = "DockingService.AutoarrangeStatus";
var serviceConfig = {};
var groupData = {};

//const merge = require("deepmerge");
const clone = function (obj) {
	//This has been tested a good amount. Previous to this commit we were using a mix of deepmerge and JSON.parse(JSON.stringify()).
	//Trying lodash.deepclone made my tests take 2-3s.
	//JSON.parse everywhere made them take ~ 1s.
	//Using JSON.parse on arrays and deep merge on objects makes them take 7-900ms.
	if (Array.isArray(obj)) {
		return obj.slice();
	} else {
		try {
			return JSON.parse(JSON.stringify(obj));
		} catch (e) {
			Logger.system.error("clone error", e);
			return e;
		}
	}
};
let CALCULATOR = {};
/**
 * The docking Service is great.
 * @constructor
 */

class DockingService extends DockingCalculator {
	/** @alias dockingService# */

	constructor(params) {
		super(params);
		//We're doing this for hole-filling. need to remove the window so that while we're resizing windows, they're unphased by the windows that are resizing.
		CALCULATOR.addWindow = super.addWindow.bind(this);
		CALCULATOR.removeWindow = super.removeWindow.bind(this);
		CALCULATOR.getBoundsOfGroupWindows = super.getBoundsOfGroupWindows.bind(this);
		CALCULATOR.cleanupSharedEdges = super.cleanupSharedEdges.bind(this);
		this.AutoArrange = new AutoArrange({
			DockingCalculator: this
		});

		//for reverting autoarrange
		this.cachedPositions = {};

		this.onMoveComplete = this.onMoveComplete.bind(this);
		this.updateGroupData = this.updateGroupData.bind(this);
		this.startTilingOrTabbing = this.startTilingOrTabbing.bind(this);
		this.stopTilingOrTabbing = this.stopTilingOrTabbing.bind(this);
		this.cancelTilingOrTabbing = this.cancelTilingOrTabbing.bind(this);

		this.activeWorkspace = { name: "" };
	}

	onMoveComplete(win) {
		let { monitor } = win;

		if (this.cachedPositions[monitor.name] && this.cachedPositions[monitor.name][win.name]) {
			delete this.cachedPositions[monitor.name][win.name];
		}

		this.tellWindowsToSaveLocation();
		this.updateGroupData();
		//Logger.system.debug("Publishing Group Update: OnMoveComplete");
		//this.publishGroupUpdate();
		if (this.AutoArrange.isArranged[monitor.name]) {
			this.AutoArrange.isArranged[monitor.name] = false;
			this.cachedPositions[monitor.name] = {};
			// this.revertArrangedWindows(monitor);
			this.sendAutoArrangeStatusUpdate();
		}
	}

	updateGroupData() {
		this._updateGroupData();
		Logger.system.debug("Publishing Group Update: DockingCalc.updateGroupData");
		this.publishGroupUpdate();
	}

	/**
  * Creates router endpoints for all of our client APIs. Add servers or listeners for requests coming from your clients.
  * @private
  */
	createRouterEndpoints() {
		var self = this;
		this.dockableWindows = {};
		RouterClient.subscribe("Finsemble.WorkspaceService.update", function (err, response) {
			if (response.data.reason === "workspace:load:dataRetrieved") {
				self.handleWorkspaceUpdate(err, response);
			}
		});

		RouterClient.addResponder("DockingService.registerWindow", function (err, message) {
			var data = message.data;
			//prevent a second registration from being made for an individual window.
			var windowWrap = {};
			if (!data.windowType) data.windowType = "OpenFinWindow";
			windowWrap = FinsembleWindow.wrap(data);
			if (message.options && message.options.canGroup === false) {
				self.addToGroupBlacklist(data.name);
			}

			self.addWindow(windowWrap).then(function () {
				self.checkIfWindowIsInGroup(data.name);
				message.sendQueryResponse(null, {
					status: "finished"
				});
			});
		});

		/**
   * Not sure we'll need this any more since we have the wrappers. Leaving in until we can clarify.
   */
		RouterClient.addPubSubResponder(/WindowMove.*/, {});
		RouterClient.addPubSubResponder("DockingService.groupUpdate", {});

		RouterClient.subscribe("WindowMove", (err, response) => {
			if (Object.keys(response.data).length) {
				//don't throw an error if window isn't found.
				if (!self.getWindow(response.name, false)) {
					return;
				}
				var moveRequest = response.data;
				self.setMovingWindow(self.dockableWindows[response.name]);
				self.onWindowMove(moveRequest);
			}
		});

		/**
   * When groupMode changes in a toolbar (or any component), it uses PubSub to publish a state change.
   */
		RouterClient.addPubSubResponder("DockingService.groupMode", {});

		RouterClient.subscribe("WindowMoved", (err, response) => {
			//this.onMouseUp();
		});
		RouterClient.subscribe("monitorInfo", function (err, response) {
			self.updateMonitorInfo(response.data);
		});
		RouterClient.addResponder("DockingService.getGroupMode", function (err, message) {
			message.sendQueryResponse(null, self.getGroupMode());
		});

		RouterClient.addResponder("DockingService.getBounds", function (err, message) {
			self.getBounds(message.data, function (err, bounds) {
				message.sendQueryResponse(err, bounds);
			});
		});

		RouterClient.addListener("DockingService.toggleGroupMode", function (err, message) {
			var groupMode = self.getGroupMode();
			groupMode.enabled = !groupMode.enabled;
			self.setGroupMode(groupMode);
		});

		RouterClient.addListener("DockingService.updateWindowLocation", function (err, message) {
			var updateWindow = self.getWindow(message.data.windowName);
			updateWindow.setBounds(message.data.location);
		});
		RouterClient.addListener("DockingService.hyperfocusGroup", function (err, message) {
			DockingService.hyperFocus(message.data);
		});

		/**
   * Auto-arrange doesn't throw disable-frame-bounds-changed events, since it uses `setBounds` under the hood. So this will just go through the windows and update their positions.
   */
		RouterClient.addListener("DockingService.updateWindowPositions", function (err, response) {
			self.updateWindowPositions();
		});
		RouterClient.addListener("DockingService.formGroup", function (err, response) {
			self.formGroup(response.data.windowName, { isMovable: true });
			let win = self.getWindow(response.data.windowName);

			self.updateGroupData();
			//Logger.system.debug("Publishing Group Update: FormGroup");
			//self.publishGroupUpdate();
		});
		/**
   * Called from the launcherCLient after `spawn` is invoked. Will group two or more windows.
   */
		RouterClient.addResponder("DockingService.groupWindows", function (err, message) {
			self.groupWindows(message.data, function (err) {
				self.updateGroupData();
				//Logger.system.debug("Publishing Group Update: GroupWindows");
				//self.publishGroupUpdate();
				message.sendQueryResponse({
					err: err,
					status: err ? "failed" : "success"
				});
			});
		});

		RouterClient.addResponder("DockingService.leaveGroup", function (err, response) {
			let windowName = response.data.name;
			let movableGroup = self.getMovableGroup(windowName);
			let leavingWindow = self.getWindow(windowName);
			if (!movableGroup) return;
			let wasARectangle = movableGroup.isARectangle();
			let hole = self.getWindow(windowName).getBounds();
			let newBounds = leavingWindow.getBounds();
			newBounds.left += 15;
			newBounds.right += 15;
			newBounds.bottom += 15;
			newBounds.top += 15;
			leavingWindow.setBounds(newBounds);
			// removeWindowFromGroup(response.data, movableGroup.name);
			self.removeWindowFromAllGroups(leavingWindow);
			self.wipeSnapRelationships(leavingWindow.name);

			//Because ejecting the window was causing complications when filling holes.
			CALCULATOR.removeWindow(leavingWindow.name, false);
			if (wasARectangle) {
				//group gets reconstituted in the removeWIndowFromGroup function. So get the reference to the new group.
				movableGroup.fillHole(hole);
				self.cleanupGroupGaps(movableGroup);
				self.buildSnapRelationshipsForGroup(movableGroup);
			} else {
				//self.constituteGroups();
				self.recalculateSnaps();
			}
			CALCULATOR.addWindow(leavingWindow.name, leavingWindow);
			var groups = self.getGroups();
			var groupList = {};
			for (let group in groups) {
				groupList[group] = groups[group].getWindowNames();
			}

			self.updateGroupData();
			leavingWindow.bringToFront();
			response.sendQueryResponse(null, groupList);
		});
		RouterClient.addResponder("DockingService.getWindowsInGroup", function (err, response) {
			let grp = self.getGroup(response.data.groupName);
			if (err) return response.sendQueryResponse(err, null);

			let error = null,
			    windowList = null;
			if (!grp) {
				err = "Group not found.";
			} else {
				windowList = grp.getWindowNames();
			}
			response.sendQueryResponse(error, windowList);
		});
		RouterClient.addListener("DockingService.joinGroup", function (err, response) {
			self.addWindowToGroup({
				groupName: response.data.groupName,
				win: self.getWindow(response.data.name)
			});
		});

		/**
   * PassThroughs
   */
		RouterClient.addListener("DockingService.deregisterWindow", function (err, response) {
			let registeredWindows = self.getWindowNames();
			const windowName = response.data.name;
			if (!registeredWindows.includes(windowName)) {
				Logger.system.debug("Window tried to deregister, but never registed", windowName);
				return;
			}
			let win = self.getWindow(windowName);
			let bounds = win.getBounds();
			let movableGroup = self.getMovableGroup(windowName);
			let immobileGroup = self.getImmobileGroup(windowName);
			let wasARectangle = movableGroup && movableGroup.isARectangle();
			self.removeWindowFromAllGroups(win);
			self.wipeSnapRelationships(windowName);
			self.removeWindow(windowName);
			if (movableGroup && wasARectangle) {
				movableGroup.fillHole(bounds);
				self.cleanupGroupGaps(movableGroup);
				self.buildSnapRelationshipsForGroup(movableGroup);
			}
			if (immobileGroup) {
				immobileGroup.updateBounds();
			}
			//will handle any group updates that need to be sent.
			if (self.onMoveComplete && response.data.userInitiated === true) {
				self.onMoveComplete(win);
			}
		});

		RouterClient.addResponder("DockingService.maximizeWindow", function (err, message) {
			self.maximizeWindow(message.data, function (bounds) {
				self.sendQueryResponse(message, bounds);
			});
		});

		RouterClient.addResponder("DockingService.restoreFromMaximize", function (err, message) {
			if (self.getWindow(message.data.name)) {
				self.restoreFromMaximize(message.data, function () {
					self.sendQueryResponse(message);
				});
			} else {
				message.sendQueryResponse("Window not registered with the DockingService.", null);
			}
		});

		RouterClient.addListener("DockingService.constituteGroups", function () {
			self.constituteGroups();
		});

		RouterClient.addResponder("DockingService.autoArrange", function (err, message) {
			if (!message.data.monitorDimensions) {
				message.sendQueryResponse(new Error("No monitor dimensions passed to autoArrange"), null);
				return;
			}
			self.AutoArrange.arrange(message.data.monitorDimensions, self.cachedPositions, function () {
				self.updateGroupData();
				//Logger.system.debug("Publishing Group Update: AutoArrange");
				//self.publishGroupUpdate();
			});
		});
		RouterClient.addPubSubResponder(DOCKINGSERVICE_AUTO_ARRANGE_CHANNEL, {});

		/* Tabbing and Tiling */
		RouterClient.addListener("DockingService.startTilingOrTabbing", this.startTilingOrTabbing);
		RouterClient.addListener("DockingService.stopTilingOrTabbing", this.stopTilingOrTabbing);
		RouterClient.addListener("DockingService.cancelTilingOrTabbing", this.cancelTilingOrTabbing);
		/* End Tabbing and Tiling */
	}

	sendQueryResponse(message, data) {
		message.sendQueryResponse(null, data);
	}

	updateMonitorInfo(monitorUpdate) {
		var self = this;
		// @todo, handle this properly. When a user removes a monitor, we need to revert everything.
		let monitors = self.getMonitors();
		Object.keys(monitors).map(name => monitors[name]).forEach(monitor => {
			this.AutoArrange.isArranged[monitor.name] = false;
		});
		self.sendAutoArrangeStatusUpdate();
		self.removeAllMonitors();

		monitorUpdate.forEach(function (monitor) {
			self.addMonitor({
				name: monitor.name,
				left: monitor.unclaimedRect.left,
				top: monitor.unclaimedRect.top,
				right: monitor.unclaimedRect.right,
				bottom: monitor.unclaimedRect.bottom
			});
		});
		super.updateMonitorInfo(monitorUpdate);
		self.setBufferSize(serviceConfig.BUFFER_SIZE);
	}

	/**
  * This function will maximize a window.
  * @param {object} params
  * @param {object} params.windowIdentifier
  * @param {string} params.name
  */
	maximizeWindow(params, cb) {
		var win = this.getWindow(params.name);
		win.bringToFront();
		win.cachedBounds = clone(win.getBounds());
		LauncherClient.getMonitorInfo(params, function (err, response) {
			var monitorDimensions = response.unclaimedRect;
			win.setBounds(monitorDimensions, function () {
				win.isMaximized = true;
				if (cb) {
					cb(monitorDimensions);
				}
			}, function (err) {
				Logger.system.error(err);
			});
		});
	}

	/**
  * This function will restore a maximized window.
  * @param {object} params
  * @param {string} params.name
  */
	restoreFromMaximize(params, cb) {
		var win = this.getWindow(params.name);
		win.isMaximized = false;
		let bounds = win.cachedBounds || win.getBounds();
		win.setBounds(bounds, function () {
			win.cachedBounds = {};
			if (cb) {
				cb();
			}
		}, function (err) {
			Logger.system.error(err);
		});
	}

	/**
  * Function that's called after a window is moved.
  */

	/**
 * Registers a window with the DockingCalculator.
 * @param  {dockableWindow} win
 * @return {Promise}
 */
	addWindow(win) {
		let self = this;
		let calcAddWindow = super.addWindow.bind(this);
		//If a window reloads, it may try to add itself to the dockingCalc twice.
		//2nd param doesn't throw error if we can't find the window.
		if (this.getWindow(win.name, false)) {
			return Promise.resolve(self.getWindow(win.name));
		}

		return new Promise(function (resolve, reject) {
			win.getBounds((err, bounds) => {
				//@todo, why not get bounds inside of the constructor? Would at least get rid of one param.

				let dockableWindow = new DockableWindow(win, bounds, self, serviceConfig.assimilationEnabled);
				//@todo, why not get the name from the dockableWindow?
				calcAddWindow(win.name, dockableWindow);

				dockableWindow.win.addEventListener("minimized", function (event) {
					self.setWindowMinimized(event);
				});
				dockableWindow.win.addEventListener("restored", function (event) {
					self.setWindowRestored(event);
				});
				dockableWindow.win.addEventListener("focused", function (event) {
					if (dockableWindow.win.windowState === FinsembleWindow.WINDOWSTATE.MINIMIZED) return;

					//win.removeEventListener is async. When reloading a workspace, the window is closed, and unregisters with docking.
					//We remove the event listeners from the openfin windows for focus, shown, etc.
					//Then we re-spawn the same windows with the same uuid/name. Underneath the hood, openfin has yet to remove those event listeners. The new windows get focused, and get into this event handler. If we don't make the check below, the DockingCalculator throws errors saying "Hey this window hasn't registered with me yet."

					if (self.getWindowNames().includes(event.name)) {

						self.bringGroupToFront(event);
					}
				});
				dockableWindow.win.addEventListener("shown", self.bringGroupToFront);

				dockableWindow.win.addListener("alwaysOnTop", self.setGroupAlwaysOnTop); // TODO: need to do something about somehow combining our event listeners with openFins.
				//@todo, why not get the name from the dockableWindow?
				calcAddWindow(win.name, dockableWindow);

				resolve(dockableWindow);
			});
		});
	}

	/* do not bind this function */
	setGroupAlwaysOnTop(params) {
		// if there are no params, this is called from an event and the context is in "this".
		if (!params) params = {};
		if (!params.name) params.name = this.name;
		if (!params.uuid) params.uuid = this.uuid;
		console.log("EVENT HAPPENED", params);

		let dockableWindow = window.DockingService.getWindow(params.name); // cannot bind this function and lose context. Using the global here.
		if (dockableWindow.isMinimized) return;
		dockableWindow.groupNames.forEach(groupName => {
			let grp = window.DockingService.getGroup(groupName);
			if (grp.isMovable) {
				grp.allAlwaysOnTop(params.alwaysOnTop);
				window.DockingService.updateGroupData();
			}
		});
	}

	setWindowMinimized(params) {
		let self = this;
		let dockableWindow = self.getWindow(params.name);
		dockableWindow.isMinimized = true;
		// If Window is in group, minimize the group:
		dockableWindow.groupNames.forEach(groupName => {
			let grp = self.getGroup(groupName);
			if (grp.isMovable) {
				grp.minimizeAll();
			}
		});
	}

	setWindowRestored(params) {
		let self = this;
		let dockableWindow = self.getWindow(params.name);
		dockableWindow.isMinimized = false;
		// If Window is in group, restore the group:
		dockableWindow.groupNames.forEach(groupName => {
			let grp = self.getGroup(groupName);
			if (grp.isMovable) {
				grp.restoreAll();
			}
		});
	}

	bringGroupToFront(params) {
		if (!params) params = {}; // this gets called when focused happens and expects params when some windows dont do that
		if (!params.name) params.name = this.name;
		if (!params.uuid) params.uuid = this.uuid;

		let dockableWindow = window.DockingService.getWindow(params.name);
		if (dockableWindow.isMinimized) return;
		dockableWindow.groupNames.forEach(groupName => {
			let grp = window.DockingService.getGroup(groupName);
			if (grp.isMovable) {
				grp.bringAllToFront();
			}
		});
	}

	hyperFocus(params) {
		let dockableWindow = this.getWindow(params.windowName);
		dockableWindow.groupNames.forEach(groupName => {
			let grp = this.getGroup(groupName);
			if (grp.isMovable) {
				LauncherClient.hyperFocus({ windowList: grp.getWindowNames() });
			}
		});
	}

	createGroupMask() {
		let self = this;
		LauncherClient.showWindow({ componentType: "Docking Move Mask" }, {
			name: "groupMask",
			spawnIfNotFound: true,
			options: {
				autoShow: false
			}
		}, function (err, response) {
			let groupMask = FinsembleWindow.wrap({ finWindow: response.finWindow, name: "groupMask" });
			groupMask.getBounds((err, bounds) => {
				var mask = new DockableWindow(groupMask, bounds, self);
				mask.canGroup = false;
				self.groupMask = mask;
			});
		});
	}

	removeWindow(windowName) {
		let self = this;
		let dockableWindow = this.getWindow(windowName);
		dockableWindow.win.removeEventListener("minimized", self.setWindowMinimized);
		dockableWindow.win.removeEventListener("restored", self.setWindowRestored);
		dockableWindow.win.removeEventListener("focused", self.bringGroupToFront);
		dockableWindow.win.removeEventListener("shown", self.bringGroupToFront);

		super.removeWindow(windowName);
		if (this.cachedPositions[dockableWindow.monitor.name][windowName]) {
			delete this.cachedPositions[dockableWindow.monitor.name][windowName];
		}
	}

	/**
  * Sets the initial buffersize.
  */
	setupDockingCalculator() {
		let DEBUG = serviceConfig.DEBUG;
		if (typeof DEBUG === "undefined") {
			DEBUG = false;
		}
		this.setAllowGroupsToSnap(serviceConfig.ALLOW_GROUPS_TO_SNAP);
		this.setGroupMode(serviceConfig.GROUP_MODE);
		this.setDebug(DEBUG);
		this.setBufferSize(serviceConfig.BUFFER_SIZE);
		this.setSnappingOpacity(serviceConfig.SNAPPING_OPACITY);
		this.setResizeThrottlePeriod(serviceConfig.RESIZE_EVENT_THROTTLE_PERIOD);
		this.setRouterClient(RouterClient);
		this.setGlobalMinimums(serviceConfig);
	}

	addMonitor(monitor) {
		super.addMonitor(monitor);
		this.AutoArrange.isArranged[monitor.name] = false;
		if (!this.cachedPositions[monitor.name]) this.cachedPositions[monitor.name] = {};
	}

	setGroupMode(groupMode) {
		super.setGroupMode(groupMode);
		RouterClient.publish("DockingService.groupMode", groupMode);
	}

	/************************************************
  *												*
  * 				Debugging Helpers				*
  *												*
  ************************************************/
	/**
 * For debugging.
 * @function {function name}
 * @return {type} {description}
 */
	getGridWindows() {
		let self = this;
		["A", "B", "C", "D", "E", "F", "G", "H", "I"].forEach(windowName => {
			window[windowName + windowName] = self.getWindow(windowName);
		});
	}

	/**
 * @function {function name}
 * @return {type} {description}
 */
	resetGrid() {
		var alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		//creates a 3x3 grid
		var row = 0;
		var column = 0;
		var group1;
		for (var i = 0; i < 9; i++) {
			var windowName = alphabet[i];

			win = this.getWindow(windowName);
			if (!group1) {
				group1 = this.getGroup(win.groupName);
			}
			if (i > 1 && i % 3 === 0) {
				row++;
				column = 0;
			}
			win.setBounds({
				left: 300 * column,
				top: 300 * row,
				width: 300,
				height: 300
			});
			column++;
		}
		group1.calculateOuterBounds();
	}

	/**
 * @function {function name}
 * @return {type} {description}
 */
	logger() {
		var boundingBoxes = {};
		for (var windowName in this.getWindows()) {
			var win = this.getWindow(windowName);
			boundingBoxes[windowName] = JSON.stringify(win.windowBoundingBox);
		}
		var box = "";
		box += "+----------------------------------------+\n";
		box += "|             |             |            |\n";
		box += "|   " + boundingBoxes["A"] + "          |    " + boundingBoxes["B"] + "         |   " + boundingBoxes["C"] + "         |\n";
		box += "|             |             |            |\n";
		box += "|             |             |            |\n";
		box += "+----------------------------------------+\n";
		box += "|             |             |            |\n";
		box += "|   " + boundingBoxes["D"] + "          |    " + boundingBoxes["E"] + "         |   " + boundingBoxes["F"] + "         |\n";
		box += "|             |             |            |\n";
		box += "|             |             |            |\n";
		box += "+----------------------------------------+\n";
		box += "|             |             |            |\n";
		box += "|   " + boundingBoxes["G"] + "          |    " + boundingBoxes["H"] + "         |   " + boundingBoxes["I"] + "         |\n";
		box += "|             |             |            |\n";
		box += "|             |             |            |\n";
		box += "+----------------------------------------+\n";
		Logger.system.log(box);
	}

	/**
  * Sends a message asking windows to save their position.
  */
	tellWindowsToSaveLocation() {
		let windowIter = this.windowPoolIterator();
		for (let win of windowIter) {
			RouterClient.transmit("DockingService." + win.name, { command: "saveWindowLocation", bounds: win.getBounds() });
		}
	}
	/**
  * Sends a message asking windows to update their position in memory but not save.
  */
	tellWindowsToUpdateLocation() {
		let windowIter = this.windowPoolIterator();
		for (let win of windowIter) {
			RouterClient.transmit("DockingService." + win.name, { command: "updateWindowLocation", bounds: win.getBounds() });
		}
	}

	/**
  * Updates the groupData object, which is pushed out to components.
  */
	_updateGroupData() {
		let groups = this.getGroups();
		let groupUpdate = {};

		for (var groupName in groups) {
			let group = groups[groupName],
			    windowNames = group.getWindowNames(),

			//This shouldn't happen -- but just in case.
			topRightWindow = windowNames.length ? group.getMoveAnchor("BottomLeft").name : null;

			groupUpdate[groupName] = {
				windowNames: windowNames,
				isMovable: group.isMovable,
				isAlwaysOnTop: group.isAlwaysOnTop,
				topRightWindow: topRightWindow,
				isARectangle: group.isARectangle()
			};
		}

		groupData = groupUpdate;
	}

	/**
  * Sends the groupData object out to the rest of the application.
  */
	publishGroupUpdate() {
		let self = this;
		Logger.system.debug("Publishing Group Update:", groupData);
		RouterClient.publish("Finsemble.WorkspaceService.groupUpdate", {
			groupName: "Docking",
			groupData: groupData,
			workspaceName: self.activeWorkspace.name
		});
		RouterClient.publish("DockingService.groupUpdate", {
			groupName: "Docking",
			groupData: groupData,
			workspaceName: self.activeWorkspace.name
		});
	}

	handleWorkspaceUpdate(err, response) {
		let self = this;
		Logger.system.debug("HANDLING WORKSPACE UPDATE");
		var data = response.data;
		if (!data || !data.activeWorkspace) {
			return;
		}
		this.activeWorkspace = data.activeWorkspace;
		groupData = data.activeWorkspace.groups || {};
		Logger.system.debug("Publishing Group Update: HandleWorkspaceUpdate");
		self.publishGroupUpdate();
		self.moveCount = 0;
	}

	/**
  * Checks to see if a window belongs to any groups.
  */
	checkIfWindowIsInGroup(name) {
		let self = this;
		if (groupData) {
			for (var groupName in groupData) {
				let groupWindows = groupData[groupName].windowNames;
				if (groupWindows.includes(name)) {
					let params = {
						groupName: groupName,
						win: self.getWindow(name)
					};
					Object.assign(params, groupData[groupName]);
					self.addWindowToGroup(params);
				}
			}
		}
	}

	/**
  * Sends the update to all toolbars.
  * @todo, this will eventually be monitor-specific.
  */
	sendAutoArrangeStatusUpdate() {
		RouterClient.publish(DOCKINGSERVICE_AUTO_ARRANGE_CHANNEL, {
			isAutoArranged: this.AutoArrange.isArranged
		});
	}

	/**
  * @private
  * @param {LauncherClient~windowDescriptor} windowDescriptor
  * @param {monitorDimensions} monitorDimensions
  * @returns {boolean} Whether window is on the current monitor.
  */
	windowOnMonitor(windowDescriptor, monitorDimensions) {
		if (!windowDescriptor.monitor) {
			return false;
		}
		//if right or left edge is within the window's bounds.
		return windowDescriptor.monitor.name === monitorDimensions.name;
	}

	/**
  * Get bounds for a window.
  */
	getBounds(params, cb) {
		let win = this.getWindow(params.name);
		var bounds = null;
		if (win) {
			bounds = win.getBounds();
			if (cb) {
				cb(null, bounds);
			}
		} else {
			util.getFinWindow({
				windowName: params.name,
				uuid: params.uuid
			}).then(function (finWin) {
				finWin.getBounds(bounds => {
					cb(null, bounds);
				});
			}).catch(err => {
				cb(err, null);
			});
		}

		return bounds;
	}

	deregisterAllWindows() {
		let self = this;
		return new Promise(function (resolve, reject) {
			let windows = self.getWindows();
			for (let windowName in windows) {
				self.removeWindow(windowName);
			}
			resolve();
		});
	}

	/* Stuff for Tabbing and Tiling */
	getMouseInGroup(mousePosition) {
		let groups = this.getGroups();
		let mouseGroups = [];
		for (let g in groups) {
			let group = groups[g];
			let win = group.getWindow(group.getWindowNames()[0]);
			if (!win) continue;
			if (win.win.windowState === FinsembleWindow.WINDOWSTATE.MINIMIZED) continue;
			if (BoxMath.isPointInBox(mousePosition, group.getBounds())) {
				mouseGroups.push(group);
			}
		}
		if (mouseGroups.length) {
			for (let g of mouseGroups) {
				if (g.isMovable) return g;
			}
			return mouseGroups[0];
		}

		return false;
	}

	getMouseInWindow(mousePosition) {
		let windows = this.getWindows();
		for (var w in windows) {
			let win = windows[w];
			if (win.win.windowState === FinsembleWindow.WINDOWSTATE.MINIMIZED) continue;
			if (mousePosition && win && BoxMath.isPointInBox(mousePosition, win.getBounds())) {
				return win;
			}
		}
		return false;
	}

	startTrackingMouse(interval, cb = Function.prototype) {
		if (this.mouseTracker) {
			clearInterval(this.mouseTracker.interval);
			this.mouseTracker.callback && this.mouseTracker.callback("New tracker overrode this one");
		} else {
			this.mouseTracker = {};
		}
		this.mouseTracking = true;
		this.mouseTracker.callback = cb;
		this.mouseTracker.interval = setInterval(() => {
			System.getMousePosition((err, mousePosition) => {
				if (!this.mouseTracker) this.mouseTracker = {};
				if (!err) this.mouseTracker.mousePosition = mousePosition;
				cb(err, mousePosition);
			});
		}, interval);
	}

	stopTrackingMouse(cb) {
		this.mouseTracking = false;
		cb(null, this.mouseTracker.mousePosition);
		clearInterval(this.mouseTracker.interval);
		this.mouseTracker = false;
		let self = this;
		self.groupMaskQueue.push(function (cb) {
			self.hideGroupMask(cb);
		}, function () {});
	}

	/**
  * Check if we are near the edge of a rectangle within x% or xpx
  *
  * @param {any} position
  * @param {any} bounds
  * @param {any} tolerance
  * @param {string} [toleranceType="percent"] percent or pixel
  * @returns
  * @memberof DockingService
  */
	isPositionNearEdge(position, bounds, tolerance, toleranceType = "percent") {
		// inside box
		let edge = {};

		if (position.x > bounds.left && position.x < bounds.right && position.y > bounds.top && position.y < bounds.bottom) {
			let edgeToReturn = false;
			let left = position.x - bounds.left;
			if (toleranceType == "percent") left = left / bounds.width;
			if (left < tolerance) {
				edge.left = left;
				edgeToReturn = "left";
			}
			let right = bounds.right - position.x;
			if (toleranceType == "percent") right = right / bounds.width;
			if (right < tolerance) {
				edge.right = right;
				edgeToReturn = "right";
			}
			let top = position.y - bounds.top;
			if (toleranceType == "percent") top = top / bounds.height;
			if (top < tolerance) {
				edge.top = top;
				edgeToReturn = "top";
			}
			let bottom = bounds.bottom - position.y;
			if (toleranceType == "percent") bottom = bottom / bounds.height;
			if (bottom < tolerance) {
				edge.bottom = bottom;
				edgeToReturn = "bottom";
			}
			if (edge.left && edge.top) {
				if (left < top) return "left";else return "top";
			}
			if (edge.left && edge.bottom) {
				if (left < bottom) return "left";else return "bottom";
			}
			if (edge.right && edge.top) {
				if (left < top) return "right";else return "top";
			}
			if (edge.right && edge.bottom) {
				if (right < bottom) return "right";else return "bottom";
			}
			return edgeToReturn;
		}
		return false;
	}

	startTilingOrTabbing(err, response) {
		let self = this;
		/**
   * Shows the scrim occupying half the of the group or window bounds specified in bounds on the side specfied by edge.
   *
   * @param {any} edge
   * @param {any} bounds
   * @returns
   */
		function scrimShower(edge, bounds) {
			if (!self.mouseTracking) {
				console.log("In scrimShower after stop");
				return;
			}
			let maskBounds = Object.assign({}, bounds);
			let newWindowBounds = Object.assign({}, bounds);
			switch (edge) {
				case "full":
					// This is for swapping
					break;
				case "top":
					maskBounds.height = Math.round(bounds.height / 2);
					maskBounds.bottom = maskBounds.top + maskBounds.height;
					newWindowBounds.top = maskBounds.bottom;
					newWindowBounds.height = bounds.height - maskBounds.height;
					break;
				case "left":
					maskBounds.width = Math.round(bounds.width / 2);
					maskBounds.right = maskBounds.left + maskBounds.width;
					newWindowBounds.left = maskBounds.right;
					newWindowBounds.width = bounds.width - maskBounds.width;
					break;
				case "bottom":
					maskBounds.height = Math.round(bounds.height / 2);
					maskBounds.top = maskBounds.bottom - maskBounds.height;
					newWindowBounds.bottom = maskBounds.top;
					newWindowBounds.height = bounds.height - maskBounds.height;
					break;
				case "right":
					maskBounds.width = Math.round(bounds.width / 2);
					maskBounds.left = maskBounds.left + maskBounds.width;
					newWindowBounds.right = maskBounds.left;
					newWindowBounds.width = bounds.width - maskBounds.width;
					break;
			}
			self.groupMaskQueue.push(function (cb) {
				self.showGroupMask({ bounds: maskBounds, opacity: 0.5 }, cb);
			}, function () {
				self.groupMask.win.bringToFront();
			});
			//self.showGroupMask(maskBounds, 0.5, () => { self.groupMask.win.bringToFront(); });

			return {
				maskBounds: maskBounds,
				newWindowBounds: newWindowBounds
			};
		}

		/**
   * Checks if mousePosition is in group or window
   *
   * @param {any} mpErr
   * @param {any} mousePosition
   */
		function boundsChecker(mpErr, mousePosition) {
			if (!self.mouseTracking) {
				console.log("In boundsChecker after stop");
				clearInterval(self.mouseTracker.interval);
				return;
			}
			let headerHeight = self.headerHeight;
			let group = self.getMouseInGroup(mousePosition);
			let win = self.getMouseInWindow(mousePosition);

			if (!group.isMovable || !group.isARectangle()) group = null; // Ignore snapping groups

			let actualGroupBounds;
			let groupBounds;
			if (group) {
				actualGroupBounds = group.getBounds();
				groupBounds = Object.assign({}, actualGroupBounds); //If in header, we are tabbing
				groupBounds.top += headerHeight;
				groupBounds.height -= headerHeight;
				/*if (win && win.groupNames.includes(group.name)) {
    	win = null;
    }*/
			}

			let actualWindowBounds;
			let windowBounds;
			if (win) {
				actualWindowBounds = win.getBounds();
				windowBounds = Object.assign({}, actualWindowBounds); //If in header, we are tabbing
				windowBounds.top += headerHeight;
				windowBounds.height -= headerHeight;
				if (win.name == response.data.windowIdentifier.windowName) win = null; // Ignore the window itself.
			}

			let showScrim = false;
			let bringToFront = false;
			//let swapping = false;
			if (group) {
				// is mouse in group? (only tiling possibe in group)
				// are we swapping -> IF sourcewindow is in same group swap.
				if (win) {}
				//let sourceWindow = self.getWindow(response.data.windowIdentifier.windowName);

				//if (!swapping) {
				let tolerance = 0.1; // if at group edge
				if (!win) tolerance = 0.5; // if in group but not in window (deal with tetris shaped groups)
				let edge = self.isPositionNearEdge(mousePosition, groupBounds, self.groupTileBuffer, "pixel");
				if (edge) {
					//show mask occupying proper half
					if (!(self.operation && self.operation.type == "tiling" && self.operation.tileWith == "group" && self.operation.group.name == group.name)) {
						// flashing from bringing to front fix
						bringToFront = true;
					}
					self.operation = {
						type: "tiling",
						tileWith: "group",
						group: group,
						edge: edge
					};
					showScrim = true;
					if (bringToFront) group.bringToFront();
					self.operation.newBounds = scrimShower(edge, actualGroupBounds);
				} else if (win) {
					// if not at group edge, am I in a window?
					let sourceWindow = self.getWindow(response.data.windowIdentifier.windowName);
					if (sourceWindow.groupNames && sourceWindow.groupNames.includes(group.name)) {
						self.operation = {
							type: "swapping",
							window: win,
							group: group
						};
						showScrim = true;
						scrimShower("full", actualWindowBounds);
						//swapping = true;
					} else {

						let edge = self.isPositionNearEdge(mousePosition, windowBounds, 0.5);
						if (edge) {
							if (!(self.operation && self.operation.type == "tiling" && self.operation.tileWith == "window" && self.operation.window.name == win.name)) {
								// flashing from bringing to front fix
								bringToFront = true;
							}
							self.operation = {
								type: "tiling",
								tileWith: "window",
								window: win,
								edge: edge
							};
							showScrim = true;
							if (bringToFront) win.bringToFront();
							self.operation.newBounds = scrimShower(edge, actualWindowBounds);
						}
					}
				}
				//}
			} else if (win) {
				// is mouse in window that is not in a group
				let edge = self.isPositionNearEdge(mousePosition, windowBounds, 0.5);
				if (edge) {
					if (!(self.operation && self.operation.type == "tiling" && self.operation.tileWith == "window" && self.operation.window.name == win.name)) {
						// flashing from bringing to front fix
						bringToFront = true;
					}
					self.operation = {
						type: "tiling",
						tileWith: "window",
						window: win,
						edge: edge
					};
					showScrim = true;
					if (bringToFront) win.bringToFront();
					self.operation.newBounds = scrimShower(edge, actualWindowBounds);
				}
			}
			if (!showScrim) {
				// are we tabbing??
				self.groupMaskQueue.push(function (cb) {
					self.hideGroupMask(cb);
				}, function () {});
				let tabbing = false;
				if (win) {
					let edge = self.isPositionNearEdge(mousePosition, windowBounds, headerHeight, "pixel");
					if (edge == "top") {
						self.operation = {
							type: "tabbing"
						};
					}
				}
				if (!tabbing) {
					self.operation = {
						type: "detaching"
					};
				}
			}
			self.operation.source = response.data.windowIdentifier;
		}
		this.startTrackingMouse(100, boundsChecker);
	}

	cancelTilingOrTabbing(err, response) {
		this.stopTrackingMouse((err, mousePosition) => {});
	}

	buildSnapRelationshipsForGroup(group) {
		let windows = group.getWindows();
		for (var w in windows) {
			this.buildSnapRelationships(windows[w]);
		}
	}

	verifyWindowsAndGroups() {
		let groups = this.getGroups();
		for (var g in groups) {
			let group = groups[g];

			let windows = group.getWindows();
			for (let w in windows) {
				let win = windows[w];
				if (!win.groupNames.includes(group.name)) {
					console.log("Group thinks it has window. Window doesn't think so", group.name, win.name);
				}
			}
		}

		let windows = this.getWindows();
		for (let w in windows) {
			let win = windows[w];
			for (let g in window.groupNames) {
				let group = this.getGroup(g);
				if (!group.getWindow(win.name)) {
					console.log("Window thinks it is group. Group doesn't think so", group.name, win.name);
				}
			}
		}
	}

	cleanupGroupGaps(group) {
		let windowBounds = this.getBoundsOfGroupWindows(group);
		//windowBounds = this.cleanupSharedEdges(group, windowBounds, 0);
		windowBounds = this.cleanupGaps(group, windowBounds);
		this.setBoundsOfGroupWindows(group, windowBounds);
	}

	stopTilingOrTabbing(err, response) {
		/* Show Window at Last Scrim Position */
		this.stopTrackingMouse((err, mousePosition) => {
			//take what the user sent on dragend
			mousePosition = response.data.mousePosition || mousePosition;
			if (!this.operation) return;
			let sourceWindow = this.getWindow(this.operation.source.windowName);
			let oldBounds = sourceWindow.getBounds();
			let fillHolesFor = [];
			let self = this;
			function fillHoles(group, bounds) {
				group.fillHole(bounds);
				self.cleanupGroupGaps(group);
				self.buildSnapRelationshipsForGroup(group);
			}

			let sourceMoveRequest = {
				name: sourceWindow.name,
				changeType: 0
			};
			if (sourceWindow.groupNames && sourceWindow.groupNames.length) {
				//check if we need to fill holes
				for (let i = sourceWindow.groupNames.length - 1; i >= 0; i--) {
					let g = sourceWindow.groupNames[i];
					let group = this.getGroup(g);
					if (group.isARectangle() && group.isMovable) {
						fillHolesFor.push(group);
					}
				}
			}
			//When we call request-move, docking will stp if the window is between two snapping regions. By temporarily reducing the buffer size, we prevent inadventent snaps and move our window to where we calculated it should go.
			const BUFFER = this.bufferSize;
			this.setBufferSize(0);

			switch (this.operation.type) {
				case "tiling":
					let groupNames;
					let placement = this.checkShortCircuits(this.operation.newBounds.maskBounds, this.operation.newBounds.maskBounds);
					this.operation.newBounds.newWindowBounds = this.checkShortCircuits(this.operation.newBounds.newWindowBounds, this.operation.newBounds.newWindowBounds);

					//let oldGroups = clone(sourceWindow.groupNames);
					//2nd param is 'deleteGroupsWith1Window'
					this.removeWindowFromAllGroups(sourceWindow, false);

					switch (this.operation.tileWith) {
						case "group":
							CALCULATOR.removeWindow(sourceWindow.name, false);
							/*if (sourceWindow.groupNames.includes(this.operation.group.name)) { //remove window from group before scaling group
       	this.removeWindowFromGroup(sourceWindow.name, this.operation.group.name);
       	let group = this.getGroup(this.operation.group.name);
       	this.cleanupGroupGaps(group);
       	this.buildSnapRelationshipsForGroup(group);
       }*/

							if (fillHolesFor.some(grp => this.operation.group.name === grp.name)) {
								fillHoles(this.operation.group, oldBounds);
								fillHolesFor = [];
							}
							//if (!(oldBounds.width === this.operation.group.width || oldBounds.height === this.operation.group.height) && this.operation.group.sharesAnEdgeWith(oldBounds)) {
							this.operation.group.scale(this.operation.newBounds.newWindowBounds, this.operation.edge, this);
							this.operation.group.resizeHandle = this.operation.edge;
							//this.cleanupGroupResize(this.operation.group);
							var WBs = this.getBoundsOfGroupWindows(this.operation.group);
							WBs = this.cleanupSharedEdges(this.operation.group, WBs);
							this.setBoundsOfGroupWindows(this.operation.group, WBs);
							this.operation.group.updateBounds();
							let groupBounds = this.operation.group.getBounds();

							//If the scale shortcircuits, we'll want to shift the window's placement to reflect the actual group bounds instead of what we planned for.
							switch (this.operation.edge) {
								case "right":
									placement.left = groupBounds.right;
									placement.right = placement.width + placement.left;
									break;
								case "left":
									placement.right = groupBounds.left;
									placement.left = placement.right - placement.width;
									break;
								case "top":
									placement.bottom = groupBounds.top;
									placement.top = placement.bottom - placement.height;
									break;
								case "bottom":
									placement.top = groupBounds.bottom;
									placement.bottom = placement.top + placement.height;
									break;
							}
							groupNames = [this.operation.group.name];
							CALCULATOR.addWindow(sourceWindow.name, sourceWindow);
							break;
						case "window":
							//If the scale shortcircuits, we'll want to shift the window's placement to reflect the actual group bounds instead of what we planned for.
							switch (this.operation.edge) {
								case "right":
									placement.left = this.operation.newBounds.newWindowBounds.right;
									placement.right = placement.width + placement.left;
									break;
								case "left":
									placement.right = this.operation.newBounds.newWindowBounds.left;
									placement.left = placement.right - placement.width;
									break;
								case "top":
									placement.bottom = this.operation.newBounds.newWindowBounds.top;
									placement.top = placement.bottom - placement.height;
									break;
								case "bottom":
									placement.top = this.operation.newBounds.newWindowBounds.bottom;
									placement.bottom = placement.top + placement.height;
									break;
							}
							this.operation.window.setBounds(this.operation.newBounds.newWindowBounds);
							//this.buildSnapRelationships(this.operation.window);
							groupNames = this.operation.window.groupNames;
							break;
					}

					//this.buildSnapRelationships(sourceWindow);
					Object.assign(sourceMoveRequest, placement);

					if (groupNames && groupNames.length) {
						// If target is already part of a group or merging with a group
						this.requestMove(sourceMoveRequest, bounds => {
							if (bounds && !bounds.finished) return;
							for (var g of groupNames) {
								let group = this.addWindowToGroup({ groupName: g, win: sourceWindow });
								this.cleanupGroupGaps(group);
								this.buildSnapRelationshipsForGroup(group);
								group.updateBounds();
							}
							this.updateGroupData();
							this.onMouseUp();
							if (fillHolesFor.length) {
								for (let g of fillHolesFor) {
									fillHoles(g, oldBounds);
								}
							}
						});
					} else {
						// If target is not part of a group
						this.requestMove(sourceMoveRequest, bounds => {
							if (bounds && !bounds.finished) return;
							let group = this.addWindowToGroup({
								win: this.operation.window,
								isMovable: true
							});
							this.addWindowToGroup({
								win: sourceWindow,
								groupName: group.name
							});
							this.updateGroupData();
							this.onMouseUp();
							if (fillHolesFor.length) {
								for (let g of fillHolesFor) {
									fillHoles(g, oldBounds);
								}
							}
						});
					}

					break;
				case "swapping":
					let sourceWindowNewBounds = this.operation.window.getBounds();
					let targetWindowNewBounds = sourceWindow.getBounds();

					sourceWindow.setBounds(sourceWindowNewBounds);
					this.operation.window.setBounds(targetWindowNewBounds);

					this.buildSnapRelationships(sourceWindow);
					this.buildSnapRelationships(this.operation.window);

					this.buildSnapRelationshipsForGroup(this.operation.group);
					this.updateGroupData();
					break;
				case "tabbing":

					break;
				case "detaching":
					let newBounds = {
						top: mousePosition.y,
						left: mousePosition.x,
						right: sourceWindow.width + mousePosition.x,
						bottom: sourceWindow.height + mousePosition.y,
						width: sourceWindow.width,
						height: sourceWindow.height
					};
					this.removeWindowFromAllGroups(sourceWindow, false);

					this.updateGroupData();
					Object.assign(sourceMoveRequest, newBounds);
					this.requestMove(sourceMoveRequest, bounds => {
						if (bounds && !bounds.finished) return;
						if (fillHolesFor.length) {
							for (let g of fillHolesFor) {
								fillHoles(g, oldBounds);
							}
						}
						this.onMouseUp();
					});
					//this.buildSnapRelationships(sourceWindow);
					break;
			}
			this.setBufferSize(BUFFER);
			if (this.operation.group) {
				this.operation.group.resizeHandle = null;
			}
			this.operation = null;
		});
	}

}

//dockingService.prototype = new baseService();

var serviceInstance = new DockingService({
	startupDependencies: {
		services: ["launcherService"],
		clients: ["configClient"]
	},
	shutdownDependencies: {
		services: ["launcherService"]
	},
	addOFWrapper: false
});

serviceInstance.onBaseServiceReady(function (callback) {
	window.RouterClient = serviceInstance.RouterClient;
	serviceInstance.createGroupMask();
	serviceInstance.createRouterEndpoints();
	async.parallel([function setupDockingCalculator(done) {
		ConfigClient.getValue({ field: "finsemble" }, function (err, response) {
			serviceConfig = response.services.dockingService.config;
			console.log("configs", response);
			serviceConfig.assimilationEnabled = response.betaFeatures.assimilation.enabled;
			let docking = response.docking || response.betaFeatures.docking;
			if (typeof docking !== "undefined") {
				serviceConfig.GROUP_MODE = {
					enabled: docking.enabled,
					behavior: "explicit",
					groupTileBuffer: docking.groupTileBuffer || 30,
					headerHeight: docking.headerHeight || 32
				};
			}
			serviceInstance.setupDockingCalculator();
			done();
		});
	}, function waitForOtherServices(done) {
		FSBLDepdendencyManager.startup.waitFor({
			services: ["preferencesService"]
		}, done);
	}], callback);
});

window.DockingService = serviceInstance;
//window.DockingCalculator = DockingCalculator;
serviceInstance.start();

module.exports = serviceInstance;

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\services\\docking\\dockingService.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\services\\docking\\dockingService.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 121 */,
/* 122 */,
/* 123 */,
/* 124 */,
/* 125 */,
/* 126 */,
/* 127 */,
/* 128 */,
/* 129 */,
/* 130 */,
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = asyncify;

var _isObject = __webpack_require__(144);

var _isObject2 = _interopRequireDefault(_isObject);

var _initialParams = __webpack_require__(133);

var _initialParams2 = _interopRequireDefault(_initialParams);

var _setImmediate = __webpack_require__(108);

var _setImmediate2 = _interopRequireDefault(_setImmediate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Take a sync function and make it async, passing its return value to a
 * callback. This is useful for plugging sync functions into a waterfall,
 * series, or other async functions. Any arguments passed to the generated
 * function will be passed to the wrapped function (except for the final
 * callback argument). Errors thrown will be passed to the callback.
 *
 * If the function passed to `asyncify` returns a Promise, that promises's
 * resolved/rejected state will be used to call the callback, rather than simply
 * the synchronous return value.
 *
 * This also means you can asyncify ES2017 `async` functions.
 *
 * @name asyncify
 * @static
 * @memberOf module:Utils
 * @method
 * @alias wrapSync
 * @category Util
 * @param {Function} func - The synchronous function, or Promise-returning
 * function to convert to an {@link AsyncFunction}.
 * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be
 * invoked with `(args..., callback)`.
 * @example
 *
 * // passing a regular synchronous function
 * async.waterfall([
 *     async.apply(fs.readFile, filename, "utf8"),
 *     async.asyncify(JSON.parse),
 *     function (data, next) {
 *         // data is the result of parsing the text.
 *         // If there was a parsing error, it would have been caught.
 *     }
 * ], callback);
 *
 * // passing a function returning a promise
 * async.waterfall([
 *     async.apply(fs.readFile, filename, "utf8"),
 *     async.asyncify(function (contents) {
 *         return db.model.create(contents);
 *     }),
 *     function (model, next) {
 *         // `model` is the instantiated model object.
 *         // If there was an error, this function would be skipped.
 *     }
 * ], callback);
 *
 * // es2017 example, though `asyncify` is not needed if your JS environment
 * // supports async functions out of the box
 * var q = async.queue(async.asyncify(async function(file) {
 *     var intermediateStep = await processFile(file);
 *     return await somePromise(intermediateStep)
 * }));
 *
 * q.push(files);
 */
function asyncify(func) {
    return (0, _initialParams2.default)(function (args, callback) {
        var result;
        try {
            result = func.apply(this, args);
        } catch (e) {
            return callback(e);
        }
        // if result is Promise object
        if ((0, _isObject2.default)(result) && typeof result.then === 'function') {
            result.then(function (value) {
                invokeCallback(callback, null, value);
            }, function (err) {
                invokeCallback(callback, err.message ? err : new Error(err));
            });
        } else {
            callback(null, result);
        }
    });
}

function invokeCallback(callback, error, value) {
    try {
        callback(error, value);
    } catch (e) {
        (0, _setImmediate2.default)(rethrow, e);
    }
}

function rethrow(error) {
    throw error;
}
module.exports = exports['default'];

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = DLL;
// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation
// used for queues. This implementation assumes that the node provided by the user can be modified
// to adjust the next and last properties. We implement only the minimal functionality
// for queue support.
function DLL() {
    this.head = this.tail = null;
    this.length = 0;
}

function setInitial(dll, node) {
    dll.length = 1;
    dll.head = dll.tail = node;
}

DLL.prototype.removeLink = function (node) {
    if (node.prev) node.prev.next = node.next;else this.head = node.next;
    if (node.next) node.next.prev = node.prev;else this.tail = node.prev;

    node.prev = node.next = null;
    this.length -= 1;
    return node;
};

DLL.prototype.empty = function () {
    while (this.head) this.shift();
    return this;
};

DLL.prototype.insertAfter = function (node, newNode) {
    newNode.prev = node;
    newNode.next = node.next;
    if (node.next) node.next.prev = newNode;else this.tail = newNode;
    node.next = newNode;
    this.length += 1;
};

DLL.prototype.insertBefore = function (node, newNode) {
    newNode.prev = node.prev;
    newNode.next = node;
    if (node.prev) node.prev.next = newNode;else this.head = newNode;
    node.prev = newNode;
    this.length += 1;
};

DLL.prototype.unshift = function (node) {
    if (this.head) this.insertBefore(this.head, node);else setInitial(this, node);
};

DLL.prototype.push = function (node) {
    if (this.tail) this.insertAfter(this.tail, node);else setInitial(this, node);
};

DLL.prototype.shift = function () {
    return this.head && this.removeLink(this.head);
};

DLL.prototype.pop = function () {
    return this.tail && this.removeLink(this.tail);
};

DLL.prototype.toArray = function () {
    var arr = Array(this.length);
    var curr = this.head;
    for (var idx = 0; idx < this.length; idx++) {
        arr[idx] = curr.data;
        curr = curr.next;
    }
    return arr;
};

DLL.prototype.remove = function (testFn) {
    var curr = this.head;
    while (!!curr) {
        var next = curr.next;
        if (testFn(curr)) {
            this.removeLink(curr);
        }
        curr = next;
    }
    return this;
};
module.exports = exports["default"];

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (fn) {
    return function () /*...args, callback*/{
        var args = (0, _slice2.default)(arguments);
        var callback = args.pop();
        fn.call(this, args, callback);
    };
};

var _slice = __webpack_require__(109);

var _slice2 = _interopRequireDefault(_slice);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = exports['default'];

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = onlyOnce;
function onlyOnce(fn) {
    return function () {
        if (fn === null) throw new Error("Callback was already called.");
        var callFn = fn;
        fn = null;
        callFn.apply(this, arguments);
    };
}
module.exports = exports["default"];

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = queue;

var _baseIndexOf = __webpack_require__(140);

var _baseIndexOf2 = _interopRequireDefault(_baseIndexOf);

var _isArray = __webpack_require__(143);

var _isArray2 = _interopRequireDefault(_isArray);

var _noop = __webpack_require__(145);

var _noop2 = _interopRequireDefault(_noop);

var _onlyOnce = __webpack_require__(134);

var _onlyOnce2 = _interopRequireDefault(_onlyOnce);

var _setImmediate = __webpack_require__(108);

var _setImmediate2 = _interopRequireDefault(_setImmediate);

var _DoublyLinkedList = __webpack_require__(132);

var _DoublyLinkedList2 = _interopRequireDefault(_DoublyLinkedList);

var _wrapAsync = __webpack_require__(110);

var _wrapAsync2 = _interopRequireDefault(_wrapAsync);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function queue(worker, concurrency, payload) {
    if (concurrency == null) {
        concurrency = 1;
    } else if (concurrency === 0) {
        throw new Error('Concurrency must not be zero');
    }

    var _worker = (0, _wrapAsync2.default)(worker);
    var numRunning = 0;
    var workersList = [];

    var processingScheduled = false;
    function _insert(data, insertAtFront, callback) {
        if (callback != null && typeof callback !== 'function') {
            throw new Error('task callback must be a function');
        }
        q.started = true;
        if (!(0, _isArray2.default)(data)) {
            data = [data];
        }
        if (data.length === 0 && q.idle()) {
            // call drain immediately if there are no tasks
            return (0, _setImmediate2.default)(function () {
                q.drain();
            });
        }

        for (var i = 0, l = data.length; i < l; i++) {
            var item = {
                data: data[i],
                callback: callback || _noop2.default
            };

            if (insertAtFront) {
                q._tasks.unshift(item);
            } else {
                q._tasks.push(item);
            }
        }

        if (!processingScheduled) {
            processingScheduled = true;
            (0, _setImmediate2.default)(function () {
                processingScheduled = false;
                q.process();
            });
        }
    }

    function _next(tasks) {
        return function (err) {
            numRunning -= 1;

            for (var i = 0, l = tasks.length; i < l; i++) {
                var task = tasks[i];

                var index = (0, _baseIndexOf2.default)(workersList, task, 0);
                if (index === 0) {
                    workersList.shift();
                } else if (index > 0) {
                    workersList.splice(index, 1);
                }

                task.callback.apply(task, arguments);

                if (err != null) {
                    q.error(err, task.data);
                }
            }

            if (numRunning <= q.concurrency - q.buffer) {
                q.unsaturated();
            }

            if (q.idle()) {
                q.drain();
            }
            q.process();
        };
    }

    var isProcessing = false;
    var q = {
        _tasks: new _DoublyLinkedList2.default(),
        concurrency: concurrency,
        payload: payload,
        saturated: _noop2.default,
        unsaturated: _noop2.default,
        buffer: concurrency / 4,
        empty: _noop2.default,
        drain: _noop2.default,
        error: _noop2.default,
        started: false,
        paused: false,
        push: function (data, callback) {
            _insert(data, false, callback);
        },
        kill: function () {
            q.drain = _noop2.default;
            q._tasks.empty();
        },
        unshift: function (data, callback) {
            _insert(data, true, callback);
        },
        remove: function (testFn) {
            q._tasks.remove(testFn);
        },
        process: function () {
            // Avoid trying to start too many processing operations. This can occur
            // when callbacks resolve synchronously (#1267).
            if (isProcessing) {
                return;
            }
            isProcessing = true;
            while (!q.paused && numRunning < q.concurrency && q._tasks.length) {
                var tasks = [],
                    data = [];
                var l = q._tasks.length;
                if (q.payload) l = Math.min(l, q.payload);
                for (var i = 0; i < l; i++) {
                    var node = q._tasks.shift();
                    tasks.push(node);
                    workersList.push(node);
                    data.push(node.data);
                }

                numRunning += 1;

                if (q._tasks.length === 0) {
                    q.empty();
                }

                if (numRunning === q.concurrency) {
                    q.saturated();
                }

                var cb = (0, _onlyOnce2.default)(_next(tasks));
                _worker(data, cb);
            }
            isProcessing = false;
        },
        length: function () {
            return q._tasks.length;
        },
        running: function () {
            return numRunning;
        },
        workersList: function () {
            return workersList;
        },
        idle: function () {
            return q._tasks.length + numRunning === 0;
        },
        pause: function () {
            q.paused = true;
        },
        resume: function () {
            if (q.paused === false) {
                return;
            }
            q.paused = false;
            (0, _setImmediate2.default)(q.process);
        }
    };
    return q;
}
module.exports = exports['default'];

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (worker, concurrency) {
  var _worker = (0, _wrapAsync2.default)(worker);
  return (0, _queue2.default)(function (items, cb) {
    _worker(items[0], cb);
  }, concurrency, 1);
};

var _queue = __webpack_require__(135);

var _queue2 = _interopRequireDefault(_queue);

var _wrapAsync = __webpack_require__(110);

var _wrapAsync2 = _interopRequireDefault(_wrapAsync);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = exports['default'];

/**
 * A queue of tasks for the worker function to complete.
 * @typedef {Object} QueueObject
 * @memberOf module:ControlFlow
 * @property {Function} length - a function returning the number of items
 * waiting to be processed. Invoke with `queue.length()`.
 * @property {boolean} started - a boolean indicating whether or not any
 * items have been pushed and processed by the queue.
 * @property {Function} running - a function returning the number of items
 * currently being processed. Invoke with `queue.running()`.
 * @property {Function} workersList - a function returning the array of items
 * currently being processed. Invoke with `queue.workersList()`.
 * @property {Function} idle - a function returning false if there are items
 * waiting or being processed, or true if not. Invoke with `queue.idle()`.
 * @property {number} concurrency - an integer for determining how many `worker`
 * functions should be run in parallel. This property can be changed after a
 * `queue` is created to alter the concurrency on-the-fly.
 * @property {Function} push - add a new task to the `queue`. Calls `callback`
 * once the `worker` has finished processing the task. Instead of a single task,
 * a `tasks` array can be submitted. The respective callback is used for every
 * task in the list. Invoke with `queue.push(task, [callback])`,
 * @property {Function} unshift - add a new task to the front of the `queue`.
 * Invoke with `queue.unshift(task, [callback])`.
 * @property {Function} remove - remove items from the queue that match a test
 * function.  The test function will be passed an object with a `data` property,
 * and a `priority` property, if this is a
 * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.
 * Invoked with `queue.remove(testFn)`, where `testFn` is of the form
 * `function ({data, priority}) {}` and returns a Boolean.
 * @property {Function} saturated - a callback that is called when the number of
 * running workers hits the `concurrency` limit, and further tasks will be
 * queued.
 * @property {Function} unsaturated - a callback that is called when the number
 * of running workers is less than the `concurrency` & `buffer` limits, and
 * further tasks will not be queued.
 * @property {number} buffer - A minimum threshold buffer in order to say that
 * the `queue` is `unsaturated`.
 * @property {Function} empty - a callback that is called when the last item
 * from the `queue` is given to a `worker`.
 * @property {Function} drain - a callback that is called when the last item
 * from the `queue` has returned from the `worker`.
 * @property {Function} error - a callback that is called when a task errors.
 * Has the signature `function(error, task)`.
 * @property {boolean} paused - a boolean for determining whether the queue is
 * in a paused state.
 * @property {Function} pause - a function that pauses the processing of tasks
 * until `resume()` is called. Invoke with `queue.pause()`.
 * @property {Function} resume - a function that resumes the processing of
 * queued tasks when the queue is paused. Invoke with `queue.resume()`.
 * @property {Function} kill - a function that removes the `drain` callback and
 * empties remaining tasks from the queue forcing it to go idle. No more tasks
 * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.
 */

/**
 * Creates a `queue` object with the specified `concurrency`. Tasks added to the
 * `queue` are processed in parallel (up to the `concurrency` limit). If all
 * `worker`s are in progress, the task is queued until one becomes available.
 * Once a `worker` completes a `task`, that `task`'s callback is called.
 *
 * @name queue
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {AsyncFunction} worker - An async function for processing a queued task.
 * If you want to handle errors from an individual task, pass a callback to
 * `q.push()`. Invoked with (task, callback).
 * @param {number} [concurrency=1] - An `integer` for determining how many
 * `worker` functions should be run in parallel.  If omitted, the concurrency
 * defaults to `1`.  If the concurrency is `0`, an error is thrown.
 * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can
 * attached as certain properties to listen for specific events during the
 * lifecycle of the queue.
 * @example
 *
 * // create a queue object with concurrency 2
 * var q = async.queue(function(task, callback) {
 *     console.log('hello ' + task.name);
 *     callback();
 * }, 2);
 *
 * // assign a callback
 * q.drain = function() {
 *     console.log('all items have been processed');
 * };
 *
 * // add some items to the queue
 * q.push({name: 'foo'}, function(err) {
 *     console.log('finished processing foo');
 * });
 * q.push({name: 'bar'}, function (err) {
 *     console.log('finished processing bar');
 * });
 *
 * // add some items to the queue (batch-wise)
 * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {
 *     console.log('finished processing item');
 * });
 *
 * // add some items to the front of the queue
 * q.unshift({name: 'bar'}, function (err) {
 *     console.log('finished processing bar');
 * });
 */

/***/ }),
/* 137 */,
/* 138 */,
/* 139 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while ((fromRight ? index-- : ++index < length)) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}

module.exports = baseFindIndex;


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

var baseFindIndex = __webpack_require__(139),
    baseIsNaN = __webpack_require__(141),
    strictIndexOf = __webpack_require__(142);

/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOf(array, value, fromIndex) {
  return value === value
    ? strictIndexOf(array, value, fromIndex)
    : baseFindIndex(array, baseIsNaN, fromIndex);
}

module.exports = baseIndexOf;


/***/ }),
/* 141 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */
function baseIsNaN(value) {
  return value !== value;
}

module.exports = baseIsNaN;


/***/ }),
/* 142 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.indexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function strictIndexOf(array, value, fromIndex) {
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

module.exports = strictIndexOf;


/***/ }),
/* 143 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;


/***/ }),
/* 144 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;


/***/ }),
/* 145 */
/***/ (function(module, exports) {

/**
 * This method returns `undefined`.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Util
 * @example
 *
 * _.times(2, _.noop);
 * // => [undefined, undefined]
 */
function noop() {
  // No operation performed.
}

module.exports = noop;


/***/ }),
/* 146 */,
/* 147 */,
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {const async = __webpack_require__(12);
var LauncherClient = __webpack_require__(80);
LauncherClient.initialize();
var Logger = __webpack_require__(2);
Logger.start();

class AutoArrange {
	constructor(params) {
		this.isArranged = {};
		this.DockingCalculator = params.DockingCalculator;
	}

	/**
  *
  * For more, see {@link https://medium.com/@jtreitz/the-algorithm-for-a-perfectly-balanced-photo-gallery-914c94a5d8af#.c09v4fn1e}. This is a javascript port of a python solution to the linear partition problem.
  * @param {Array} aspectRatios An array of numbers; in this case, aspect ratios.
  * @param {Number} rows Number of rows to distribute aspectRatios across.
  * @returns {Array} ans Returns an array of arrays. Each internal array represents a row.
  * @private
  */
	linearPartition(aspectRatios, rows) {
		var numWindows = aspectRatios.length;

		if (rows <= 0) {
			return [];
		}
		if (rows > numWindows) {
			return aspectRatios.map(function (x) {
				return [x];
			});
		}

		var table = [];
		var solution = [];

		for (var i = 0; i < numWindows; i++) {
			var row = [];
			for (var j = 0; j < rows; j++) {
				row.push(0);
			}
			table.push(row);
		}

		for (var i = 0; i < numWindows - 1; i++) {
			var row = [];
			for (var j = 0; j < rows - 1; j++) {
				row.push(0);
			}
			solution.push(row);
		}
		for (var i = 0; i < numWindows; i++) {
			if (i != 0) {
				table[i][0] = aspectRatios[i].ar + table[i - 1][0];
			} else {
				table[i][0] = aspectRatios[i].ar;
			}
		}

		for (var j = 0; j < rows; j++) {
			table[0][j] = aspectRatios[0].ar;
		}

		for (var i = 1; i < numWindows; i++) {
			for (var j = 1; j < rows; j++) {
				var m = [];
				var min;
				for (var x = 0; x < i; x++) {
					var list_of_pairs = [];
					var list_of_maxes = [];
					for (var x = 0; x < i; x++) {
						var max = Math.max(table[x][j - 1], table[i][0] - table[x][0]);
						list_of_pairs.push([max, x]);
						list_of_maxes.push(max);
					}
				}
				min = Math.min.apply(this, list_of_maxes);
				m = list_of_pairs.reduce(function (previous, current) {
					return current[0] < previous[0] ? current : previous;
				}, [Infinity]);
				table[i][j] = m[0];
				solution[i - 1][j - 1] = m[1];
			}
		}

		numWindows = numWindows - 1;
		rows = rows - 2;
		var ans = [];
		while (rows >= 0) {
			var sub_list = [];
			for (var i = solution[numWindows - 1][rows] + 1; i < numWindows + 1; i++) {
				sub_list.push(aspectRatios[i]);
			}
			ans = [sub_list].concat(ans);
			numWindows = solution[numWindows - 1][rows];
			rows--;
		}

		var beginning_list = [];
		for (var i = 0; i < numWindows + 1; i++) {
			beginning_list.push(aspectRatios[i]);
		}
		ans = [beginning_list].concat(ans);

		return ans;
	}

	/**
  * @private
  * @param {LauncherClient~windowDescriptor} windowDescriptor
  * @param {monitorDimensions} monitorDimensions
  * @returns {boolean} Whether window is on the current monitor.
  */
	windowOnMonitor(windowDescriptor, monitorDimensions) {
		//if right or left edge is within the window's bounds.
		return windowDescriptor.monitor.name === monitorDimensions.name;
	}

	getWindowsOnMonitor(windowDescriptorList, monitorDimensions) {
		let self = this;
		let descriptors = windowDescriptorList.filter((obj, ind) => {
			//2nd param says to not throw the error if the window isn't found.
			let win = self.DockingCalculator.getWindow(obj.name, false);
			if (!win) {
				return false;
			}
			if (obj.type === "Openfin") {
				try {
					let isArrangeable = obj.customData.foreign.services.dockingService.isArrangeable;
					if (typeof obj.customData.foreign.services.dockingService.isArrangable !== "undefined") {
						Logger.system.warn("isArrangable was a typo. It will be deprecated in Finsemble 2.0 in favor of isArrangeable");
						isArrangeable = obj.customData.foreign.services.dockingService.isArrangable;
					}

					if (isArrangeable) {
						return self.windowOnMonitor(win, monitorDimensions);
					}
					return false;
				} catch (e) {
					return false;
				}
			}
			return self.windowOnMonitor(win, monitorDimensions);
		});

		let windowsOnMonitor = [];
		for (let i = 0; i < descriptors.length; i++) {
			let descriptor = descriptors[i];
			let win = self.DockingCalculator.getWindow(descriptor.name);
			win.monitor = self.DockingCalculator.getMonitorForWindow(descriptor.name);
			if (!self.DockingCalculator.cachedPositions[win.monitor.name][win.name]) {
				self.DockingCalculator.cachedPositions[win.monitor.name][win.name] = {
					uuid: win.uuid,
					left: win.left,
					right: win.right,
					bottom: win.bottom,
					top: win.top,
					height: win.height,
					width: win.width
				};
			}

			windowsOnMonitor.push({
				name: win.name,
				ar: win.width / win.height,
				top: parseInt(win.top),
				bottom: parseInt(win.bottom),
				left: parseInt(win.left),
				right: parseInt(win.right)
			});
		}

		// before arranging, sort window list based on location to influence final arrangement;
		// note the comparison function is not transitive, so results aren't aways what expected;
		// however, they are usually intuitive when moving a single window.
		windowsOnMonitor.sort(function (a, b) {
			var result;
			if (a.top === b.top && a.left === b.left) {
				result = 0; // a == b
			} else if (a.top < b.top && a.left < b.left) {
				result = -1; // a < b
			} else if (a.top < b.bottom && a.left < b.left) {
				result = -1; // a < b
			} else {
				result = 1; // a > b
			}
			return result;
		});

		windowsOnMonitor.forEach(function (finWin, windex) {
			let wrap = self.DockingCalculator.getWindow(finWin.name);
			wrap.restore();
			wrap.bringToFront();
		});
		return windowsOnMonitor;
	}

	/**
  * Arranges all windows in the current workspace that are visible on the current monitor. For more about the algorithm used to distribute windows across rows, see {@link https://medium.com/@jtreitz/the-algorithm-for-a-perfectly-balanced-photo-gallery-914c94a5d8af#.c09v4fn1e this post}. The algorithm chooses the number of rows by taking the square root of the number of windows on the monitor and rounding down. 3 windows results in 1 row. 4 windows results in 2 rows. 8 windows will be arranged across 2 rows. 9 windows will be arranged across 3 rows. Other breakpoints are 16, 25, and 36.
  * @param {Object} monitorDimensions Montior dimensions of a given monitor. This value is passed
  * in from {@link util#getMonitorInfo}.
  */
	arrange(monitorDimensions, allMonitors, cb) {
		let self = this;
		if (self.isArranged[monitorDimensions.name]) {
			self.isArranged[monitorDimensions.name] = !self.isArranged[monitorDimensions.name];
			//Reverts windows and sends statusUpdate.
			self.revertArrangedWindows(monitorDimensions);
			return;
		}

		self.isArranged[monitorDimensions.name] = !self.isArranged[monitorDimensions.name];
		self.DockingCalculator.sendAutoArrangeStatusUpdate();
		var resizeQueue = [];
		/**
   * Goes through all windows and returns the windows that are:
   * 1) In the active workspace and
   * 2) On the monitor that autoarrange was clicked on.
   */
		fin.desktop.System.getAllWindows(function (windows) {
			var uuid = windows[0].uuid;
			LauncherClient.getActiveDescriptors(function (err, response) {
				//convert object to an array to make filtering easy.
				let descriptors = Object.keys(response).map(key => {
					return response[key];
				});
				let workspaceWindows = self.getWindowsOnMonitor(descriptors, monitorDimensions);
				//Number of rows is determined by the square root of the number of windows on the monitor.
				//This gives us a preference for N x N grids. If you have 9 windows, you get 3 rows.
				//If the aspect ratios are set correctly, you get 3x3.
				var rowGroups = self.linearPartition(workspaceWindows, Math.floor(Math.sqrt(workspaceWindows.length)));
				var height = Math.floor(monitorDimensions.height / rowGroups.length);
				//Iterates through the properly partitioned windows and queues up the movements.
				rowGroups.forEach(function (windowsInGroup, groupIndex) {
					var top = monitorDimensions.top + groupIndex * height;
					var width = monitorDimensions.width / windowsInGroup.length;
					//if we're on the last row and the number of rows is not divisible by the monitor's height,
					//we need to add the rounding error to the height so that there isn't a gap
					//between the taskbar and the bottom edge of our last row.
					var rowHeightTotal = height * rowGroups.length;
					if (groupIndex === rowGroups.length - 1 && rowHeightTotal !== monitorDimensions.height) {
						//since we round down the initial height calculation, rowHeightTotal
						//will always be less than the monitor's height.
						height += monitorDimensions.height - rowHeightTotal;
					}
					//Now that the position is set, queue up the movement.
					windowsInGroup.forEach(function (dockableWin, windex) {
						resizeQueue.push({
							dockableWin: self.DockingCalculator.getWindow(dockableWin.name),
							height: height,
							width: width,
							top: top,
							left: width * windex + monitorDimensions.left
						});
					});
				});
				//animate each window. when they're all done, call the callback, form snapping relationships, and leave this function.
				async.each(resizeQueue, animateWindow, function () {
					self.DockingCalculator.formGroup(resizeQueue[0].dockableWin.name, false);
					self.isArranged[monitorDimensions.name] = true;
					if (cb) {
						cb();
					}
				});
			});
		});

		function animateWindow(request, done) {
			let { height, width, top, left, dockableWin } = request;
			dockableWin.animatePositionAndHeight({
				height: height,
				width: width,
				top: top,
				left: left
			}, function () {
				self.DockingCalculator.buildSnapRelationships(dockableWin);
				RouterClient.transmit("DockingService." + dockableWin.name, {
					command: "saveWindowLocation",
					bounds: {
						left: left,
						width: width,
						top: top,
						height: height
					}
				});
				done();
			});
		}
	}

	/**
  * Returns windows to where they were before an auto-arrange occured.
  */
	revertArrangedWindows(monitorDimensions) {
		let self = this;
		async.each(Object.keys(self.DockingCalculator.cachedPositions[monitorDimensions.name]), revertWindow, updateGroupStuff);

		function revertWindow(windowName, done) {
			let bounds = self.DockingCalculator.cachedPositions[monitorDimensions.name][windowName];
			if (!bounds.uuid) {
				return done();
			}

			let wrap = self.DockingCalculator.getWindow(windowName);
			delete self.DockingCalculator.cachedPositions[monitorDimensions.name][windowName];

			wrap.animatePositionAndHeight({
				height: bounds.height,
				width: bounds.width,
				top: bounds.top,
				left: bounds.left,
				duration: 250
			}, function () {
				self.DockingCalculator.buildSnapRelationships(wrap);
				self.DockingCalculator.checkGroupMemebership(wrap);
				RouterClient.transmit("DockingService." + wrap.name, {
					command: "saveWindowLocation",
					bounds: wrap.getBounds()
				});
				done();
			});
		}
		function updateGroupStuff() {
			self.DockingCalculator.updateGroupData();
			Logger.system.debug("Publishing Group Update: Revert Autoarrange");
			self.DockingCalculator.publishGroupUpdate();
		}

		self.DockingCalculator.sendAutoArrangeStatusUpdate();
	}
}

module.exports = AutoArrange;

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\services\\docking\\autoArrange.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\services\\docking\\autoArrange.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {const Logger = __webpack_require__(2);
const WindowGroup = __webpack_require__(107);
const DockableBox = __webpack_require__(112);
const { CORNERS, EDGES, OPPOSITE_EDGE_MAP } = __webpack_require__(111);
const BoxMath = __webpack_require__(99);
const clone = function (obj) {
	//This has been tested a good amount. Previous to this commit we were using a mix of deepmerge and JSON.parse(JSON.stringify()).
	//Trying lodash.deepclone made my tests take 2-3s.
	//JSON.parse everywhere made them take ~ 1s.
	//Using JSON.parse on arrays and deep merge on objects makes them take 7-900ms.
	if (Array.isArray(obj)) {
		return obj.slice();
	} else {
		try {
			return JSON.parse(JSON.stringify(obj));
		} catch (e) {
			Logger.system.error("clone error", e);
			return e;
		}
	}
};

class DockableGroup extends WindowGroup {
	constructor(config) {
		super(config);
		this.name = config.name;
		this.isMovable = typeof config.isMovable !== "undefined" ? config.isMovable : false;
		this.windowBoundingBox = {
			min: {
				x: 0,
				y: 0
			},
			max: {
				x: 0,
				y: 0
			}
		};
		//Number of time's we've tried to fill a particular time. It's limited to 20 attempts to prevent infinite loops. Logs are emitted if we get into that state. Better to throw a warning than an infinite loop.
		this.fillAttempts = 0;
		// Add all dockablebox methods to this
		this.dockableBox = new DockableBox();
		this.inheritDockableBox();
		this.removeWindow = this.removeWindow.bind(this);
	}
	inheritDockableBox() {
		var self = this;
		var dockableBoxMethods = Object.getOwnPropertyNames(Object.getPrototypeOf(this.dockableBox)).filter(function (p) {
			if (p != "constructor") {
				return typeof self.dockableBox[p] === "function";
			} else {
				return false;
			}
		});
		for (let i = 0; i < dockableBoxMethods.length; i++) {
			let methodName = dockableBoxMethods[i];
			if (!this[methodName]) {
				this[methodName] = function () {
					return self.dockableBox[methodName].call(self, ...arguments);
				};
			}
		}
	}
	addWindow(win) {
		if (Object.keys(this.windows).length === 0) {
			this.windowBoundingBox = clone(win.windowBoundingBox);
		}
		if (this.isMovable) win.win.updateOptions({
			"taskbarIconGroup": this.name
		});
		super.addWindows(win);
		this.updateBounds();
	}

	updateBounds() {
		let groupBounds = this.calculateOuterBounds();
		if (!groupBounds) {
			return;
		}
		this.windowBoundingBox = groupBounds;
		this.setBuffer();
		this.setBounds({
			left: groupBounds.min.x,
			top: groupBounds.min.y,
			right: groupBounds.max.x,
			bottom: groupBounds.max.y
		});
	}

	getWindowsOnEdges() {
		let windowsOnSegment = {};
		let windowList = this.getWindows();
		for (let windowName in windowList) {
			let win = this.getWindow(windowName);
			for (let i = 0; i < EDGES.length; i++) {
				let edge = EDGES[i];
				if (win[edge] === this[edge]) {
					windowsOnSegment[win.name] = win;
				}
			}
		}
		return windowsOnSegment;
	}

	isARectangle() {
		let windows = this.getWindows();
		let groupArea = this.width * this.height;
		let windowArea = 0;
		for (let windowName in windows) {
			let win = this.getWindow(windowName);
			windowArea += win.width * win.height;
		}
		return groupArea === windowArea;
	}

	/**
  * When you move a group of windows left to right, the anchor algo finds the left-most window, and then sorts all of the windows on how close they are to that window. This function just finds the approrpiate anchor for that move.
  * @param {*} movingDirection
  */
	getMoveAnchor(movingDirection) {

		const DIMENSIONAL_MAP = {
			LeftTop: {
				primaryDimension: "bottom",
				secondaryDimension: "right"
			},
			LeftBottom: {
				primaryDimension: "top",
				secondaryDimension: "right"
			},
			TopLeft: {
				primaryDimension: "right",
				secondaryDimension: "bottom"
			},
			BottomLeft: {
				primaryDimension: "right",
				secondaryDimension: "top"
			},
			RightTop: {
				primaryDimension: "bottom",
				secondaryDimension: "left"
			},
			RightBottom: {
				primaryDimension: "top",
				secondaryDimension: "left"
			},
			TopRight: {
				primaryDimension: "left",
				secondaryDimension: "bottom"
			},
			BottomRight: {
				primaryDimension: "left",
				secondaryDimension: "top"
			},
			Right: {
				primaryDimension: "left",
				secondaryDimension: "top"
			},
			Left: {
				primaryDimension: "right",
				secondaryDimension: "top"
			},
			Top: {
				primaryDimension: "top",
				secondaryDimension: "left"
			},
			Bottom: {
				primaryDimension: "bottom",
				secondaryDimension: "left"
			}
		};
		//Had this happen but not reliably. Possible that it fires when the window isn't moving at all and the direction isn't set. Stopgap.
		if (!DIMENSIONAL_MAP[movingDirection]) {
			console.debug(`"${movingDirection}" is not a valid argument. Valid options are ${Object.keys(DIMENSIONAL_MAP).join(", ")}.`);
			return "NotMoving";
		}

		let { primaryDimension, secondaryDimension } = DIMENSIONAL_MAP[movingDirection];
		let windowArray = this.getWindowArray();
		//Sorts on the primary dimension; if they're tied, it sorts on the secondary dimension.
		return windowArray.sort((a, b) => {
			let aDim = a[primaryDimension],
			    bDim = b[primaryDimension],
			    comparingDimension = primaryDimension;
			if (aDim === bDim) {
				aDim = a[secondaryDimension];
				bDim = b[secondaryDimension];
				comparingDimension = secondaryDimension;
			}

			if (comparingDimension === "top" || comparingDimension === "left") {
				//Will order the array in ascending order.
				//In OF's virtual screen, the top-left is the 0,0 point (though it could be (-2000, 2000), or whatever). The higher the top or left, the further to the right the window is. The higher the top number, the closer to the bottom of the screen the window is.
				return aDim - bDim;
			} else {
				//sort the array in descending order.
				//The higher the right value, the closer the window is to the right of the screen. The higher the bottom number, the closer it is to the toolbar/top of the monitor.
				return bDim - aDim;
			}
		})[0];
	}

	/**
  * Used for resize. Grabs the windows on the opposite side of the resize handle.
 * @function {function name}
 * @param  {type} handle {description}
 * @return {type} {description}
 */
	getAnchors(handle) {
		let edges = {
			top: "bottom",
			right: "left",
			bottom: "top",
			left: "right"
		};

		let edgeArray = handle.split(/(?=[A-Z])/).map(function (s) {
			return s.toLowerCase();
		});

		let anchorNames = [];
		let self = this;

		for (let windowName in this.windows) {
			if (anchorNames.includes(windowName)) {
				continue;
			}
			let win = this.windows[windowName];
			let isAnchor = true;
			edgeArray.forEach(requestedEdge => {
				let edge = edges[requestedEdge];
				if (win[edge] !== self[edge]) {
					isAnchor = false;
				}
			});
			if (isAnchor) {
				anchorNames.push(windowName);
			}
		}

		return anchorNames;
	}

	/**
 * @function {function name}
 * @return {type} {description}
 */
	calculateOuterBounds() {
		let groupBounds = null;

		for (let windowName in this.windows) {
			let win = this.windows[windowName];
			if (!groupBounds) {
				groupBounds = {
					min: {
						x: win.left,
						y: win.top
					},
					max: {
						x: win.right,
						y: win.bottom
					}
				};
				continue;
			}

			//Did some testing and this is much faster than ternary operators.
			if (win.left < groupBounds.min.x) {
				groupBounds.min.x = win.left;
			}

			if (win.top < groupBounds.min.y) {
				groupBounds.min.y = win.top;
			}

			if (win.bottom > groupBounds.max.y) {
				groupBounds.max.y = win.bottom;
			}

			if (win.right > groupBounds.max.x) {
				groupBounds.max.x = win.right;
			}
		}
		return groupBounds;
	}

	/**
 * @function {function name}
 * @param  {type} name {description}
 * @return {type} {description}
 */
	removeWindow(name) {
		let win = this.getWindow(name);
		if (this.isMovable) win.win.updateOptions({
			"taskbarIconGroup": win.win.uuid
		});
		super.removeWindows(name);
		this.updateBounds();
	}

	/**
 * @function {function name}
 * @param  {type} bounds {description}
 * @return {type} {description}
 */
	getDelta(bounds) {
		return {
			left: bounds.left - this.left,
			right: bounds.right - this.right,
			height: bounds.height - this.height,
			width: bounds.width - this.width
		};
	}

	/**
 * @function {function name}
 * @param  {type} bounds {description}
 * @return {type} {description}
 */
	setBounds(bounds) {
		this.left = bounds.left;
		this.right = bounds.right;
		this.bottom = bounds.bottom;
		this.top = bounds.top;
		this.width = bounds.right - bounds.left;
		this.height = bounds.bottom - bounds.top;
		this.vertices = this.getCornerObject(bounds);
	}

	scale(newBounds, anchor, calculator) {
		//TODO -> move WindowIterator calculations to the group from the calculator aka remove the dependency on the calculator
		var self = this;

		var splitHandle = anchor.split(/(?=[A-Z])/).map(function (s) {
			return s.toLowerCase();
		});

		let groupIter = calculator.groupWindowIterator(this, splitHandle[0]);
		var movements = {};
		for (let win of groupIter) {
			win.onGroupEdge = {};
			win.resizeHandle = splitHandle[0];
			["top", "right", "left", "bottom"].forEach(handle => {
				if (win[handle] === this[handle]) {
					win.onGroupEdge[handle] = true;
				}
			});
			var newHeight = Math.round(newBounds.height * (win.height / this.height));
			var newWidth = Math.round(newBounds.width * (win.width / this.width));
			var request = win.getBounds();
			request.width = newWidth;
			request.height = newHeight;
			request.right = request.left + request.width;
			request.bottom = request.top + request.height;
			request.name = win.name;

			movements[request.name] = calculator.checkShortCircuits(request);
		}
		splitHandle.forEach(handle => {
			groupIter = calculator.groupWindowIterator(this);
			//cleans up the edges of the group in case rounding error messed us up.
			var oppEdge = OPPOSITE_EDGE_MAP[handle];
			for (var win of groupIter) {
				var moveRequest = movements[win.name];
				if (win.onGroupEdge && win.onGroupEdge[oppEdge] && moveRequest[oppEdge] !== newBounds[oppEdge]) {
					moveRequest.name = win.name;
					moveRequest[oppEdge] = newBounds[oppEdge];
					if (oppEdge === "bottom") {
						moveRequest.top = moveRequest.bottom - moveRequest.height;
					}
					if (oppEdge === "top") {
						moveRequest.bottom = moveRequest.top + moveRequest.height;
					}
					if (oppEdge === "left") {
						moveRequest.right = moveRequest.left + moveRequest.width;
					}
					if (oppEdge === "right") {
						moveRequest.left = moveRequest.right - moveRequest.width;
					}
					moveRequest.width = moveRequest.right - moveRequest.left;
					moveRequest.height = moveRequest.bottom - moveRequest.top;
					movements[win.name] = calculator.checkShortCircuits(moveRequest, win);
				}
			}
		});

		for (var windowName in movements) {
			//TODO: make the actual move only happen once. Looks like it happens here and in group.UpdateBounds
			calculator.moveWindow(movements[windowName]);
		}

		var alreadyDanced = [];
		splitHandle.forEach(handle => {
			var groupIter = calculator.groupWindowIterator(this);
			alreadyDanced = [];
			for (let anchor of groupIter) {
				if (!alreadyDanced.includes(anchor.name)) {
					var b = doTheConga(anchor, handle);b;
				}
			}
			// group.updateBounds();
			groupIter = calculator.groupWindowIterator(this);
			//cleans up the edges of the group in case rounding error messed us up.
			for (var win of groupIter) {
				if (win.onGroupEdge && win.onGroupEdge[handle] && win[handle] !== newBounds[handle]) {
					var moveRequest = win.getBounds();
					moveRequest.name = win.name;
					moveRequest[handle] = newBounds[handle];

					moveRequest.width = moveRequest.right - moveRequest.left;
					moveRequest.height = moveRequest.bottom - moveRequest.top;

					calculator.moveWindow(calculator.checkShortCircuits(moveRequest, win));
					var b = doTheConga(win, handle);b;
				}
			}
			this.updateBounds();
		});

		function doTheConga(win, handle) {
			if (!win) {
				Logger.system.warn("INVESTIGATE: No win passed to doTheConga");
				return;
			}
			var oppEdge = OPPOSITE_EDGE_MAP[handle];

			for (var i = 0, len = win.snappedWindows.length; i < len; i++) {
				var snappedWindowObj = win.snappedWindows[i];
				var snappedWin = calculator.getWindow(snappedWindowObj.name);
				if (!snappedWin) {
					Logger.system.warn(`INVESTIGATE: No Dockable Window found for ${snappedWindowObj.name}`);
					continue;
				}
				let groupIntersection = snappedWin.groupNames.some(name => win.groupNames.includes(name));
				if (!snappedWindowObj.edges[handle] || !groupIntersection) {
					continue;
				}

				var req = snappedWin.getBounds();
				req.name = snappedWin.name;

				snappedWin[oppEdge] = win[handle];
				var top = snappedWin.top,
				    left = snappedWin.left;
				if (handle === "top") {
					top = win.top - snappedWin.height;
				}

				if (handle === "bottom") {
					top = win.bottom;
				}

				if (handle === "right") {
					left = win.right;
				}

				if (handle === "left") {
					left = win.left - snappedWin.width;
				}

				snappedWin.moveTo(left, top);
				var b = doTheConga(snappedWin, handle);b;
				alreadyDanced.push(snappedWin.name);
			}
		}
	}
	getWindowsOnSegment(segment) {
		var windowsOnSegment = [];
		var winPool = this.getWindowNames();
		var points = [segment.min, segment.max];

		for (var i = 0; i < winPool.length; i++) {
			let win = this.getWindow(winPool[i]);
			for (var p = 0, len = points.length; p < len; p++) {
				var point = points[p];
				if (win.pointIsOnBoundingBox(point)) {
					let snapObj = {
						name: win.name,
						edge: win.getEdgeByPoint(point)
					};
					snapObj.segment = win.getEdges("obj")[snapObj.edge];
					windowsOnSegment.push(snapObj);
					break;
				}
			}
		}
		return windowsOnSegment;
	}
	/**
 * Not sure why this function doesn't use the one above. Similar functionality, but you can pass in a string instead of a line segment.
 * @todo, make it use the function above.
 * @param  {dockableWindow} win
 * @param  {string} edge E.g., 'left', 'right', etc.
 * @return {array}
 */
	getWindowsOnEdge(win, edge, includeCorners) {
		if (includeCorners === undefined) {
			includeCorners = false;
		}
		var windowsOnEdge = [];
		if (!edge) {

			//@todo, what went wrong to cause this.................
			return [];
		}
		var splitEdge = edge.split(/(?=[A-Z])/).map(function (s) {
			return s.toLowerCase();
		});

		var oppEdge = OPPOSITE_EDGE_MAP[edge];
		var windowSegment = win.getEdges("obj", includeCorners)[edge];

		for (let windowName in this.windows) {
			let possibleSnapper = this.windows[windowName];
			if (possibleSnapper.name === win.name) {
				continue;
			}
			let segment = possibleSnapper.getEdges("obj", includeCorners)[oppEdge];
			var shouldPush = false;
			let points = [{
				name: possibleSnapper.name,
				val: segment.min
			}, {
				name: possibleSnapper.name,
				val: segment.max
			}, {
				name: win.name,
				val: windowSegment.min
			}, {
				name: win.name,
				val: windowSegment.max
			}];
			if (["top", "bottom"].includes(edge)) {
				if (segment.min.y !== windowSegment.min.y) {
					continue;
				}
				points = points.sort((a, b) => {
					return a.val.x > b.val.x;
				});
			}

			if (["left", "right"].includes(edge)) {
				if (segment.min.x !== windowSegment.min.x) {
					continue;
				}
				points = points.sort((a, b) => {
					return a.val.y > b.val.y;
				});
			}
			if (points[0].name !== points[1].name) {
				shouldPush = true;
			}
			if (shouldPush) {
				let snapObj = {
					name: possibleSnapper.name,
					edge: oppEdge
				};
				windowsOnEdge.push(snapObj);
			}
		}

		return windowsOnEdge;
	}

	/**
  * Given a hole, this function recursively fills the hole, expanding 1 window at a time - until the hole is filled.
  * @param {object} hole
  * @param {*} cb
  */
	fillHole(hole, cb = Function.prototype) {
		this.fillAttempts++;

		let myHole = new DockableBox(hole);

		//First, we need to see which windows in this group border our hole.

		//Get the edges in array format, don't include corners in the calculations.
		let edges = myHole.getEdges("arr", false);
		let candidates = edges.map(edge => this.getWindowsOnSegment(edge));

		//flatten the array.
		candidates = [].concat.apply([], candidates);
		//If we have no windows bordering the hole, there's nothing we can do.
		if (!candidates.length) return;

		//We need some of the methods on the docking calculator. This isn't an ideal way to do things. Would be nice if there was some kind of bridge that could allow move requests without needing the calculator.
		//Chalk that up to a @todo
		const calculator = this.getWindow(candidates[0].name).calculator;

		//Bounding box is needed for `sharesAnEdgeWith`.
		myHole.windowBoundingBox = BoxMath.getWindowBoundingBox(myHole);

		//If the hole takes up the whole width or whole height of the group, we should scale the remaining windows to fill the hole.
		if ((myHole.width === this.width || myHole.height === this.height) && this.sharesAnEdgeWith(myHole)) {
			let bounds = {};
			//calculates the bounds of the group prior to the hole being created.
			bounds.left = Math.min(myHole.left, this.left);
			bounds.right = Math.max(myHole.right, this.right);
			bounds.top = Math.min(myHole.top, this.top);
			bounds.bottom = Math.max(myHole.bottom, this.bottom);
			bounds.height = bounds.bottom - bounds.top;
			bounds.width = bounds.right - bounds.left;
			let edge = null;

			//These are opposite. When the window leaves the group, the bounds are updated. So here, we compare the edge of the window that left to the group. If it was on the left side of the group - the right side of that window will be butted up against the left side of the group after it leaves.
			if (myHole.width === this.width) {
				if (myHole.top === this.bottom) edge = "bottom";
				if (myHole.bottom === this.top) edge = "top";
			}
			if (myHole.height === this.height) {
				if (myHole.left === this.right) edge = "right";
				if (myHole.right === this.left) edge = "left";
			}
			if (!edge) {
				return new Error("No edge found in fillHoles");
			}
			return this.scale(bounds, edge, calculator);
		}

		//Once we know that we aren't going to have to scale all of the windows, we get here.
		//The goal is to do the least amount of damage possible. So if there are 4 windows that border the hole, we will choose the one that will cascade into the fewest windows. If they all impact no other windows, we just choose the first.
		let potentialImpact = [];
		for (let i = 0; i < candidates.length; i++) {
			let candidate = candidates[i];
			let win = this.getWindow(candidate.name);
			let edge = candidate.edge;

			//These are the windows that would be affected if we resized the candidate window.
			let impactedWindows = this.getWindowsOnEdge(win, edge, false);
			candidate.impactedWindows = impactedWindows.length;
			candidate.win = win;
			potentialImpact.push(candidate);
		}

		//Goes through and gets the window whose resize would trigger a resize on the fewest windows possible.
		let leastImpactfulChange = potentialImpact.reduce(function (p, v) {
			return p.impactedWindows < v.impactedWindows ? p : v;
		});

		//Which edge we're resizing.
		let impactedEdge = leastImpactfulChange.edge;
		//Clone so we don't impact the original windows. Calculate the bounds for our window. We'll use this window if none of the other candidates are better matches.
		let newBounds = JSON.parse(JSON.stringify(leastImpactfulChange.win.getBounds()));
		newBounds[impactedEdge] = myHole[impactedEdge];
		newBounds.height = newBounds.bottom - newBounds.top;
		newBounds.width = newBounds.right - newBounds.left;

		//We'll use this later.
		let holeArea = hole.width * hole.height;
		let leastImpactfulArea = newBounds.width * newBounds.height;
		for (let i = 0; i < candidates.length; i++) {
			let candidate = candidates[i];
			let proposedBounds = JSON.parse(JSON.stringify(candidate.win.getBounds()));
			let proposedImpactedEdge = candidate.edge;
			proposedBounds[proposedImpactedEdge] = myHole[proposedImpactedEdge];
			proposedBounds.height = proposedBounds.bottom - proposedBounds.top;
			proposedBounds.width = proposedBounds.right - proposedBounds.left;
			let candidateArea = proposedBounds.height * proposedBounds.width;

			//If the candidateArea is less than the holeArea, if the candidateArea is larger than the currently chosen window, and resizing it would cause no more damage than the currently chosen window, it becomes the window to resize.
			if (candidateArea - holeArea > 0 && candidateArea > leastImpactfulArea && candidate.impactedWindows <= leastImpactfulChange.impactedWindows) {
				leastImpactfulChange = candidate;
				leastImpactfulArea = candidateArea;
				impactedEdge = proposedImpactedEdge;
				newBounds = proposedBounds;
			}
		}
		//Once we have the window that will cause the least amount of damage, we create a moveRequest to pass to docking. This will be a resize, and it will cascade onto other affected windows.
		newBounds.changeType = 1;
		newBounds.name = leastImpactfulChange.win.name;
		newBounds.resizeHandle = impactedEdge;
		newBounds.forceResizeHandle = true;
		calculator.requestMove(newBounds, () => {
			this.updateBounds();

			//If we only partially filled the hole, calculate the remaining hole, and recurse.
			if (!this.isARectangle()) {
				if (this.fillAttempts === 20) {
					let windowBounds = JSON.stringify(this.getWindowArray().map(win => win.getBounds()));
					Logger.system.warn("forceObjectsToLogger", "FillHoles failed after 20 attempts. Use first string for test case. Second string is hole", windowBounds, JSON.stringify(myHole.getBounds()));
					this.fillAttempts = 0;
					return;
				}
				let leftovers = BoxMath.clipRect(myHole, new DockableBox(newBounds), impactedEdge);
				this.fillHole(leftovers);
			} else {
				calculator.onMouseUp();
				this.fillAttempts = 0;
				return;
			}
		});
	}

}

//DockableGroup.prototype = DockableBox;
module.exports = DockableGroup;

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\services\\docking\\dockableGroup.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\services\\docking\\dockableGroup.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var BoxMath = __webpack_require__(99);
function DockableMonitor(bounds) {

	this.left = bounds.left;
	this.top = bounds.top;
	this.right = bounds.right;
	this.bottom = bounds.bottom;
	this.bufferSize = 15;
	/**
 * @function {function name}
 * @param  {type} bufferSize {description}
 * @return {type} {description}
 */
	this.setBufferSize = function (bufferSize) {
		this.bufferSize = bufferSize;
		this.bounds = this.getWindowBoundingBox();
		this.calculateSnappingRegions();
	};

	/**
 * @function {function name}
 * @return {type} {description}
 */
	this.getWindowBoundingBox = function () {
		return {
			min: {
				x: this.left,
				y: this.top
			},
			max: {
				x: this.right,
				y: this.bottom
			}
		};
	};
	/**
 * @function {function name}
 * @param  {type} bounds {description}
 * @param  {type} edge   {description}
 * @return {type} {description}
 */
	this.getSnappingRegion = function (bounds, edge) {
		let map = {
			left: {
				min: {
					x: bounds.left - this.bufferSize,
					y: bounds.top
				},
				max: {
					x: bounds.left + this.bufferSize,
					y: bounds.bottom
				}
			},
			right: {
				min: {
					x: bounds.right - this.bufferSize,
					y: bounds.top
				},
				max: {
					x: bounds.right + this.bufferSize,
					y: bounds.bottom
				}
			},
			bottom: {
				min: {
					x: bounds.left,
					y: bounds.bottom - this.bufferSize
				},
				max: {
					x: bounds.right,
					y: bounds.bottom + this.bufferSize
				}
			},
			top: {
				min: {
					x: bounds.left,
					y: bounds.top - this.bufferSize
				},
				max: {
					x: bounds.right,
					y: bounds.top + this.bufferSize
				}
			}
		};
		return map[edge];
	};
	/**
 * @function {function name}
 * @return {type} {description}
 */
	this.calculateSnappingRegions = function () {
		this.snappingRegions = {
			top: this.getSnappingRegion(bounds, "top"),
			right: this.getSnappingRegion(bounds, "right"),
			bottom: this.getSnappingRegion(bounds, "bottom"),
			left: this.getSnappingRegion(bounds, "left")
		};
	};
	/**
 * @function {function name}
 * @param  {type} region  {description}
 * @param  {type} request {description}
 * @return {type} {description}
 */
	this.canSnapToRegion = function (region, request) {
		var innerAdjustment = 0 - this.bufferSize;
		return BoxMath.intersectBoundingBoxes(this.snappingRegions[region], {
			min: {
				x: request.snappingRegions[region].min.x - innerAdjustment,
				y: request.snappingRegions[region].min.y - innerAdjustment
			},
			max: {
				x: request.snappingRegions[region].max.x + innerAdjustment,
				y: request.snappingRegions[region].max.y + innerAdjustment
			}
		});
	};
	/**
 * @function {function name}
 * @param  {type} request {description}
 * @return {type} {description}
 */
	this.canSnapToWindow = function (request) {
		for (var region in this.snappingRegions) {
			if (this.canSnapToRegion(region, request)) {
				return true;
			}
		}
		return false;
	};
	/**
 * @function {function name}
 * @param  {type} request {description}
 * @return {type} {description}
 */
	this.snapWindow = function (request) {
		var regionsToSnap = [];
		for (var region in this.snappingRegions) {
			if (this.canSnapToRegion(region, request)) {
				regionsToSnap.push(region);
			}
		}
		//let originalRequest = Object.assign({}, request);
		regionsToSnap = regionsToSnap.join("");
		if (regionsToSnap) {
			if (regionsToSnap.includes("left")) {
				//if req is to the right of the monitor's left edge.
				if (request.left >= this.snappingRegions.left.min.x) {
					request.left = this.bounds.min.x;
				}
			}
			if (regionsToSnap.includes("top")) {
				//Top edge of request must be below the top edge of the monitor..
				if (request.top >= this.snappingRegions.top.min.y) {
					request.top = this.bounds.min.y;
				}
			}

			if (regionsToSnap.includes("right")) {
				//right edge of request must be to the left of the right edge of the monitor.
				if (request.right <= this.snappingRegions.right.max.x) {
					//move
					if (request.changeType === 0) {
						request.left = this.bounds.max.x - request.width;
					} else {
						request.right = this.bounds.max.x;
					}
				}
			}

			if (regionsToSnap.includes("bottom")) {
				if (request.bottom <= this.snappingRegions.bottom.max.y) {
					if (request.changeType === 0) {
						request.top = this.bounds.max.y - request.height;
					} else {
						request.bottom = this.bounds.max.y;
					}
				}
			}

			if (request.changeType === 0) {
				request.right = request.left + request.width;
				request.bottom = request.top + request.height;
			} else {
				request.width = request.right - request.left;
				request.height = request.bottom - request.top;
			}
			return request;
		}

		return false;
	};
	this.bounds = this.getWindowBoundingBox();
	this.calculateSnappingRegions();
	this.name = bounds.name;

	return this;
}

module.exports = DockableMonitor;

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\services\\docking\\dockableMonitor.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\services\\docking\\dockableMonitor.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/* global RouterClient */

var BoxMath = __webpack_require__(99);
var DockableBox = __webpack_require__(112);
var utils = __webpack_require__(6);
var Logger = __webpack_require__(2);

//defaults for the openfin version.
/*var OF_VERSION = {
	major: 7,
	patch: 0
};*/
var OF_BUGFIX_REPLACE_WIDTH_AND_HEIGHT = false;

if (typeof fin !== "undefined") {
	//Replace with real version.
	utils.getOpenfinVersion(() => {
		//OF_VERSION = ver;
		OF_BUGFIX_REPLACE_WIDTH_AND_HEIGHT = true;
		// OF_BUGFIX_REPLACE_WIDTH_AND_HEIGHT = OF_VERSION.major === 7 &&
		// 	OF_VERSION.minor <= 21 &&
		// 	OF_VERSION.patch < 6;
		//Bug in 7.53.21.[1-5] adds a pixel to width and height on every request. They fixed in 7.53.21.6.
		Logger.system.debug("OF_BUGFIX_REPLACE_WIDTH_AND_HEIGHT", OF_BUGFIX_REPLACE_WIDTH_AND_HEIGHT);
	});
}

const BOUNDS_CHANGING = "disabled-frame-bounds-changing";
const BOUNDS_CHANGED = "disabled-frame-bounds-changed";

var warningsSent = {
	disableFrame: false,
	setOpacity: false,
	addEventListener: false,
	removeEventListener: false
};

class DockableWindow extends DockableBox {
	constructor(win, bounds, calculator) {
		super();
		/**@todo Document these vars */
		this.win = win;
		this.bufferSize = 15;
		this.canGroup = this.win.canGroup;
		this.name = this.win.name;
		this.uuid = this.win.uuid;
		this.top = bounds.top;
		this.left = bounds.left;
		this.right = bounds.right;
		this.bottom = bounds.bottom;
		this.width = bounds.width;
		this.height = bounds.height;
		this.opacity = 1;
		this.events = {};
		this.groupNames = [];
		this.snappedWindows = [];
		this.type = win.type;
		this.calculator = calculator;
		this.onBoundsChanged = this.onBoundsChanged.bind(this);
		this.onBoundsChanging = this.onBoundsChanging.bind(this);
		this.addEventListener = this.addEventListener.bind(this);
		this.removeEventListener = this.removeEventListener.bind(this);
		this.requestBoundsChange = this.requestBoundsChange.bind(this);

		this.resizeThrottlePeriod = 5;
		const startTime = Date.now();
		this.boundsChangedTimeStamp = startTime;
		this.lastBoundsAdjustment = startTime;
		this.resizeHandle = null;
		this.setBoundingBoxes();
		this.addListeners();
		//Disable the frame so that users cannot move the window. Only we move the window after we verify that their intended movement shouldn't result in a snap.
		this.disableFrame();
	}

	/**
 * @function {function name}
 * @return {type} {description}
 */
	onBoundsChanged() {
		//this represents the dockableWindow's context
		this.setOpacity(1);
		this.resizeHandle = null;
		let timestamp = Date.now();
		this.boundsChangedTimeStamp = timestamp;
		this.lastBoundsAdjustment = timestamp;
		this.monitor = this.calculator.getMonitorForWindow(this.name);
		this.calculator.onMouseUp();
	}

	/**
 * @function {function name}
 * @param  {type} request  {description}
 * @param  {type} callback {description}
 * @return {type} {description}
 */
	onBoundsChanging(request, callback) {
		this.finished = false;
		try {
			request.timestamp = Date.now();
		} catch (e) {
			return;
		}
		var self = this;
		this.win.getMousePosition(function (err, position) {
			function finishMove() {
				if (callback) {
					callback();
				}
				self.lastBoundsAdjustment = Date.now();
				self.win.addEventListener(BOUNDS_CHANGING, self.onBoundsChanging);
			}
			var invalidateRequest = false;
			var shouldThrottle = request.timestamp < self.lastBoundsAdjustment + self.resizeThrottlePeriod;
			if (shouldThrottle) {
				// Logger.system.log("THROTTLED REQUEST");
				// Logger.system.log('TIMESTAMPS:', request.timestamp, self.lastBoundsAdjustment);
			}

			if (["NativeWindow", "FinsembleNativeWindow"].includes(self.win.windowType)) {
				invalidateRequest = shouldThrottle || request.timestamp < self.boundsChangedTimeStamp;
			} else if (self.win.windowType === "OpenFinWindow") {
				invalidateRequest = shouldThrottle || request.timestamp <= self.boundsChangedTimeStamp;
			}
			if (invalidateRequest) {
				if (callback) {
					callback();
				}
				return;
			}

			if (request.left === self.left && request.right === self.right && request.bottom === self.bottom && request.top === self.top) {
				return;
			}
			self.win.removeEventListener(BOUNDS_CHANGING, self.onBoundsChanging);

			if (OF_BUGFIX_REPLACE_WIDTH_AND_HEIGHT) {
				request.width = self.width && request.changeType === 0 ? self.width : request.width;
				request.height = self.height && request.changeType === 0 ? self.height : request.height;
			}
			request.right = request.left + request.width;
			request.bottom = request.top + request.height;
			request.groupNames = self.groupNames;
			request.mousePosition = request.mousePosition || position;

			self.calculator.requestMove(request, function (bounds) {

				if (!bounds) {
					finishMove();
					return;
				}

				self.setBounds(bounds, function () {
					finishMove();
				}, function (err) {
					Logger.system.error("ERROR IN SET BOUNDS", err);
				});
			});
		});
	}

	setResizeThrottlePeriod(throttlePeriod) {
		this.resizeThrottlePeriod = throttlePeriod;
	}

	/**
  * This removes event listeners. I can't be entirely certain, but from my testing, it _appears_ that openfin isn't actually deleting these objects. if you close the window, then load the window with the same name, old listeners are still registered with your new window. So if you reload a workspace, and then try to move a window, you get weird scenarios where onBoundsChanging is called twice with different values (presumably for old eventlisteners). Removing the eventListeners on close seems to handle this.
  */
	removeEventListeners() {
		this.win.removeEventListener(BOUNDS_CHANGING, this.onBoundsChanging);
		this.win.removeEventListener(BOUNDS_CHANGED, this.onBoundsChanged);
	}

	/********************************************
  *											*
  *			Window Moving Methods			*
  *											*
  ********************************************/

	/**
  * Hides taskbar icon for openfin windows. This prevents them from being clobbered by aeroshake.
  */
	hideTaskbarIcon() {
		//Check to see if the method exists. It wouldn't on an external window wrapper.
		if (this.win.updateOptions) {
			this.win.updateOptions({ showTaskbarIcon: false });
		}
	}

	/**
  * This shows the taskbar icon for a given window.
  */
	showTaskbarIcon() {
		if (this.win.updateOptions) {
			this.win.updateOptions({ showTaskbarIcon: true });
		}
	}

	/**
 * @function {function name}
 * @param  {type} event {description}
 * @param  {type} cb    {description}
 * @return {type} {description}
 */
	addEventListener(event, cb) {
		var self = this;
		if (self.win.addEventListener) {
			self.win.addEventListener(event, cb);
			if (!this.events[event]) {
				this.events[event] = [];
			}
			this.events[event].push(cb);
		} else if (!warningsSent.addEventListener) {
			warningsSent.addEventListener = true;
			Logger.system.warn("Window wrapper does not have an addEventListener Method.");
		}
	}

	/**
 * @function {function name}
 * @param  {type} event {description}
 * @param  {type} cb    {description}
 * @return {type} {description}
 */
	removeEventListener(event, cb) {
		var self = this;
		if (self.win.removeEventListener) {
			self.win.removeEventListener(event, cb);
			this.events[event].splice(this.events[event].indexOf(cb), 1);
		} else if (!warningsSent.removeEventListener) {
			warningsSent.removeEventListener = true;
			Logger.system.warn("Window wrapper does not have an removeEventListener Method.");
		}
	}

	/**
 * @function {function name}
 * @return {type} {description}
 */
	disableFrame() {
		if (this.win.disableFrame) {
			this.win.disableFrame();
		} else if (!warningsSent.disableFrame) {
			warningsSent.disableFrame = true;
			Logger.system.warn("Window wrapper does not have a disableFrame Method");
		}
	}

	setOpacity(opacity) {
		// if (opacity === this.opacity) return;
		this.opacity = opacity;
		if (this.win.setOpacity) {
			this.win.setOpacity(opacity);
		} else if (!warningsSent.setOpacity) {
			warningsSent.setOpacity = true;
			Logger.system.warn("Window wrapper does not have a setOpacity Method");
		}
	}

	/**
  * Sets bounds for internal calculations.
  */
	setInternalBounds(bounds) {
		//Bunch of if statements was quicker than ternary operators when inside of loops.
		this.left = typeof bounds.left === "undefined" ? this.left : bounds.left;
		this.top = typeof bounds.top === "undefined" ? this.top : bounds.top;
		this.width = typeof bounds.width === "undefined" ? this.width : bounds.width;
		this.height = typeof bounds.height === "undefined" ? this.height : bounds.height;
		this.right = typeof bounds.right === "undefined" ? this.left + this.width : bounds.right;
		this.bottom = typeof bounds.bottom === "undefined" ? this.top + this.height : bounds.bottom;
		this.setBoundingBoxes();
	}

	/**
 * @function {function name}
 * @param  {type} bounds    {description}
 * @param  {type} successCB {description}
 * @param  {type} errCB     {description}
 * @return {type} {description}
 */
	setBounds(bounds, successCB, errCB) {
		this.setInternalBounds(bounds);
		this.win.setBounds(bounds, function () {
			if (successCB) {
				successCB();
			}
		}, errCB);
	}

	/**
 * @function {function name}
 * @param  {type} left {description}
 * @param  {type} top  {description}
 * @return {type} {description}
 */
	moveTo(left, top) {
		this.setBounds({
			left: left,
			top: top,
			right: left + this.width,
			bottom: top + this.height,
			width: this.width,
			height: this.height
		});
	}

	/**
 * @function {function name}
 * @return {type} {description}
 */
	getGroupNames() {
		return this.groupNames;
	}

	/**
 * @function {function name}
 * @param  {type} request  {description}
 * @param  {type} callback {description}
 * @return {type} {description}
 */
	requestBoundsChange(request, callback) {
		//for testing purposes only - TODO: this is probably broken
		var self = this;
		if (!callback) {
			callback = self.onBoundsChanged;
		}

		self.win.getMousePosition((err, position) => {
			self.onBoundsChanging({
				corners: this.getCornerObject(request),
				left: request.left,
				top: request.top,
				width: request.width,
				height: request.height,
				changeType: request.changeType,
				name: this.name,
				uuid: this.uuid,
				mousePosition: request.mousePosition || position
			}, callback);
		});
	}

	/********************************************
  *											*
  *			Helper Functions				*
  *											*
  ********************************************/

	/**
 * @function {function name}
 * @param  {type} mouse {description}
 * @return {type} {description}
 */
	getGrabbedEdge(mouse) {
		var tolerance = 15;
		var mouseBox = {
			min: {
				x: mouse.x - tolerance,
				y: mouse.y - tolerance
			},
			max: {
				x: mouse.x + tolerance,
				y: mouse.y + tolerance
			}
		};
		var edges = ["top", "bottom", "left", "right"];
		for (var i = 0; i < edges.length; i++) {
			var edge = edges[i];
			if (BoxMath.intersectBoundingBoxes(mouseBox, this.snappingRegions[edge])) {
				return edge;
			}
		}
		return false;
	}

	/**
 * @function {function name}
 * @return {type} {description}
 */
	calculateInnerBoundingBox() {
		var adjustment = this.bufferSize * 2;
		return {
			min: {
				x: this.left + adjustment,
				y: this.top + adjustment
			},
			max: {
				x: this.right - adjustment,
				y: this.bottom - adjustment
			}
		};
	}

	getInnerBoundingBox() {
		return this.innerBuffer;
	}

	/**
 * @function {function name}
 * @param  {type} bufferSize {description}
 * @return {type} {description}
 */
	setBufferSize(bufferSize) {
		this.bufferSize = bufferSize;
		this.setBoundingBoxes();
	}

	/**
 * @function {function name}
 * @return {type} {description}
 */
	setBoundingBoxes() {
		let myBounds = this.getBounds();
		this.setBuffer();
		this.innerBuffer = this.calculateInnerBoundingBox();
		this.windowBoundingBox = BoxMath.getWindowBoundingBox(myBounds);
		this.setSnappingRegions();
		this.vertices = this.getCornerObject(myBounds);
	}

	/**
 * @function {function name}
 * @return {type} {description}
 */
	setSnappingRegions() {
		this.snappingRegions = BoxMath.getSnappingRegions(this, this.bufferSize);
	}

	getSnappingRegions() {
		return this.snappingRegions;
	}

	updateState() {
		this.win.getBounds((err, bounds) => {
			this.setBounds(bounds);
		});
	}

	hide(cb = Function.prototype) {
		this.win.hide(cb);
	}

	show(cb = Function.prototype) {
		this.win.show(cb);
	}

	minimize(cb = Function.prototype) {
		this.isMinimized = true;
		this.win.minimize(cb);
	}

	restore(cb) {
		this.isMinimized = false;
		this.win.restore(cb);
	}

	alwaysOnTop(isAlwaysOnTop) {
		this.win.alwaysOnTop(isAlwaysOnTop);
	}

	bringToFront() {
		try {
			this.win.bringToFront();
		} catch (e) {
			Logger.system.error("Implement bringToFront");
		}
	}

	notifyWindowTitleBarOfGroupMembership() {
		if (typeof RouterClient !== "undefined") {
			RouterClient.transmit(this.name + ".groupMembershipChange", {
				type: "joined"
			});
		}
	}

	notifyWindowTitleBarOfGroupEjection() {
		if (typeof RouterClient !== "undefined") {
			RouterClient.transmit(this.name + ".groupMembershipChange", {
				type: "ejected"
			});
		}
	}

	addSnappedWindow(snapObj) {
		if (!this.snappedWindows) {
			this.snappedWindows = [];
		}
		var shouldAdd = true;
		for (var i = 0; i < this.snappedWindows.length; i++) {
			var snappedWin = this.snappedWindows[i];
			if (snappedWin.name === snapObj.name) {
				shouldAdd = false;
				break;
			}
		}

		if (shouldAdd) {
			this.snappedWindows.push(snapObj);
		}
	}

	removeSnappedWindow(name) {
		if (this.snappedWindows) {
			for (var i = 0; i < this.snappedWindows.length; i++) {
				var snappedWin = this.snappedWindows[i];
				if (name === snappedWin.name) {
					// Logger.system.log("Removing", name, "from", this.name);
					this.snappedWindows.splice(i, 1);
					return;
				}
			}
		}
	}

	animatePositionAndHeight(params, cb) {
		this.setInternalBounds(params);
		if (this.win.animate) {
			this.win.animate({
				transitions: {
					position: {
						top: params.top || 0,
						left: params.left || 0,
						duration: params.duration || 175
					},
					size: {
						height: params.height || 100,
						width: params.width || 100,
						duration: params.duration || 175
					}
				}, options: null
			}, cb);
		} else if (this.win.setBounds) {
			this.win.setBounds(params, cb);
		}
	}

	isGrouped() {
		return this.groups.length;
	}

	/**
  * Adds eventListenrs so that when the finWIndow moves, we can do things with that data.
  */
	addListeners() {
		this.addEventListener(BOUNDS_CHANGED, this.onBoundsChanged);
		//this.addEventListener('bounds-changed', onBoundsChangedOutside);
		this.addEventListener(BOUNDS_CHANGING, this.onBoundsChanging);
	}
}
module.exports = DockableWindow;

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\services\\docking\\dockableWindow.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\services\\docking\\dockableWindow.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {var BaseService = __webpack_require__(73);
var DockableMonitor = __webpack_require__(150);
var DockableGroup = __webpack_require__(149);
var BoxMath = __webpack_require__(99);
const queue = __webpack_require__(136);

var RouterClient = null;
if (window) {
	if (typeof window !== "undefined") {
		if (window.RouterClient) {
			//docking serviec
			RouterClient = window.RouterClient;
		}
	}
	if (typeof FSBL !== "undefined") {
		if (FSBL && FSBL.Clients.RouterClient) {
			//test runner
			RouterClient = FSBL.Clients.RouterClient;
		}
	}
}

var MINIMUM_HEIGHT, MINIMUM_WIDTH, ALLOW_GROUPS_TO_SNAP;
var clone = function (obj) {
	//This has been tested a good amount. Previous to this commit we were using a mix of deepmerge and JSON.parse(JSON.stringify()).
	//Trying lodash.deepclone made my tests take 2-3s.
	//JSON.parse everywhere made them take ~ 1s.
	//Using JSON.parse on arrays and deep merge on objects makes them take 7-900ms.
	if (Array.isArray(obj)) {
		return obj.slice();
	} else {
		try {
			return JSON.parse(JSON.stringify(obj));
		} catch (e) {
			Logger.system.error("clone error", e);
			return e;
		}
	}
};
const { CORNERS, EDGES, OPPOSITE_EDGE_MAP } = __webpack_require__(111);
var SNAPPING_OPACITY = 0.8;
var debug = false;
var restrictedAreas = [];
if (typeof window !== "undefined") {
	var Logger = __webpack_require__(2);
	Logger.start();
}

function uuidv4() {
	return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
		var r = Math.random() * 16 | 0,
		    v = c === "x" ? r : r & 0x3 | 0x8;
		return v.toString(16);
	});
}

/**
 * The pools are just the collection of windows that the DockingCalculator is concerned with
 */

var windowPool = {},
    monitorPool = {},
    groupPool = {},

//@todo, investigate why I made this a global.
snappableWindows,

//Amount of wiggle room to give when trying to figure out whether the user was clicking a corner or not. Since windows can have different resize regions, there's no guarantee that the user will click directly on the corner of a window.
cornerTolerance = 15,

//Stationary and moving window are cached onMouseDown and cleared onMouseUp.
stationaryWindow = null,
    movingWindow = null,

//Windows to ignore for grouping functions (e.g., toolbar - it can snap, but shouldn't group)
groupBlacklist = [],

//@todo, investigate why I made this global. I suspect it was a mistake, or an early pass. This is used when resizing interior windows of a group.
joinedWindowNames = [],
    joinedWindows = [],

//This allows us to defer adding windows/removing windows from a group until onMouseDown. It's modified onMouseMove. @todo, just calculate it onMouseDown, ya dummy.
groupAction = {
	name: null,
	windows: []
},
    shortCircuit = false;

function setBoundsErrorCB(err) {
	Logger.system.error(err);
}

/**
 *
 *
 * @returns
 */
class DockingCalculator extends BaseService {

	constructor(params) {
		super(params);
		//object that's created onMouseDown. Used to cache potentially expensive operations and common information needed accros functions.
		this.resizeObject = {};
		this.groupMode = {
			enabled: true
		};
		this.groupMask = null;
		//Placedholder for the moveRequest. @todo, see if this is necessary. Pretty sure I just pass the reference around everywhere.
		this.moveRequest = null;
		//@todo, see why I even made this. Probably so I could access it in the browser. Kinda dumb.
		this.windowPool = {};
		windowPool = this.windowPool;
		//See comment above.
		this.stationaryWindow = null;
		this.movingWindow = null;
		//Default bufferSize. Can be overwritten by `setBufferSize`.
		this.bufferSize = 15;
		this.resizeEventThrottlePeriod = 0;
		this.moveCount = 0;
		this.intersection = null;
		this.groupMaskQueue = queue(function (task, callback) {
			task(callback);
		});
	}

	/****************************************
  * Core Loop
  * Docking works like this:
  * A dockableWindow receives a `disabled-frame-bounds-changing` event from the window object that it wraps (e.g., an openfin window). Then the docking calculator gets to work.
  * 1. `this.requestMove`.
  * 2. `this.onMouseDown`.
  * 3. `this.onMouseMove`.
  *
  * As the user moves her mouse around, steps 1 and 3 are executed.When she releases her mouse, the dockableWindow throws a `disabled-frame-bounds-changed` event, which in turn calls `this.onMouseUp`.
  * The general idea is that the user says "Hey, I'd like to move my window 10px to the right of this window. The calculator spins through, notices that the window that the user is moving is within a snapping buffer around the other window. So it responds, "You're too close to that window, sorry, but we're snapping you.". If the movingWindow isn't within the stationaryWindow's buffer, we give the window the all clear to proceed.
  ****************************************/
	/**
 * This is the core controller of the program. It routes the window's moveRequest to the appropriate place, and it recieves the modified bounds afterwards. It communicates the modified bounds to the window via the CB.
 * @param  {moveRequest} Request from the `dockableWindow`.
 * @param  {function} cb What to do after the window's new bounds have been calculated.
 */
	requestMove(userRequest, cb) {
		console.log("REQUEST MOVE", userRequest.changeType);
		if (!userRequest) {
			Logger.system.warn("INVESTIGATE: userRequest null or undefined in requestMove.");
			cb(null);
			return;
		}

		if (this.getWindow(userRequest.name).isMaximized) {
			cb(null);
			return;
		}

		if (this.shiftKey && userRequest.changeType === 0 && userRequest.groupNames.length) {
			//Remove from group and move
			let groupNames = clone(userRequest.groupNames);
			groupNames.forEach(groupName => {
				this.removeWindowFromGroup(userRequest.name, groupName);
				this.wipeSnapRelationships(userRequest.name);
			});

			if (this.updateGroupData) {
				this.updateGroupData();
			}
			userRequest.groupName = null;
		}
		function afterMove(bounds) {
			self.onMouseMove(bounds, cb);
		}
		groupAction = {
			name: null,
			windows: []
		};
		//Added the second part of this expression because of aero-snap; if you aero-snap a window to the side or top of a monitor, then move it, it sends in a changeType of 2 - change in position in size. In any normal world, this is a resize. But the user moved the window. So that confuses docking. This check here just makes sure that the changeType doesn't change between mouseDown and mouseUp. This is the only scenario we've seen that happen.
		if (!this.moveRequest || this.moveRequest && this.moveRequest.changeType !== userRequest.changeType) {
			this.onMouseDown(userRequest);
		}

		var moveRequest = this.setMoveRequest(userRequest),
		    self = this;

		if (moveRequest.changeType === undefined) {
			moveRequest.changeType = 0;
		}

		moveRequest.groupNames = movingWindow.groupNames;
		moveRequest.movingRegion = this.resizeObject.correctedHandle;
		moveRequest.resizeHandle = moveRequest.forceResizeHandle ? moveRequest.resizeHandle : this.resizeObject.correctedHandle;

		if (this.groupMode.enabled && moveRequest.groupNames.length) {
			///Do something if in a group.
			this.handleGroup(moveRequest, afterMove);
			return;
		}
		this.checkBuffers(moveRequest, afterMove);
	}

	/**
  * Makes sure that the requested move is occuring in space that is unclaimed by toolbars or other components. This should prevent a window from resizing/moving on top of a toolbar until it passes a threshold.
  * @param {object} moveRequest moverequest.
  */
	makeSureMoveIsInUnclaimedSpace(moveRequest) {
		var unclaimedSpaceOverlaps = this.getUnclaimedSpaceOverlaps(moveRequest);
		var win = this.getWindow(moveRequest.name);
		for (var i = 0, len = unclaimedSpaceOverlaps.length; i < len; i++) {
			var overlap = unclaimedSpaceOverlaps[i];
			for (var e = 0, edgeLen = EDGES.length; e < edgeLen; e++) {
				var edge = EDGES[e];
				if (BoxMath.intersectBoundingBoxes(moveRequest.snappingRegions[edge], overlap)) {
					if (overlap.position === "top") {
						moveRequest.top = overlap.max.y;
						if (moveRequest.changeType === 0 && moveRequest.top === win.top) {
							moveRequest.bottom = moveRequest.top + win.height;
							moveRequest.height = win.height;
						} //do stuff;
					}
					if (overlap.position === "bottom") {
						moveRequest.bottom = overlap.min.y;
						if (moveRequest.changeType === 0 && moveRequest.bottom === win.bottom) {
							moveRequest.top = moveRequest.bottom - win.height;
							moveRequest.height = win.height;
						} //do stuff;
					}
					if (overlap.position === "right") {
						moveRequest.right = overlap.min.x;
						if (moveRequest.changeType === 0 && moveRequest.left === win.left) {
							moveRequest.left = moveRequest.right - win.width;
							moveRequest.width = win.width;
						}
					}
					if (overlap.position === "left") {
						moveRequest.left = overlap.max.x;
						if (moveRequest.changeType === 0 && moveRequest.right === win.right) {
							moveRequest.right = moveRequest.left + win.width;
							moveRequest.width = win.width;
						}
					}
				}
			}
		}
		if (moveRequest.changeType !== 0) {
			moveRequest.height = moveRequest.bottom - moveRequest.top;
			moveRequest.width = moveRequest.right - moveRequest.left;
		}

		return moveRequest;
	}

	/**
  * This function goes through the restricted areas, or claimedSpaces as they're called in the launcherService. If the moveRequest would cause the window to overlap with the claimed space, we return True - this is an invalid request. requestMove then just drops the request on the floor.
  */
	getUnclaimedSpaceOverlaps(moveRequest) {
		var innerBoundary = {
			min: {
				x: moveRequest.left + moveRequest.width * .25,
				y: moveRequest.top + moveRequest.height * .25
			},
			max: {
				x: moveRequest.right - moveRequest.width * .25,
				y: moveRequest.bottom - moveRequest.bottom * .25
			}
		};
		if (restrictedAreas.length) {
			var overlaps = [];
			for (var i = 0, len = restrictedAreas.length; i < len; i++) {
				var boundingBox = restrictedAreas[i];
				if (BoxMath.intersectBoundingBoxes(innerBoundary, boundingBox)) {
					return false;
				}
				if (BoxMath.intersectBoundingBoxes(BoxMath.getWindowBoundingBox(moveRequest), boundingBox)) {
					overlaps.push(boundingBox);
				}
			}
			return overlaps;
		} else {
			return false;
		}
	}

	/**
  * Windows can be part of two groups - one that can move, and one that allows shared border resizing/group resizing. When N windows are snapped together but not explicitly grouped together, they form an "immobileGroup". A movable group is one that the user has explicitly formed. This function returns the appropriate group, given a moveRequest.
  * @param {object} moveRequest moverequest.
  */
	getMovingGroup(moveRequest) {
		if (debug) {
			Logger.system.debug("forceObjectsToLogger", "getMovingGroup", moveRequest.name);
		}

		if (moveRequest.changeType !== 0) {
			return this.getImmobileGroup(moveRequest.name) || this.getMovableGroup(moveRequest.name);
		}
		return this.getMovableGroup(moveRequest.name) || this.getImmobileGroup(moveRequest.name);
	}

	/**
  * This function caches information in the resizeObject so that it doesn't need to be calculated onMouseMove.
  */
	onMouseDown(moveRequest) {
		if (debug) {
			Logger.system.debug("forceObjectsToLogger", "onMouseDown");
		}
		if (RouterClient) RouterClient.transmit("Assimilation.taskbar", { visible: false });

		if (this.moveCount === 0) {
			this.recalculateSnaps();
		}
		this.moveCount++;
		movingWindow = this.getWindow(moveRequest.name);
		this.movingWindow = movingWindow;
		if (movingWindow) {
			this.setMovingWindow(movingWindow);
		} else {
			throw new Error("Window not found");
		}

		this.movingGroup = this.getMovingGroup(moveRequest);

		if (this.groupMode.behavior === "explicit") {
			//If there's no moving group, then we're moving an individual window. if it's part of a resizableGroup, it needs to be removed from that group.
			if (moveRequest.changeType === 0 && this.movingGroup && !this.movingGroup.isMovable) {
				this.removeWindowFromGroup(moveRequest.name, this.movingGroup.name);
				this.wipeSnapRelationships(moveRequest.name);
			}
		}
		this.resizeObject = this.constructResizeObject(moveRequest);

		let windowPoolIterator = this.windowPoolIterator();
		for (let win of windowPoolIterator) {
			if (win.name !== moveRequest.name) {
				win.hideTaskbarIcon();
			}
		}

		if (this.resizeObject.scalingGroup) {
			let groupIter = this.groupWindowIterator(this.movingGroup);
			for (let win of groupIter) {
				win.hide();
			}
			this.showGroupMask({ bounds: this.movingGroup.getBounds(), opacity: 0.5 }, () => {
				this.groupMask.win.bringToFront();
			});
		}
	}

	/**
  * Transparency breaks often with group mask. So use this to show it.
  *
  * @param {any} bounds
  * @param {number} [opacity=0.5]
  * @param {any} [cb=Function.prototype]
  * @memberof DockingCalculator
  */
	showGroupMask(params, cb = Function.prototype) {
		console.log("in show group mask", this.groupMaskIsShowing);
		let bounds = params.bounds;
		let groupMaskBounds = this.groupMask.getBounds();
		if (this.groupMaskIsShowing && groupMaskBounds.top == bounds.top && groupMaskBounds.left == bounds.left && groupMaskBounds.height == bounds.height && groupMaskBounds.width == bounds.width) {
			console.log("No Bounds change for groupMask");
			return cb();
		}

		console.log("showing group mask");
		this.groupMask.setBounds(params.bounds, () => {
			this.groupMask.win.updateOptions({ opacity: params.opacity }, () => {
				this.groupMask.show(() => {
					this.groupMaskIsShowing = true;
					console.log("showing group mask callback");
					cb();
				});
			});
		});
	}

	hideGroupMask(cb = Function.prototype) {
		console.log("in hide group mask", this.groupMaskIsShowing);
		if (!this.groupMaskIsShowing) return cb();
		console.log("hiding group mask");

		this.groupMask.hide(() => {
			this.groupMaskIsShowing = false;
			console.log("hiding group mask callback");
			cb();
		});
	}

	/**
  * This function happens _after_ the calculations have been made. The request comes in, `this.requestMove` routes the request to the appropriate place, and modified bounds are passed into this function. It's a choke point for all docking-sanctioned window movement.
  */
	onMouseMove(bounds, cb) {
		this.fixWindowOpacity({
			checkForSnappability: true
		});
		if (this.resizeObject.scalingGroup) {
			this.moveGroupMask();
		}
		if (bounds.finished) {
			if (typeof bounds.top !== "undefined") {
				this.moveWindow(bounds);
			}
			cb(null);
		}
	}

	/**
 * When the user lifts her mouse, this is fired. It cleans up opacity, shows windows if we were moving a group, and cleans up global variables.
 */
	onMouseUp() {
		if (!this.movingWindow) return;
		if (this.movingWindow && this.movingWindow.isMaximized) {
			return;
		}
		if (RouterClient) RouterClient.transmit("Assimilation.taskbar", { visible: true });
		if (debug) {
			Logger.system.debug("forceObjectsToLogger", "onMouseUp", "movingAGroupOfWindows", this.movingAGroupOfWindows, "groupMode", this.groupMode, "resizeObject", this.resizeObject);
		}
		let wasARectangle = false;
		if (this.movingAGroupOfWindows) {
			//@todo refactor. correct sounds dumb.
			wasARectangle = this.movingGroup.isARectangle();
			this.resizeObject = this.correctResizeObject(movingWindow, this.resizeObject);
			var a = this.scaleGroup(this.moveRequest);a;
			var b = this.cleanupGroupResize(this.movingGroup);b;

			var windowBounds = this.getBoundsOfGroupWindows(this.movingGroup);
			windowBounds = this.cleanupSharedEdges(this.movingGroup, windowBounds);
			this.setBoundsOfGroupWindows(this.movingGroup, windowBounds);

			var groupIter = this.groupWindowIterator(this.movingGroup);
			for (let win of groupIter) {
				win.show();
			}
			this.movingAGroupOfWindows = false;
		}

		if (this.groupMode.enabled && movingWindow && movingWindow.groupNames.length) {
			//In explicit docking, movingGroup may be null. GroupMode can be enabled, but the window may only be in a resizable group.
			if (this.movingGroup) {
				this.hideGroupMask();
				let windowBounds = this.getBoundsOfGroupWindows(this.movingGroup);
				//windowBounds = this.cleanupSharedEdges(this.movingGroup, windowBounds, 0);
				windowBounds = this.cleanupGaps(this.movingGroup, windowBounds);
				this.setBoundsOfGroupWindows(this.movingGroup, windowBounds);
				this.movingGroup.updateBounds();
				if (wasARectangle && !this.movingGroup.isARectangle()) {
					debugger;
				}
			}
		}
		let windowPoolIterator = this.windowPoolIterator();
		for (let win of windowPoolIterator) {
			this.buildSnapRelationships(win);
			if (win.snappedWindows.length === 0 && win.groupNames.length) {
				this.removeWindowFromAllGroups(win);
			}
			//Band-aid to prevent aeroshake from pummeling the application.
			if (win.win.endMove) win.win.endMove(); // send the message back to the native window
			win.showTaskbarIcon();
		}

		let movedWin = {
			name: movingWindow.name,
			monitor: clone(this.movingWindow.monitor)
		};

		movingWindow = null;
		stationaryWindow = null;
		for (let windowName in windowPool) {
			var win = windowPool[windowName];
			win.resizeHandle = null;
			if (win.groupNames.length) {
				win.groupNames.forEach(groupName => {
					let group = this.getGroup(groupName);
					group.updateBounds();
				});
			}
		}

		joinedWindows = [];
		joinedWindowNames = [];

		this.movingGroup = null;
		this.movingWindow = null;
		this.resizeObject = {};
		//moveRequest is null on groupmask resizes..sometimes.
		//@todo, investigate.
		if (this.moveRequest && this.groupMode.enabled && groupAction.name) {
			// let group = this.getGroup(groupAction.name);
			// for (let windowName in groupAction.windows) {
			// 	if (groupBlacklist.includes(windowName)) {
			// 		delete groupAction.windows[windowName];
			// 	}
			// }

			// if (group || (Object.keys(groupAction.windows).length > 1)) {
			// 	for (let windowName in groupAction.windows) {
			// 		Logger.system.verbose(windowName);
			// 		this.addWindowToGroup({
			// 			groupName: groupAction.name,
			// 			win: this.getWindow(windowName)
			// 		});
			// 	}
			// }
			this.formGroup(this.moveRequest.name, { isMovable: false });
		}
		this.moveRequest = null;
		this.fixWindowOpacity({
			checkForSnappability: false
		});

		shortCircuit = false;

		//function below defined by the service. Tell it which monitor the window was on when it moved.
		if (this.onMoveComplete) {
			this.onMoveComplete(movedWin);
		}
	}

	/**
  * Updates local references of monitor information. Happens when a user removes/adds a monitor.
  */
	updateMonitorInfo(monitorUpdate) {
		restrictedAreas = [];
		//@todo, pick up zones that are off limits from terry's update.
		monitorUpdate.forEach(monitor => {
			if (monitor.availableRect.top !== monitor.unclaimedRect.top) {
				restrictedAreas.push({
					min: {
						x: monitor.unclaimedRect.left,
						y: monitor.availableRect.top
					},
					max: {
						x: monitor.unclaimedRect.right,
						y: monitor.unclaimedRect.top
					},
					position: "top"
				});
			}
			if (monitor.availableRect.left !== monitor.unclaimedRect.left) {
				restrictedAreas.push({
					min: {
						x: monitor.availableRect.left,
						y: monitor.unclaimedRect.top
					},
					max: {
						x: monitor.unclaimedRect.right,
						y: monitor.unclaimedRect.bottom
					},
					position: "left"

				});
			}

			if (monitor.availableRect.right !== monitor.unclaimedRect.right) {
				restrictedAreas.push({
					min: {
						x: monitor.unclaimedRect.right,
						y: monitor.unclaimedRect.top
					},
					max: {
						x: monitor.availableRect.right,
						y: monitor.unclaimedRect.bottom
					},
					position: "right"

				});
			}
			if (monitor.availableRect.bottom !== monitor.unclaimedRect.bottom) {
				restrictedAreas.push({
					min: {
						x: monitor.unclaimedRect.left,
						y: monitor.unclaimedRect.bottom
					},
					max: {
						x: monitor.unclaimedRect.right,
						y: monitor.availableRect.bottom
					},
					position: "bottom"

				});
			}
		});
	}

	/****************************************
  *	  Calculators - Window Collections 	*
  ****************************************/
	formGroup(name, params) {
		let { isMovable, whitelist, isAlwaysOnTop } = params;
		var self = this;
		if (!whitelist) {
			whitelist = this.getWindowNames();
		}
		let win = this.getWindow(name);
		let windows = win.snappedWindows.map(snapObj => snapObj.name).filter(name => {
			return whitelist.includes(name);
		});

		let processed = [win.name];
		function getSnappedWindows(windo) {
			processed.push(windo.name);
			let snappedWindows = windo.snappedWindows.map(snapObj => snapObj.name).filter(name => {
				return whitelist.includes(name);
			});
			windo.snappedWindows.forEach(snapObj => {
				if (!processed.includes(snapObj.name) && whitelist.includes(snapObj.name)) {
					let snapWin = self.getWindow(snapObj.name);
					let grandSnaps = getSnappedWindows(snapWin);
					snappedWindows = snappedWindows.concat(grandSnaps);
				}
			});
			return snappedWindows;
		}

		win.snappedWindows.forEach(snapObj => {
			if (whitelist.includes(snapObj.name)) {
				let snapWin = self.getWindow(snapObj.name);
				let snappedWindows = getSnappedWindows(snapWin);
				windows = windows.concat(snappedWindows);
			}
		});
		//dedupe.
		windows = windows.filter(function (el, i, arr) {
			return arr.indexOf(el) === i;
		});
		if (windows.length) {
			this.groupWindows({ windows, isMovable: isMovable, isAlwaysOnTop: isAlwaysOnTop });
		}
		return windows;
	}

	/**
 * Spins through all of the windows that can group and creates groups based on window position.
 */
	constituteGroups() {
		for (var groupName in this.getGroups()) {
			this.removeGroup(groupName);
		}
		this.eliminateGaps();
		var windowPoolIterator = this.windowPoolIterator();
		for (var win of windowPoolIterator) {
			if (groupBlacklist.includes(win.name)) {
				continue;
			}

			var groupList = this.getGroupNames();
			if (!Object.keys(groupList).length) {
				this.addWindowToGroup({
					groupName: uuidv4(),
					win: win
				});
				continue;
			}
			this.buildSnapRelationships(win);
			var snappedWindows = win.snappedWindows;
			for (var i = 0, len = snappedWindows.length; i < len; i++) {
				var snapObj = snappedWindows[i];
				var snappedWindow = this.getWindow(snapObj.name);
				if (win.groupNames.length) {
					win.groupNames.forEach(groupName => {
						this.addWindowToGroup({
							groupName: groupName,
							win: snappedWindow
						});
					});
				} else if (snappedWindow && snappedWindow.groupNames.length) {
					snappedWindow.groupNames.forEach(groupName => {
						this.addWindowToGroup({
							groupName: groupName,
							win: win
						});
					});
				} else {
					let groupParams = {
						name: uuidv4()
					};
					var newGroup = new DockableGroup(groupParams);
					this.addGroup(newGroup);
					this.addWindowToGroup({
						groupName: newGroup.name,
						win: win
					});
					this.addWindowToGroup({
						groupName: newGroup.name,
						win: snappedWindow
					});
				}
			}
		}
	}

	/**
 * Given a moveRequest, it returns an array of windowNames. The check essentially boils down to "is this window within my snapping buffer?"
 * @param  {moveRequest} moveRequest
 */
	getSnappableWindows(moveRequest) {
		var snappableWindows = [];
		var windowIter = this.windowPoolIterator();
		for (let win of windowIter) {
			//if moveRequest puts the window inside of the stationary window's buffer, snap.
			if (moveRequest.name === win.name) {
				continue;
			}
			if (win.canSnapToWindow(moveRequest)) {
				snappableWindows.push(win.name);
			}
		}

		return snappableWindows;
	}

	/**
 * Checks to see if the window is within the snapping region of any monitor.
 * @todo, make setBufferSize trickles down to monitors.
 */
	getSnappableMonitors(moveRequest) {
		var monitorNames = Object.keys(monitorPool),
		    snappableMonitors = [];
		for (var i = 0, len = monitorNames.length; i < len; i++) {
			var monitorName = monitorNames[i];
			var monitor = monitorPool[monitorName];

			if (monitor.canSnapToWindow(moveRequest)) {
				snappableMonitors.push(monitorName);
			}
		}

		return snappableMonitors;
	}

	/**
  * Returns an object that describes the edges and corners that are shared between two windows.
  */
	getSnapObj(win1, win2) {
		return {
			canGroup: !groupBlacklist.includes(win2.name),
			name: win2.name,
			edges: win1.getSharedEdges(win2),
			corners: win1.getSharedCorners(win2)
		};
	}

	/**
  * Snaps two windows..
  */
	snapTwoWindows(win1, win2) {
		if (groupBlacklist.includes(win1.name) || groupBlacklist.includes(win2.name)) {
			return;
		}
		win1.addSnappedWindow(this.getSnapObj(win1, win2));
		win2.addSnappedWindow(this.getSnapObj(win2, win1));
	}

	/**
  * Wipes all relationships between windows and recalculates them.
  */
	recalculateSnaps() {
		if (debug) {
			Logger.system.debug("forceObjectsToLogger", "RECALCULATING SNAP RELATIONSHIPS");
		}
		var windowIter = this.windowPoolIterator();
		for (let win of windowIter) {
			this.buildSnapRelationships(win);
			if (win.groupNames.length) {
				win.groupNames.forEach(groupName => {
					let group = this.getGroup(groupName);
					group.updateBounds();
				});
			}
		}
	}

	/**
 * Returns an array of `snapObject`s. Just name, shared edges, shared corners, and whether the window canGroup.
 * @param  {dockableWindow} win
 */
	buildSnapRelationships(win) {
		if (debug) {
			Logger.system.debug("forceObjectsToLogger", "ws buildSnapRelationships", win.name);
		}
		if (win.snappedWindows.length) {
			this.wipeSnapRelationships(win.name);
		}
		var snappedWindows = [];
		var windowPoolIterator = this.windowPoolIterator();

		for (var snappedWindow of windowPoolIterator) {
			if (debug) {
				Logger.system.debug("forceObjectsToLogger", "ws windowPoolIterator", snappedWindow.name);
			}
			if (snappedWindow.name === win.name) {
				continue;
			}
			if (debug) {
				Logger.system.debug("forceObjectsToLogger", "ws win.sharesAnEdgeWith(snappedWindow)", win.sharesAnEdgeWith(snappedWindow));
			}
			if (win.sharesAnEdgeWith(snappedWindow) || win.sharesACornerWith(snappedWindow)) {
				this.snapTwoWindows(win, snappedWindow);
			}
		}
		return snappedWindows;
	}

	/**
 * Returns any window with a vertex on a segment.
 * @param  {segment} segment A line segment. An array with 2 points in it (start and end).
 * @return {type}
 */
	getWindowsOnSegment(segment) {
		var windowsOnSegment = [];
		var windowPoolIterator = this.windowPoolIterator();
		var points = [segment.min, segment.max];
		for (var win of windowPoolIterator) {
			for (var p = 0, len = points.length; p < len; p++) {
				var point = points[p];
				if (win.pointIsOnBoundingBox(point)) {
					let snapObj = {
						name: win.name,
						edge: win.getEdgeByPoint(point)
					};
					snapObj.segment = win.getEdges("obj")[snapObj.edge];
					windowsOnSegment.push(snapObj);
					break;
				}
			}
		}
		return windowsOnSegment;
	}

	/**
 * Not sure why this function doesn't use the one above. Similar functionality, but you can pass in a string instead of a line segment.
 * @todo, make it use the function above.
 * @param  {dockableWindow} win
 * @param  {string} edge E.g., 'left', 'right', etc.
 * @return {array}
 */
	getWindowsOnEdge(win, edge, includeCorners) {
		if (includeCorners === undefined) {
			includeCorners = false;
		}
		var windowsOnEdge = [];
		if (!edge) {

			//@todo, what went wrong to cause this.................
			return [];
		}
		var splitEdge = edge.split(/(?=[A-Z])/).map(function (s) {
			return s.toLowerCase();
		});
		if (splitEdge.length > 1) {
			let cornerPoint = win.getPointByVertex(edge);
			var windowsAtCorner = this.getWindowsAtPoint(cornerPoint);

			for (let i = 0, len = windowsAtCorner.length; i < len; i++) {
				let possibleSnapper = this.getWindow(windowsAtCorner[i]);

				windowsOnEdge.push({
					name: possibleSnapper.name,
					edge: possibleSnapper.getVertexByPoint(cornerPoint)
				});
			}
		} else {
			var oppEdge = OPPOSITE_EDGE_MAP[edge];
			var windowPoolIterator = this.windowPoolIterator();
			var windowSegment = win.getEdges("obj", includeCorners)[edge];

			for (let possibleSnapper of windowPoolIterator) {
				if (possibleSnapper.name === win.name) {
					continue;
				}
				let segment = possibleSnapper.getEdges("obj", includeCorners)[oppEdge];
				var shouldPush = false;
				let points = [{
					name: possibleSnapper.name,
					val: segment.min
				}, {
					name: possibleSnapper.name,
					val: segment.max
				}, {
					name: win.name,
					val: windowSegment.min
				}, {
					name: win.name,
					val: windowSegment.max
				}];
				if (["top", "bottom"].includes(edge)) {
					if (segment.min.y !== windowSegment.min.y) {
						continue;
					}
					points = points.sort((a, b) => {
						return a.val.x > b.val.x;
					});
				}

				if (["left", "right"].includes(edge)) {
					if (segment.min.x !== windowSegment.min.x) {
						continue;
					}
					points = points.sort((a, b) => {
						return a.val.y > b.val.y;
					});
				}
				if (points[0].name !== points[1].name) {
					shouldPush = true;
				}
				if (shouldPush) {
					if (debug) {
						Logger.system.debug("forceObjectsToLogger", windowSegment, segment, win.name, possibleSnapper.name, edge);
					}
					let snapObj = {
						name: possibleSnapper.name,
						edge: oppEdge
					};
					windowsOnEdge.push(snapObj);
				}
			}
		}

		return windowsOnEdge;
	}

	/**
 * Returns a list of windows that straddle a given edge.
 *	+-----------+------------+
 *	|           |            |
 *	|           |            |
 *	|    A      |     B      |
 *	|           |            |
 *	+-----------+--+---------+
 *	|              |         |
 *	|    C         |   D     |
 *	|              |         |
 *	+--------------+---------+
 *
 * In the drawing above, B straddles the left edge of D and the right Edge of C.
 * @param  {dockableWindow} win
 * @param  {string} edge E.g., 'left', 'right', etc.
 */
	getStraddlers(win, edge) {
		var straddlers = [];
		var windowPoolIterator = this.windowPoolIterator();
		for (var straddler of windowPoolIterator) {

			if (straddler.name === win.name) {
				continue;
			}

			var corners = straddler.vertices;
			for (var corner in corners) {
				if (win.pointIsOnBoundingBox(corners[corner], false)) {
					straddlers.push({
						name: straddler.name,
						edge: win.getEdgeByPoint(corners[corner])
					});
				}
			}
		}
		return straddlers;
	}

	/**
 * Given an X, Y point, it returns a list of windows with that point on their boundingBox.
 * @param  {object} point
 * @return {array}
 */
	getWindowsAtPoint(point) {
		var windows = [];

		var windowPoolIterator = this.windowPoolIterator();
		for (var win of windowPoolIterator) {
			if (groupBlacklist.includes(win.name)) {
				continue;
			}
			if (win.pointIsOnBoundingBox(point)) {
				windows.push(win.name);
			}
		}
		return windows;
	}

	/**
 * Just a helper to say whether a window has an edge on the edge of the group.
 * @todo refactor to just compare win[edge] to group[edge].
 * @param  {dockableWindow} win
 * @param  {dockableGroup} group
 */
	windowIsOnExteriorEdgeOfGroup(win, group) {
		var winBounds = win.windowBoundingBox;
		var groupBounds = group.bounds;
		//left
		if (winBounds.min.x === groupBounds.min.x) {
			return true;
		}
		//bottom
		if (winBounds.max.y === groupBounds.max.y) {
			return true;
		}
		//right
		if (winBounds.max.x === groupBounds.max.x) {
			return true;
		}
		//top
		if (winBounds.min.y === groupBounds.min.y) {
			return true;
		}

		return false;
	}

	/**
  * Lets the program know that shift is being held down. This is used when moving a window that's explicitly grouped (if assimilation is turned on). In that case, the window moves out of the group.
  */
	setShift(bool) {
		this.shiftKey = bool;
	}

	/**
 * Returns an ordered Object. Sorts by Top, then Left.
 * @return {Object} Object where the keys are names of the window.
 */
	orderWindows(windowList, anchor) {
		//TODO: move this into group (see groupWindowIterator, scaleGroup, group.scale)
		//sort windows by top so that when we constitute groups it won't randomly compare windows in the bottom to ones in the top of the monitor.
		var sortableArray = [];
		if (windowList === undefined) {
			windowList = windowPool;
		}
		for (var windowName in windowList) {
			var win = this.getWindow(windowName);
			sortableArray.push(win);
		}
		sortableArray.sort(function (a, b) {
			var aTop = a.top;
			var aLeft = a.left;

			var bTop = b.top;
			var bLeft = b.left;

			if (anchor) {
				//if the window's top is above the anchor's top, compare its bottom to the anchor's top. In a 3x3 grid, this will ensure that windows in row 2 end up after windows in row 3. Looking at the grid below, if we just compared the window's top to the anchor's top, window D would appear in the array before D, even though D is closer to G. By comparing the bottoms of windows above the anchor, we force the algo to look at the left instead of the top. That all may be a crock of shit, too. I Basically, if I resize from the top-right of this group I want it to go: G, H, I, D, E, F, A, B, C. The algo below does that.
				/**
     * +-----------+--------------+-------------+
     * |           |              |             |
     * |           |              |             |
     * |    A      |      B       |     C       |
     * |           |              |             |
     * |           |              |             |
     * +-----------+              +-------------+
     * |           +--------------+             |
     * |           |              |             |
     * |    D      |      E       |      F      |
     * |           |              |             |
     * +----------------------------------------+
     * |           |              |             |
     * |           |              |             |
     * |   G       |       H      |      I      |
     * |           |              |             |
     * |           |              |             |
     * +-----------+--------------+-------------+
    		 */
				let aDelta = {
					left: Math.abs(anchor.left - a.left),
					top: a.bottom === anchor.top ? Math.abs(anchor.top - a.bottom) : Math.abs(anchor.top - a.top)
				};
				let bDelta = {
					left: Math.abs(anchor.left - b.left),
					top: b.bottom === anchor.top ? Math.abs(anchor.top - b.bottom) : Math.abs(anchor.top - b.top)
				};

				if (aDelta.left === bDelta.left) {
					return aDelta.top > bDelta.top;
				} else {
					return aDelta.left > bDelta.left;
				}
			} else {
				//orders windows ascending by their Top values.
				if (aTop === bTop) {
					return aLeft - bLeft;
				} else {
					return aTop - bTop;
				}
			}
		});

		return sortableArray;
	}

	/****************************************
  *			Getters/Setters				*
  ****************************************/
	/**
 * Registers the window with the calculator
 * @param  {string} name
 * @param  {dockableWindow} val
 */
	addWindow(name, val) {
		val.setBufferSize(this.bufferSize);
		val.setResizeThrottlePeriod(this.resizeEventThrottlePeriod);
		windowPool[name] = val;
		val.monitor = this.getMonitorForWindow(name);
		if (val.groupName) {
			let group = this.getGroup(val.groupName);
			group.addWindow(val);
		}
		this.buildSnapRelationships(val);
	}

	/**
  * Virtually unsnaps a window from all other windows. This doesn't affect physical positioning. Only the relationships that Docking is a warae of.
  */
	wipeSnapRelationships(name) {
		let win = this.getWindow(name);
		if (win && win.snappedWindows) {
			let snappedWindows = clone(win.snappedWindows);
			for (var i = 0, len = snappedWindows.length; i < len; i++) {
				var snapObj = snappedWindows[i];
				var snappedWindow = this.getWindow(snapObj.name);
				win.removeSnappedWindow(snappedWindow.name);
				if (snappedWindow) {
					snappedWindow.removeSnappedWindow(win.name);
				}
			}
		}
	}

	/**
  * Removes a window from all groups.
  */
	removeWindowFromAllGroups(win, deleteGroupsWithOneWindow = true) {
		if (!win) {
			Logger.system.warn("INVESTIGATE: No win passed to removeWindowFromAllGroups.");
			return;
		}
		let groupNames = clone(win.groupNames);
		for (var i = 0, len = groupNames.length; i < len; i++) {
			var groupName = groupNames[i];
			this.removeWindowFromGroup(win.name, groupName, deleteGroupsWithOneWindow);
		}
	}

	/**
 * Deregisters the window.
 * @param  {string} name
 */
	removeWindow(name, removeListeners = true) {

		let win = this.getWindow(name);
		if (!win) {
			Logger.system.warn("window was not found:", name);
			return;
		}
		//Removes event listeners from the window.
		if (removeListeners) {
			win.removeEventListeners();
		}
		if (!win) {
			Logger.system.warn(`INVESTIGATE: No win found for ${name} in removeWindow.`);
		}
		if (win && win.groupNames.length) {
			//If we aren't removing listeners, we're removing the window for tiling purposes (so it doesn't mess up other windows resizing). In that case, we don't want to remove groups with a single window, which is what the 2nd param here does.
			this.removeWindowFromAllGroups(win, !removeListeners);
		}

		this.wipeSnapRelationships(win.name);
		delete windowPool[name];
	}

	/**
  * Returns an array of window names.
  */
	getWindowNames() {
		return Object.keys(windowPool);
	}

	/**
 * @return {windowPool}
 */
	getWindows() {
		return windowPool;
	}

	/**
  * Gets a window object by name.
 * @param  {type} name
 * @param  {type} throwError Usually we want to throw the error, but sometimes we use this function to filter (e.g., autoarrange).
 * @return {type}
 */
	getWindow(name, throwError) {
		let win = windowPool[name];
		if (!win && (typeof throwError === "undefined" || throwError)) {
			Logger.system.error(`INVESTIGATE: No win found for ${name}.`);
		}
		return win;
	}

	/**
  * Given a list of monitors, returns the one that overlaps the most with the window.
  * @param {string} windowName
  * @param {array} monitors
  */
	getMonitorByMajority(windowName, monitors) {
		let overlaps = [];
		let win = this.getWindow(windowName);
		let boundingBox = win.getBounds();
		monitors.forEach(monitor => {
			overlaps.push({
				monitor: monitor,
				overlap: BoxMath.getOverlap(boundingBox, monitor)
			});
		});
		//Gets the monitor with the greatest overlap. The reduce function pulls the proper object with the greats overlap value. We return the monitor property of that object.
		return overlaps.reduce((prev, current) => prev.overlap > current.overlap ? prev : current).monitor;
	}

	/**
  * returns the monitor that the window is on. If the left edge of the window is on two or more monitors, we calculate the monitor that houses the majority of the window.
  * @param {string} windowName
  */
	getMonitorForWindow(windowName) {
		let win = this.getWindow(windowName);
		let monitors = [];
		for (let monitorName in monitorPool) {
			let monitor = monitorPool[monitorName];
			if (win.left >= monitor.left && win.left <= monitor.right && win.top <= monitor.bottom && win.top >= monitor.top) {
				monitors.push(monitor);
			}
		}
		if (monitors.length === 1) {
			return monitors[0];
		} else if (monitors.length > 1) {
			return this.getMonitorByMajority(windowName, monitors);
		}
		console.error("No monitor found for window", windowName);
		return null;
	}
	/**
  * Returns a monitor object.
  * @param {string} name name of monitor.
  */
	getMonitor(name) {
		return monitorPool[name];
	}
	/**
  * Registers a monitor with the calculator.
 * @param  {type} bounds
 */
	addMonitor(bounds) {
		var monitor = new DockableMonitor(bounds);
		monitor.setBufferSize(this.bufferSize);
		monitorPool[bounds.name] = monitor;
	}
	/**
 * Deregisters a monitor with the calculator.
 * @param  {type} name
 * @return {type}
 */
	removeMonitor(name) {
		if (monitorPool[name]) {
			delete monitorPool[name];
		}
	}

	/**
 * @return {monitorPool}
 */
	getMonitors() {
		return monitorPool;
	}

	/**
  *
  */
	removeAllMonitors() {
		if (Object.keys(monitorPool).length === 0) {
			return;
		}
		for (var monitorName in monitorPool) {
			this.removeMonitor(monitorName);
		}
	}

	/**
  * Sets the resize throttle period. This allows the system to drop events that occur too quickly.
  */
	setResizeThrottlePeriod(throttlePeriod) {
		this.resizeEventThrottlePeriod = throttlePeriod;
		let windowIter = this.windowPoolIterator();
		for (let win of windowIter) {
			win.setResizeThrottlePeriod(throttlePeriod);
		}
	}

	/**
  * Sets the opacity that windows take when entering another window's snapping region.
  */
	setSnappingOpacity(opacity) {
		SNAPPING_OPACITY = opacity;
	}

	/**
  * At one point we weren't sure if we were going to allow groups to snap because of bugs. This is vestigal and should be removed at some point.
  */
	setAllowGroupsToSnap(bool) {
		ALLOW_GROUPS_TO_SNAP = bool;
	}

	/**
  * whether to push debug to the logger.
  * @param {boolean} bool
  */
	setDebug(bool) {
		debug = bool;
	}

	/**
  * Sets the size of the region around windows that will trigger a snap.
  */
	setBufferSize(buffer) {
		this.bufferSize = buffer;
		var windowPoolIterator = this.windowPoolIterator();
		for (var win of windowPoolIterator) {
			win.setBufferSize(buffer);
		}
		for (var monitorName in monitorPool) {
			let monitor = this.getMonitor(monitorName);
			monitor.setBufferSize(buffer);
		}
	}

	/**
  * Will prevent a window from being added to groups.
  */
	addToGroupBlacklist(windowName) {
		groupBlacklist.push(windowName);
	}

	/**
  * Will allow a window previously blacklisted to be included in group operations.
  */
	removeFromGroupBlacklist(windowName) {
		if (groupBlacklist.includes(windowName)) {
			groupBlacklist.splice(groupBlacklist.indexOf(windowName), 1);
		}
	}

	/**
  * Adds a group to the calculator.
 * @param  {type} group
 */
	addGroup(group) {
		groupPool[group.name] = group;
	}
	/**
 * Removes a group from the calculator.
 * @param  {type} groupName
 */
	removeGroup(groupName) {
		let group = this.getGroup(groupName);
		let groupIter = this.groupWindowIterator(group);

		if (group.getWindowNames().length) {
			for (var win of groupIter) {
				if (debug) {
					Logger.system.debug("forceObjectsToLogger", "removing group", win.name);
				}
				this.removeWindowFromGroup(win.name, groupName);
			}
		}
		delete groupPool[groupName];
	}

	/**
  * Returns a list of groups that are capable of moving together.
  */
	getMovableGroups() {
		let groupNames = this.getGroupNames();
		let groups = {};

		for (let i = 0, len = groupNames.length; i < len; i++) {
			let groupName = groupNames[i];
			let group = this.getGroup(groupName);
			if (group.isMovable) {
				groups[groupName] = group;
			}
		}
		return groups;
	}

	/**
 * Returns the group Pool
 * @return {type}
 */
	getGroups() {
		return groupPool;
	}

	/**
 * Gets a group by name.
 * @param  {type} name
 * @return {type}
 */
	getGroup(name) {
		return groupPool[name];
	}

	/**
 * Gets an array of group names.
 * @return {type}
 */
	getGroupNames() {
		var names = [];
		for (var name in groupPool) {
			names.push(name);
		}
		return names;
	}

	/**
  * Imagine 3 windows snapped horizontally. All are grouped ([A][B][C]). You ungroup B. This function will remove A and C. It iterates through all of the windows in the group and makes sure it's still attached to the group.
  */
	checkGroupMemebership(win) {
		if (!win) {
			Logger.system.warn("INVESTIGATE: No win passed in to checkGroupMembership.");
			return;
		}

		let groupNames = clone(win.groupNames);
		let snappedWindowGroupNames = win.snappedWindows.map(snapObj => {
			let snapWin = this.getWindow(snapObj.name);
			if (snapWin) {
				return snapWin.groupNames;
			} else {
				Logger.system.warn(`INVESTIGATE: SnapWin does not exist. ${JSON.stringify(snapObj)}.`);
				return [];
			}
		});
		groupNames.forEach(groupName => {
			let hasSnappedWindowAttachedToGroup = snappedWindowGroupNames.some(arr => {
				return arr.includes(groupName);
			});
			if (!hasSnappedWindowAttachedToGroup) {
				this.removeWindowFromGroup(win.name, groupName);
			}
		});
	}

	/**
  * Removes a window from a group. When tiling, we do not delete groups with only one window. We could be doing an operation on a group with two windows, and we want to retain group membership so that hole-filling works appropriately.
  */
	removeWindowFromGroup(windowName, groupName, deleteGroupsWithOneWindow = true) {
		if (debug) {
			Logger.system.debug("forceObjectsToLogger", "removing window from group", windowName, groupName);
		}
		let win = this.getWindow(windowName);
		if (!win || !groupName || !win.groupNames.includes(groupName)) {
			return;
		}
		win.groupNames.splice(win.groupNames.indexOf(groupName), 1);
		let group = this.getGroup(groupName);
		if (!group) {
			return;
		}

		group.removeWindow(win.name);
		if (deleteGroupsWithOneWindow && group.getWindowNames().length === 1) {
			this.removeWindowFromGroup(group.getWindowNames()[0], group.name);
			this.removeGroup(group.name);
		}
	}

	/**
  * Groups n-Windows.
  *
  * @param {any} params
  * @param {any} cb
  */
	groupWindows(params, cb) {
		var groupName = params.groupName || uuidv4();
		for (var i = 0, len = params.windows.length; i < len; i++) {
			var windowName = params.windows[i];
			let win = this.getWindow(windowName);
			this.addWindowToGroup({
				win: win,
				groupName: groupName,
				isMovable: typeof params.isMovable !== "undefined" ? params.isMovable : false
			});
		}
		if (cb) {
			cb(null);
		}
	}

	/**
 * @param  {type} groupName
 * @param  {dockableWindow} win
 */
	addWindowToGroup(params, cb) {
		let { groupName, win } = params;
		if (!win) {
			Logger.system.warn("INVESTIGATE: No win passed in to addWindowToGroup.");
			return;
		}
		//in the explicit paradigm, groups default to not being immobile, but resizable.
		let isMovable = typeof params.isMovable !== "undefined" ? params.isMovable : false;
		let isAlwaysOnTop = typeof params.isAlwaysOnTop !== "undefined" ? params.isAlwaysOnTop : false;

		if (debug) {
			Logger.system.debug("forceObjectsToLogger", "add to group", win.name, isMovable, groupName);
		}
		if (groupBlacklist.includes(win.name)) {
			return;
		}
		if (win.groupNames.includes(groupName)) {
			return;
		}

		let groupParams = {
			name: groupName,
			isMovable: isMovable,
			isAlwaysOnTop: isAlwaysOnTop
		};

		var group = this.getGroup(groupName);

		if (!group) {
			if (!groupName) {
				groupName = uuidv4();
			}
			groupParams.name = groupName;
			group = new DockableGroup(groupParams);
			this.addGroup(group);
		}
		//You can only be in two groups at a time. a movable one, and a resizable one.
		if (group.isMovable) {
			let movableGroup = this.getMovableGroup(win.name);
			if (movableGroup) {
				this.removeWindowFromGroup(win.name, movableGroup.name);
			}
		} else {
			let immobileGroup = this.getImmobileGroup(win.name);
			if (immobileGroup) {
				this.removeWindowFromGroup(win.name, immobileGroup.name);
			}
		}

		win.groupNames.push(groupName);
		group.addWindow(win);
		if (group.isMovable) {
			group.bringToFront();
		}
		if (cb) {
			cb(group);
		}
		return group;
	}

	/**
  * Vestigal function; used to pop a window out of a group. Can likely be removed in the future.
  */
	ejectWindow(name) {
		var win = this.getWindow(name);
		var newBounds = win;
		newBounds.left += 40;
		newBounds.top -= 40;
		newBounds.name = win.name;
		this.moveWindow(newBounds);
	}

	/**
 * @return {boolean}
 */
	getGroupMode() {
		return this.groupMode;
	}

	/**
 * @param  {boolean} bool
 */
	setGroupMode(groupMode) {
		let bool = groupMode.enabled;
		if (!bool) {
			shortCircuit = false;
			this.getGroupNames().forEach(groupName => {
				this.removeGroup(groupName);
			});
		} else if (bool) {
			this.constituteGroups();
			this.groupTileBuffer = groupMode.groupTileBuffer;
			this.headerHeight = groupMode.headerHeight;
		}
		this.groupMode = groupMode;
	}

	/**
 * Adds useful properties to a raw request.
 * @param  {moveRequest} req
 * @return {moveRequest}
 */
	setMoveRequest(req, win) {

		req.windowBoundingBox = BoxMath.getWindowBoundingBox(req);
		req.innerBuffer = this.getInnerBoundingBox(req);
		req.snappingRegions = BoxMath.getSnappingRegions(req, this.bufferSize);
		req = this.makeSureMoveIsInUnclaimedSpace(req);

		this.moveRequest = req;
		return req;
	}

	/**
 * @param  {dockableWindow} win
 */
	setStationaryWindow(win) {
		stationaryWindow = win;
	}

	/**
 * @param  {dockableWindow} win
 */
	setMovingWindow(win) {
		movingWindow = win;
	}

	/**
 * Convenience function I used for like 2 minutes.
 * @todo, remove this funciton.
 * @param  {dockableWindow} stationary
 * @param  {dockableWindow} moving
 */
	setWindows(stationary, moving) {
		stationaryWindow = stationary;
		movingWindow = moving;
	}

	/****************************************************
  *													*
  *		Calculators - Multiple Positions/Sizes		*
  *													*
  ****************************************************/

	/**
  * when a non-docking movement is made, we don't grab the bounds changing events.
  * So this updates everything. Example: auto-arrange.
  */
	updateWindowPositions() {
		var windowPoolIterator = this.windowPoolIterator();
		for (var win of windowPoolIterator) {
			win.updateState();
		}
	}

	/**
  * Returns the movableGroup for a window.
  */
	getMovableGroup(windowName) {
		let win = this.getWindow(windowName);
		if (!win) {
			Logger.system.warn("INVESTIGATE: getMovableGroup failure. No win found for ${windowName}");
			return null;
		}
		if (debug) {
			Logger.system.debug("forceObjectsToLogger", "Getting movable group", windowName, win.groupNames);
		}
		for (var i = 0, len = win.groupNames.length; i < len; i++) {
			var groupName = win.groupNames[i];
			let group = this.getGroup(groupName);
			if (group.isMovable) {
				if (debug) {
					Logger.system.debug("forceObjectsToLogger", "Found movableGroup", groupName);
				}
				return group;
			}
		}
		return null;
	}

	/**
  * Returns the immobile group for a window. This is one where it is snapped to other windows, but not explicitly grouped by the user.
  */
	getImmobileGroup(windowName) {
		if (debug) {
			Logger.system.debug("forceObjectsToLogger", "Getting immobileGroup", windowName);
		}
		let win = this.getWindow(windowName);
		if (!win) {
			Logger.system.warn("INVESTIGATE: getImmobileGroup failure. No win found for ${windowName}");
			return null;
		}
		for (var i = 0, len = win.groupNames.length; i < len; i++) {
			var groupName = win.groupNames[i];
			let group = this.getGroup(groupName);
			if (group.isMovable) {
				continue;
			}
			return group;
		}
		return null;
	}

	/**
 * Basically just code flow controller. Figures out whether the move will affect just a couple, a single window, or all windows in the group.
 * @param  {moveRequest} moveRequest
 * @param  {function} cb
 */
	handleGroup(moveRequest, cb) {
		this.setMoveRequest(moveRequest);
		moveRequest = this.moveRequest;
		if (this.movingGroup.isMovable && moveRequest.changeType === 0) {
			this.handleGroupMove(moveRequest, cb); //Move a group
		} else {
			if (this.resizeObject.scalingGroup) {
				this.movingAGroupOfWindows = true;
			} else {
				this.resizeInteriorWindow(moveRequest);
			}
			cb({ finished: true });
		}
	}

	/**
  * I wrote this to kill any gap that may have happened after scaling a group proportionately. It seems to work.
  * @todo, make sure this is necessary. Consider a better way to do it.
  */
	eliminateGaps() {
		var self = this;
		var dimensionsToChange = {
			left: "width",
			right: "width",
			bottom: "height",
			top: "height"
		};
		var windowPoolIterator = this.windowPoolIterator();
		for (var win of windowPoolIterator) {
			var snappableWindows = this.getSnappableWindows(win);
			var bounds = win.getBounds();
			snappableWindows.forEach(windowName => {
				var snappedWin = self.getWindow(windowName);
				var sharedEdges = win.getSharedEdges(snappedWin, self.bufferSize);
				for (var edge in sharedEdges) {
					var oppEdge = OPPOSITE_EDGE_MAP[edge];
					if (sharedEdges[edge] && win[edge] !== snappedWin[oppEdge]) {
						bounds[edge] = snappedWin[oppEdge];
						if (edge === "left") {
							bounds.right = bounds.left + bounds.width;
						}

						if (edge === "right") {
							bounds.left = bounds.right - bounds.width;
						}

						if (edge === "top") {
							bounds.bottom = bounds.top + bounds.height;
						}
						if (edge === "bottom") {
							bounds.top = bounds.bottom - bounds.height;
						}
					}
				}
				bounds.name = win.name;
				self.moveWindow(bounds);
			});
		}
	}

	/****************************************************
  *													*
  *	Calculators - Individual Window Position/Size	*
  *													*
  ****************************************************/
	/**
 * Returns a modified moveRequest. If the code gets here, its' because the moving window was inside of the stationary window's buffer, and a snap needed to occur.
 * @param  {moveRequest} request
 * @return {moveRequest}
 */
	snapWindow(request) {
		var intersection = null;
		//order matters here. corners should take precedence, as they'll also handle the vanilla bottom/top/left/right order. The algo stops with the first intersection.
		var regions = ["bottomLeft", "bottomRight", "topLeft", "topRight", "leftTop", "leftBottom", "rightTop", "rightBottom", "top", "left", "right", "bottom"];

		var stationaryBoundingBoxes = stationaryWindow.snappingRegions;
		var movingBoundingBoxes = request.snappingRegions;
		var intersectionFound = false;
		for (var i = 0, len = regions.length; i < len; i++) {
			var region = regions[i];
			if (intersectionFound && request.changeType === 1) {
				break;
			}
			intersection = null;
			//Two checks:
			//1) Is it inside of the stationary window? If so, exit.
			//2) Is it within one of the region bounding boxes.

			if (BoxMath.intersectBoundingBoxes(stationaryBoundingBoxes[region], request.windowBoundingBox)) {
				if (request.changeType === 0) {
					request.movingRegion = this.getIntersections(request, stationaryWindow, region)[0];
				}
				var movingRegion = request.movingRegion;

				if (movingRegion && BoxMath.intersectBoundingBoxes(stationaryBoundingBoxes[region], movingBoundingBoxes[movingRegion])) {
					intersection = {
						stationaryRegion: region,
						movingRegion: movingRegion
					};
					intersectionFound = true;
				}
			}
			if (intersection) {
				this.intersection = intersection;
				request = this.getNewCoordinates({
					eventType: request.changeType === 0 ? "move" : "resize",
					intersection: intersection,
					stationaryWindow: stationaryWindow,
					request: request
				});
				// this.snapTwoWindows(movingWindow, stationaryWindow);
				movingWindow.removedBoundsChanging = true;

				//if moving window isn't in a group, see if stationary window is. if so, add moving to the stationary group. if not, create a new group with them.
				//GroupAction is just a placeholder. We only modify groups on mouseDown defers this
				let sharedEdges = stationaryWindow.getSharedEdges(request);
				let sharedEdgesArr = Object.keys(sharedEdges).map(edge => {
					return { edge: sharedEdges[edge] };
				});
				if (!sharedEdgesArr.some(obj => obj.edge)) {
					let sharedCorners = stationaryWindow.getSharedCorners(request);
					let sharedCornersArr = Object.keys(sharedCorners).map(corner => {
						return { corner: sharedCorners[corner] };
					});
					if (!sharedCornersArr.some(obj => obj.corner)) {
						return request;
					}
				}

				if (!groupBlacklist.includes(stationaryWindow.name)) {
					groupAction = this.getDeferredGroupAction(stationaryWindow, movingWindow);
				}
			} else {
				this.intersection = {
					stationaryRegion: null,
					movingRegion: null
				};
			}
		}

		this.requestMade = request;
		return request;
	}

	/**
  * When moving a window, we don't want to add it to a group until all the calculations are complete. If two windows snap, this function is called. It figures out which group that the windows should form. Note: It always forms an immobile group (one that allows shared-border resizing). This is because a snap is not an explicit group.
  */
	getDeferredGroupAction(stationaryWin, movingWin) {
		let action = groupAction;
		let stationaryGroup = this.getImmobileGroup(stationaryWin.name);
		let movingWindowGroup = this.getImmobileGroup(movingWin.name);
		if (stationaryGroup && !movingWindowGroup) {
			action.name = stationaryGroup.name;
			action.windows[movingWin.name] = true;
		} else if (movingWindowGroup && !stationaryGroup) {
			action.name = movingWindowGroup.name;
			action.windows[stationaryWin.name] = true;
		} else if (!movingWindowGroup && !stationaryGroup) {
			action.name = uuidv4();
			action.windows[stationaryWin.name] = true;
			action.windows[movingWin.name] = true;
		} else {
			action.name = stationaryGroup.name;
			action.windows[stationaryWin.name] = true;
			action.windows[movingWin.name] = true;
		}
		return action;
	}

	/**
 * Calculates resize bounds.
 * @param  {object} params
 * @return {moveRequest}
 */
	adjustSize(params) {
		var request = params.request,
		    stationaryWindow = params.stationaryWindow,
		    stationaryRegion = params.intersection.stationaryRegion;
		var intersections = this.getIntersections(request, stationaryWindow, stationaryRegion).toString().toLowerCase();
		if (!intersections) {
			return request;
		}

		switch (stationaryRegion) {
			case "leftBottom":
			case "bottomLeft":
				if (intersections.includes("top") || intersections.includes("topleft") || intersections.includes("topright")) {
					request.top = stationaryWindow.bottom;
				}
				if (intersections.includes("topright") || intersections.includes("right")) {
					request.right = stationaryWindow.left;
				}
				if (intersections.includes("topleft") || intersections.includes("left")) {
					request.left = stationaryWindow.left;
				}
				if (intersections.includes("bottom")) {
					request.bottom = stationaryWindow.bottom;
				}
				break;
			case "rightBottom":
			case "bottomRight":
				if (intersections.includes("top") || intersections.includes("topleft") || intersections.includes("topright")) {
					request.top = stationaryWindow.bottom;
				}
				if (intersections.includes("topleft") || intersections.includes("left")) {
					request.left = stationaryWindow.right;
				}

				if (intersections.includes("topright") || intersections.includes("right")) {
					request.right = stationaryWindow.right;
				}
				if (intersections.includes("bottom")) {
					request.bottom = stationaryWindow.bottom;
				}

				break;
			case "topLeft":
			case "leftTop":
				if (intersections.includes("bottom") || intersections.includes("bottomleft") || intersections.includes("bottomright")) {
					request.bottom = stationaryWindow.top;
				}
				if (intersections.includes("bottomleft") || intersections.includes("left")) {
					request.bottom = stationaryWindow.top;
					request.left = stationaryWindow.left;
				}
				if (intersections.includes("bottomright") || intersections.includes("right")) {
					request.right = stationaryWindow.left;
				}
				if (intersections.includes("top")) {
					request.top = stationaryWindow.top;
				}

				break;
			case "rightTop":
			case "topRight":
				if (intersections.includes("bottom") || intersections.includes("bottomleft") || intersections.includes("bottomright")) {
					request.bottom = stationaryWindow.top;
				}
				if (intersections.includes("bottomleft") || intersections.includes("left")) {
					request.left = stationaryWindow.right;
				}
				if (intersections.includes("bottomright") || intersections.includes("right")) {
					request.right = stationaryWindow.right;
				}
				if (intersections.includes("top")) {
					request.top = stationaryWindow.top;
				}
				break;
			case "top":
				if (intersections.includes("bottom")) {
					request.bottom = stationaryWindow.top;
				}
				break;
			case "right":
				if (intersections.includes("left")) {
					request.left = stationaryWindow.right;
				}
				break;
			case "bottom":
				if (intersections.includes("top")) {
					request.top = stationaryWindow.bottom;
				}
				break;
			case "left":
				if (intersections.includes("right")) {
					request.right = stationaryWindow.left;
				}
				break;
		}

		request.width = request.right - request.left;
		request.height = request.bottom - request.top;

		request = this.checkShortCircuits(request);
		return request;
	}

	/**
  * Checks to see if a window has gotten too narrow, or too short.
  */
	checkShortCircuitsWithEdge(request, edge) {
		switch (edge) {
			case "top":
				if (request.height <= MINIMUM_HEIGHT) {
					request.height = MINIMUM_HEIGHT;
					request.bottom = request.top + MINIMUM_HEIGHT;
				}
				break;
			case "bottom":
				if (request.height <= MINIMUM_HEIGHT) {
					request.height = MINIMUM_HEIGHT;
					request.top = request.bottom - MINIMUM_HEIGHT;
				}
				break;
			case "left":
				if (request.width < MINIMUM_WIDTH) {
					request.width = MINIMUM_WIDTH;
					request.right = request.left + MINIMUM_WIDTH;
				}
				break;
			case "right":
				if (request.width < MINIMUM_WIDTH) {
					request.width = MINIMUM_WIDTH;
					request.left = request.right - MINIMUM_WIDTH;
				}
				break;
		}
		return request;
	}

	/**
  * Checks to see if a request is allowed. Are you trying to make my window -20px? or 10px? Get out of here.
  */
	checkShortCircuits(request, win) {
		var currentBounds;
		if (typeof win === "undefined") {
			win = this.getWindow(request.name);
		}
		if (request.name) {
			currentBounds = win.getBounds();
		} else {
			currentBounds = request;
		}

		//handles shortCircuits for the moving window.
		if (request.width <= MINIMUM_WIDTH) {
			request.width = MINIMUM_WIDTH;
			request.left = currentBounds.left;
			request.right = request.left + MINIMUM_WIDTH;
		}
		if (request.height <= MINIMUM_HEIGHT) {
			request.height = MINIMUM_HEIGHT;
			request.top = currentBounds.top;
			request.bottom = request.top + MINIMUM_HEIGHT;
		}
		return request;
	}

	/**
 * Use when a window is moving and needs to be snapped. Width/Height aren't modified like in `this.adjustSize`.
 * @param  {type} params
 * @return {type}
 */
	getNewCoordinates(params) {
		var request = params.request,
		    stationaryWindow = params.stationaryWindow,
		    movingRegion = params.intersection.movingRegion,
		    stationaryRegion = params.intersection.stationaryRegion;

		if (params.eventType === "resize") {
			return this.adjustSize(params);
		}

		switch (stationaryRegion) {
			case "bottomLeft":
				if (movingRegion.toLowerCase().includes("top")) {
					request.top = stationaryWindow.bottom;
				}
				if (movingRegion.toLowerCase().includes("right")) {
					request.left = stationaryWindow.left - request.width;
				}
				if (movingRegion.toLowerCase().includes("left")) {
					request.left = stationaryWindow.left;
				}
				if (movingRegion.toLowerCase().includes("bottom")) {
					request.top = stationaryWindow.bottom - request.height;
				}
				break;
			case "bottomRight":
				if (movingRegion.toLowerCase().includes("top")) {
					request.top = stationaryWindow.bottom;
				}
				if (movingRegion.toLowerCase().includes("left")) {
					request.left = stationaryWindow.right;
				}
				if (movingRegion.toLowerCase().includes("right")) {
					request.left = stationaryWindow.right - request.width;
				}
				if (movingRegion.toLowerCase().includes("bottom")) {
					request.top = stationaryWindow.bottom - request.height;
				}
				break;
			case "topLeft":
				if (movingRegion.toLowerCase().includes("bottom")) {
					request.top = stationaryWindow.top - request.height;
				}
				if (movingRegion.toLowerCase().includes("left")) {
					request.left = stationaryWindow.left;
				}

				if (movingRegion.toLowerCase().includes("right")) {
					request.left = stationaryWindow.left - request.width;
				}
				if (movingRegion.toLowerCase().includes("top")) {
					request.top = stationaryWindow.top;
				}
				break;
			case "topRight":
				if (movingRegion.toLowerCase().includes("bottom")) {
					request.top = stationaryWindow.top - request.height;
				}
				if (movingRegion.toLowerCase().includes("left")) {
					request.left = stationaryWindow.right;
				}
				if (movingRegion.toLowerCase().includes("right")) {
					request.left = stationaryWindow.right - request.width;
				}
				if (movingRegion.toLowerCase().includes("top")) {
					request.top = stationaryWindow.top;
				}
				break;
			case "leftTop":
				if (movingRegion.toLowerCase().includes("right")) {
					request.left = stationaryWindow.left - request.width;
				}
				if (movingRegion.toLowerCase().includes("top")) {
					request.top = stationaryWindow.top;
				}
				if (movingRegion.toLowerCase().includes("bottom")) {
					request.top = stationaryWindow.top - request.height;
				}
				break;
			case "leftBottom":
				if (movingRegion.toLowerCase().includes("right")) {
					request.left = stationaryWindow.left - request.width;
				}
				if (movingRegion.toLowerCase().includes("bottom")) {
					request.top = stationaryWindow.bottom - request.height;
				}
				if (movingRegion.toLowerCase().includes("top")) {
					request.top = stationaryWindow.bottom;
				}
				break;
			case "rightTop":
				if (movingRegion.toLowerCase().includes("left")) {
					request.left = stationaryWindow.right;
				}
				if (movingRegion.toLowerCase().includes("top")) {
					request.top = stationaryWindow.top;
				}
				if (movingRegion.toLowerCase().includes("bottom")) {
					request.top = stationaryWindow.top - request.height;
				}
				break;
			case "rightBottom":
				if (movingRegion.toLowerCase().includes("left")) {
					request.left = stationaryWindow.right;
				}
				if (movingRegion.toLowerCase().includes("bottom")) {
					request.top = stationaryWindow.bottom - request.height;
				}
				if (movingRegion.toLowerCase().includes("top")) {
					request.top = stationaryWindow.bottom;
				}
				break;
			case "top":
				if (movingRegion.toLowerCase().includes("bottom")) {
					request.top = stationaryWindow.top - request.height;
				}
				break;
			case "right":
				if (movingRegion.toLowerCase().includes("left")) {
					request.left = stationaryWindow.right;
				}
				break;
			case "bottom":
				if (movingRegion.toLowerCase().includes("top")) {
					request.top = stationaryWindow.bottom;
				}
				break;
			case "left":
				if (movingRegion.toLowerCase().includes("right")) {
					request.left = stationaryWindow.left - request.width;
				}
				break;
		}
		request.right = request.left + request.width;
		request.bottom = request.top + request.height;
		return request;
	}

	/**
 * Helper function for figuring out why snapping isn't working.
 * @todo, consider deleting.
 * @return {type}
 */
	getDiagnostics() {
		return {
			requestMade: this.moveRequest,
			stationaryWindow: stationaryWindow,
			movingWindow: movingWindow,
			stationaryBoundingBoxes: stationaryWindow.snappingRegions,
			movingBoundingBoxes: this.moveRequest.snappingRegions,
			intersection: this.intersection
		};
	}

	/**
  * Helper to return an object that says which edges are moving.
  * @todo, why not just use splitHandle and a regex? This seems unnecessary.
 * @function this.getMovingEdgesFromResizeHandle
 * @param  {type} handle
 * @return {type}
 */
	getMovingEdgesFromResizeHandle(handle) {
		var edges = {
			top: false,
			right: false,
			left: false,
			bottom: false
		};
		if (!handle) {
			return edges;
		}
		handle = handle.toLowerCase();
		for (var edge in edges) {
			if (handle.includes(edge)) {
				edges[edge] = true;
			}
		}
		return edges;
	}

	/**
  * NOT CALLED RIGHT NOW.
  * Will basically be like `this.onMouseUp`, but for groups...once I can get that stuff working.
  */
	onGroupMaskMoved(cb) {

		var initialWindowBounds = movingWindow.initialBounds || movingWindow.getBounds();
		var groupName = this.movingGroup.name;
		var boundsDelta = this.getBoundsDelta(movingWindow, initialWindowBounds);
		if (debug) {
			Logger.system.debug("forceObjectsToLogger", "ongroupmaskmoved", boundsDelta);
		}
		if (boundsDelta.height === 0 && boundsDelta.width === 0) {
			//move group.
			this.handleGroupMove(groupName, boundsDelta.left, boundsDelta.top);
		} else {
			this.handleGroupResize(boundsDelta);
		}

		var groupIter = this.groupWindowIterator(this.movingGroup);
		for (var win of groupIter) {
			win.show();
		}
		// this.resizeObject = {};
		movingWindow.initialBounds = null;
		this.fixWindowOpacity({
			checkForSnappability: false
		});
	}

	/**
  * NOT CURRENTLY USED.
  * Will be like `onMouseMove`, but for groups. Goal is to only move all grouped windows `onMouseUp`. In the interim, just move the mask around. Right now I move every window on every resizeEvent
  */
	moveGroupMask() {
		var moveRequest = clone(this.moveRequest);
		var bounds = this.groupMask.getBounds();
		if (moveRequest.changeType !== 0) {
			var resizeHandle = this.resizeObject.correctedHandle;
			//@todo figure out why the handle wouldn't be set. sometimes, under strange circumstances (e.g., resizing a group of windows), this is undefined.
			if (resizeHandle) {
				var splitHandle = resizeHandle.split(/(?=[A-Z])/).map(function (s) {
					return s.toLowerCase();
				});

				splitHandle.forEach(handle => {
					if (handle === "top" || handle === "bottom") {
						bounds[handle] = moveRequest.mousePosition.y;
					}
					if (handle === "right" || handle === "left") {
						bounds[handle] = moveRequest.mousePosition.x;
					}
				});
			}
		}
		bounds.width = bounds.right - bounds.left;
		bounds.height = bounds.bottom - bounds.top;
		bounds.name = "groupMask";
		this.groupMask.setBounds(bounds);
	}

	/**
  * Scales a group of windows proportionately.
  * @param {moveRequest} moveRequest
  */
	scaleGroup(moveRequest) {
		//TODO: see group.scale and conver this to use that
		var self = this;
		var group = this.getMovingGroup(moveRequest);
		var groupIter;
		var resizeHandle = this.resizeObject.correctedHandle;
		var newGroupDimensions = {
			height: self.groupMask.height,
			width: self.groupMask.width
		};
		var splitHandle = resizeHandle.split(/(?=[A-Z])/).map(function (s) {
			return s.toLowerCase();
		});

		var anchors = group.getAnchors(resizeHandle);

		groupIter = this.groupWindowIterator(group, anchors[0]);
		var movements = {};
		for (let win of groupIter) {
			win.onGroupEdge = {};
			win.resizeHandle = this.resizeObject.correctedHandle;
			["top", "right", "left", "bottom"].forEach(handle => {
				if (win[handle] === group[handle]) {
					win.onGroupEdge[handle] = true;
				}
			});
			var newHeight = Math.round(newGroupDimensions.height * (win.height / group.height));
			var newWidth = Math.round(newGroupDimensions.width * (win.width / group.width));
			var request = win.getBounds();
			request.width = newWidth;
			request.height = newHeight;
			request.right = request.left + request.width;
			request.bottom = request.top + request.height;
			request.name = win.name;

			movements[request.name] = this.checkShortCircuits(request);
		}
		splitHandle.forEach(handle => {
			groupIter = this.groupWindowIterator(group);
			//cleans up the edges of the group in case rounding error messed us up.
			var oppEdge = OPPOSITE_EDGE_MAP[handle];
			for (var win of groupIter) {
				var moveRequest = movements[win.name];
				if (win.onGroupEdge && win.onGroupEdge[oppEdge] && moveRequest[oppEdge] !== self.groupMask[oppEdge]) {
					moveRequest.name = win.name;
					moveRequest[oppEdge] = self.groupMask[oppEdge];
					if (oppEdge === "bottom") {
						moveRequest.top = moveRequest.bottom - moveRequest.height;
					}
					if (oppEdge === "top") {
						moveRequest.bottom = moveRequest.top + moveRequest.height;
					}
					if (oppEdge === "left") {
						moveRequest.right = moveRequest.left + moveRequest.width;
					}
					if (oppEdge === "right") {
						moveRequest.left = moveRequest.right - moveRequest.width;
					}
					moveRequest.width = moveRequest.right - moveRequest.left;
					moveRequest.height = moveRequest.bottom - moveRequest.top;
					movements[win.name] = self.checkShortCircuits(moveRequest, win);
				}
			}
		});
		for (var windowName in movements) {
			self.moveWindow(movements[windowName]);
		}
	}

	/**
 * This basically will re-snap all windows after the movingWindow moves.
 * @todo, document inline.
 * @param  {type} group
 * @param  {function} cb
 */
	cleanupGroupResize(group, cb) {
		// TODO: see group.scale (replace scaleGroup and this with group.scale)
		var resizeHandle = group.resizeHandle || this.resizeObject.correctedHandle;
		var splitHandle = resizeHandle.split(/(?=[A-Z])/).map(function (s) {
			return s.toLowerCase();
		});

		var self = this;
		var alreadyDanced = [];
		splitHandle.forEach(handle => {
			var groupIter = this.groupWindowIterator(group);
			alreadyDanced = [];
			for (var anchor of groupIter) {
				if (!alreadyDanced.includes(anchor.name)) {
					var b = doTheConga(anchor, handle);b;
				}
			}
			// group.updateBounds();
			groupIter = this.groupWindowIterator(group);
			//cleans up the edges of the group in case rounding error messed us up.
			for (var win of groupIter) {
				if (win.onGroupEdge && win.onGroupEdge[handle] && win[handle] !== self.groupMask[handle]) {
					var moveRequest = win.getBounds();
					moveRequest.name = win.name;
					moveRequest[handle] = self.groupMask[handle];

					moveRequest.width = moveRequest.right - moveRequest.left;
					moveRequest.height = moveRequest.bottom - moveRequest.top;

					self.moveWindow(self.checkShortCircuits(moveRequest, win));
					var b = doTheConga(win, handle);b;
				}
			}
			group.updateBounds();
		});

		function doTheConga(win, handle) {
			if (!win) {
				Logger.system.warn("INVESTIGATE: No win passed to doTheConga");
				return;
			}
			var oppEdge = OPPOSITE_EDGE_MAP[handle];

			for (var i = 0, len = win.snappedWindows.length; i < len; i++) {
				var snappedWindowObj = win.snappedWindows[i];
				var snappedWin = self.getWindow(snappedWindowObj.name);
				if (!snappedWin) {
					Logger.system.warn(`INVESTIGATE: No Dockable Window found for ${snappedWindowObj.name}`);
					continue;
				}
				let groupIntersection = snappedWin.groupNames.some(name => win.groupNames.includes(name));
				if (!snappedWindowObj.edges[handle] || !groupIntersection) {
					continue;
				}

				var req = snappedWin.getBounds();
				req.name = snappedWin.name;

				snappedWin[oppEdge] = win[handle];
				var top = snappedWin.top,
				    left = snappedWin.left;
				if (handle === "top") {
					top = win.top - snappedWin.height;
				}

				if (handle === "bottom") {
					top = win.bottom;
				}

				if (handle === "right") {
					left = win.right;
				}

				if (handle === "left") {
					left = win.left - snappedWin.width;
				}

				snappedWin.moveTo(left, top);
				var b = doTheConga(snappedWin, handle);b;
				alreadyDanced.push(snappedWin.name);
			}
		}
	}

	/**
  * This returns an object with all of the bounds of all of the windows in a given group. This should be moved in to the dockabeGroup.
  */
	getBoundsOfGroupWindows(group) {
		var groupIter = this.groupWindowIterator(group);
		var bounds = {};
		for (var win of groupIter) {
			bounds[win.name] = win.getBounds();
			//bounds[win.name].name = win.name;
		}
		return bounds;
	}

	/**
  * For a group, it will iterate through its windows and set bounds on each of them.
  */
	setBoundsOfGroupWindows(group, windowBounds) {
		var groupIter = this.groupWindowIterator(group);
		for (var win of groupIter) {
			windowBounds[win.name].name = win.name;
			this.moveWindow(windowBounds[win.name]);
		}
	}

	/**
  * A resize-helper that needs better documentation. I'm pretty sure this re-snaps windows during group resizes.
  */
	cleanupSharedEdges(group, windowBounds) {
		var groupIter = this.groupWindowIterator(group);

		// find everything attached to right and bottom of group mask
		let alignRight = [],
		    alignBottom = [];

		for (var win of groupIter) {
			var bounds = windowBounds[win.name];
			if (bounds.right == this.groupMask.right) {
				alignRight.push(win);
			}
			if (bounds.bottom == this.groupMask.bottom) {
				alignBottom.push(win);
			}
			bounds = this.checkShortCircuitsWithEdge(bounds, "left");
			bounds = this.checkShortCircuitsWithEdge(bounds, "top");
		}

		this.setBoundsOfGroupWindows(group, windowBounds);

		groupIter = this.groupWindowIterator(group);
		// move stuff right / down
		for (let win of groupIter) {
			win.snappedWindows.forEach(val => {
				let sWin = this.getWindow(val.name);
				var bounds = windowBounds[win.name];
				var sBounds = windowBounds[sWin.name];
				//windows can be snapped but in different groups.
				if (sBounds) {
					var sharedEdges = val.edges;
					if (sharedEdges.right) {
						if (bounds.right > sBounds.left) {
							sBounds.left = bounds.right;
							sBounds.right = sBounds.width + sBounds.left;
						}
					}
					if (sharedEdges.bottom) {
						if (bounds.bottom > sBounds.top) {
							sBounds.top = bounds.bottom;
							sBounds.bottom = sBounds.height + sBounds.top;
						}
					}
				}
			});
		}

		this.setBoundsOfGroupWindows(group, windowBounds);

		groupIter = this.groupWindowIterator(group);
		// resize to fit
		for (let win of groupIter) {
			win.snappedWindows.forEach(val => {
				let sWin = this.getWindow(val.name);
				var bounds = windowBounds[win.name];
				var sBounds = windowBounds[sWin.name];
				if (sBounds) {
					var sharedEdges = val.edges;
					if (sharedEdges.right) {
						if (sBounds.left > bounds.right) {
							bounds.right = sBounds.left;
							bounds.width = bounds.right - bounds.left;
						}
					}
					if (sharedEdges.bottom) {
						if (sBounds.top > bounds.bottom) {
							bounds.bottom = sBounds.top;
							bounds.height = bounds.bottom - bounds.top;
						}
					}
				}
			});
		}

		groupIter = this.groupWindowIterator(group);

		var maxRight = false;
		var maxBottom = false;
		var minLeft = false;
		var minTop = false;

		for (let win of groupIter) {
			let bounds = windowBounds[win.name];
			if (maxRight === false || bounds.right > maxRight) {
				maxRight = bounds.right;
			}
			if (maxBottom === false || bounds.bottom > maxBottom) {
				maxBottom = bounds.bottom;
			}
			if (minLeft === false || bounds.left < minLeft) {
				minLeft = bounds.left;
			}
			if (minTop === false || bounds.top < minTop) {
				minTop = bounds.top;
			}
		}

		groupIter = this.groupWindowIterator(group);

		for (let win of groupIter) {
			let bounds = windowBounds[win.name];
			if (win.onGroupEdge && win.onGroupEdge.right && maxRight > bounds.right) {
				bounds.right = maxRight;
				bounds.width = bounds.right - bounds.left;
			}

			if (win.onGroupEdge && win.onGroupEdge.bottom && maxBottom > bounds.bottom) {
				bounds.bottom = maxBottom;
				bounds.height = bounds.bottom - bounds.top;
			}

			if (win.onGroupEdge && win.onGroupEdge.left && minLeft < bounds.left) {
				bounds.left = minLeft;
				bounds.width = bounds.right - bounds.left;
			}

			if (win.onGroupEdge && win.onGroupEdge.top && minTop < bounds.top) {
				bounds.top = minTop;
				bounds.height = bounds.bottom - bounds.top;
			}
		}
		return windowBounds;
	}

	/**
  * Run after everything, it removes any gaps that might have occured (e.g., from fractional pixels, rounding, etc). It needs better inline documentation.
  */
	cleanupGaps(group, windowBounds) {
		var groupIter = this.groupWindowIterator(group);

		var xs = [];
		var ys = [];
		for (var win of groupIter) {
			var bounds = windowBounds[win.name];
			//if (!xs.length) xs.push(bounds.left);
			let found = false;
			for (let i = 0, len = xs.length; i < len; i++) {
				var x = xs[i];
				if (Math.abs(bounds.left - x) < 5) {
					bounds.left = x;
					found = true;
					break;
				}
			}
			if (!found) {
				xs.push(bounds.left);
			}

			found = false;
			for (let i = 0, len = xs.length; i < len; i++) {
				var x = xs[i];
				if (Math.abs(bounds.right - x) < 5) {
					bounds.right = x;
					found = true;
					break;
				}
			}
			if (!found) {
				xs.push(bounds.right);
			}

			bounds.width = bounds.right - bounds.left;

			//if (!ys.length) ys.push(bounds.top);
			found = false;
			for (let i = 0, len = ys.length; i < len; i++) {
				var y = ys[i];
				if (Math.abs(bounds.top - y) < 5) {
					bounds.top = y;
					found = true;
					break;
				}
			}
			if (!found) {
				ys.push(bounds.top);
			}

			found = false;
			for (let i = 0, len = ys.length; i < len; i++) {
				var y = ys[i];
				if (Math.abs(bounds.bottom - y) < 5) {
					bounds.bottom = y;
					found = true;
					break;
				}
			}
			if (!found) {
				ys.push(bounds.bottom);
			}

			bounds.height = bounds.bottom - bounds.top;
			//win.setBounds(bounds)
		}

		return windowBounds;
	}

	/**
  * Resizes a window or group of windows on the interior of a group
  * @param {moveRequest} moveRequest
  */
	resizeInteriorWindow(moveRequest) {
		var shortCircuits = {
			width: false,
			height: false
		};
		if (moveRequest.width <= MINIMUM_WIDTH) {
			shortCircuits.width = true;
		}
		if (moveRequest.height <= MINIMUM_HEIGHT) {
			shortCircuits.height = true;
			if (debug) {
				Logger.system.debug("forceObjectsToLogger", "short circuiting height because of", moveRequest.name, moveRequest.height);
			}
		}

		var resizeHandle = this.resizeObject.correctedHandle;
		//Hole filling algo for tiling calls this method. It passes in the resize handle. It'll never be a corner. No need for the resizeObject here.
		if (moveRequest.forceResizeHandle) {
			resizeHandle = moveRequest.resizeHandle;
		}

		var self = this;
		if (!resizeHandle) {
			return;
		}

		var movements = {};
		var snappableWindows = this.getSnappableWindows(moveRequest);
		var modifiedRequest = clone(moveRequest);
		var splitHandle = resizeHandle.split(/(?=[A-Z])/).map(function (s) {
			return s.toLowerCase();
		});

		//the moverequest is bad and shouldn't be allowed to proceed.
		if (shortCircuits.width || shortCircuits.height) {
			return;
		}
		var snappedWindowNames = [];
		for (let i = 0, len = movingWindow.snappedWindows.length; i < len; i++) {
			let snapObj = movingWindow.snappedWindows[i];
			for (var h = 0, handleLen = splitHandle.length; h < handleLen; h++) {
				let handle = splitHandle[h];
				if (snapObj.edges[handle] || snapObj.corners[resizeHandle]) {
					snappedWindowNames.push(snapObj.name);
					break;
				}
			}
		}
		//will snap the window to other windows before goign and modifying the rest of it
		for (let i = 0, len = snappableWindows.length; i < len; i++) {

			if (snappedWindowNames.includes(snappableWindows[i]) || snappableWindows[i] === movingWindow.name) {
				continue;
			}
			if (groupBlacklist.includes(snappableWindows[i])) {
				continue;
			}
			let win = this.getWindow(snappableWindows[i]);

			this.setStationaryWindow(win);
			modifiedRequest.movingRegion = resizeHandle;
			var shouldContinue = false;
			for (let h = 0, handleLen = splitHandle.length; h < handleLen; h++) {
				var handle = splitHandle[h];
				if (modifiedRequest[handle] === moveRequest[handle]) {
					shouldContinue = true;
					break;
				}
			}
			modifiedRequest = this.snapWindow(modifiedRequest);

			if (shouldContinue) {
				continue;
			}

			modifiedRequest.snappingRegions = BoxMath.getSnappingRegions(modifiedRequest, this.bufferSize);

			modifiedRequest.windowBoundingBox = BoxMath.getWindowBoundingBox(modifiedRequest);
			break;
		}
		moveRequest = modifiedRequest;
		movements[moveRequest.name] = moveRequest;

		var movingWindowSnappedWindows = [];
		var terds = [];

		function recurse(snappedWindows, handle, originalHandle) {
			var oppEdge = OPPOSITE_EDGE_MAP[handle];
			for (let i = 0, len = snappedWindows.length; i < len; i++) {
				let snapObj = snappedWindows[i];

				let snappedWindow = self.getWindow(snapObj.name);
				if (!terds.includes(snapObj.name + oppEdge)) {
					terds.push(snapObj.name + oppEdge);
					movingWindowSnappedWindows.push({
						name: snapObj.name,
						edge: oppEdge,
						handle: originalHandle
					});
					var a = recurse(self.getWindowsOnEdge(snappedWindow, oppEdge), oppEdge, originalHandle);
				}
			}
			return;
		}
		function recurseCorner(cornerWindows, handle, originalHandle) {

			for (let i = 0, len = cornerWindows.length; i < len; i++) {

				let snapObj = cornerWindows[i];

				let snappedWindow = self.getWindow(snapObj.name);
				if (snapObj.corner && !terds.includes(snapObj.name + snapObj.corner)) {
					var splitHandle = snapObj.corner.split(/(?=[A-Z])/).map(function (s) {
						return s.toLowerCase();
					});
					splitHandle.forEach(handle => {
						//if splitHandle == bottomLeft and the originalHandle is bottom, we don't want to do anything with the Left edge. The algo will run through this function twice.
						var doStuff = handle === originalHandle || handle === OPPOSITE_EDGE_MAP[originalHandle];
						if (doStuff && !terds.includes(snapObj.name + handle)) {
							movingWindowSnappedWindows.push({
								name: snapObj.name,
								edge: handle,
								handle: originalHandle
							});
							var a = recurse(self.getWindowsOnEdge(snappedWindow, handle), handle, originalHandle);
							terds.push(snapObj.name + handle);
						}
					});
				}

				// recurseCorner(snappedWindow, snapObj.corner);
			}
			return;
		}

		var movingCorner = CORNERS.includes(resizeHandle);
		if (movingCorner) {
			var cornerPoint = movingWindow.getPointByVertex(resizeHandle);
			var cornerWindows = self.getWindowsAtPoint(cornerPoint).map((val, i) => {
				return {
					name: val,
					corner: self.getWindow(val).getVertexByPoint(cornerPoint),
					edge: self.getWindow(val).getEdgeByPoint(cornerPoint)
				};
			});

			splitHandle.forEach(handle => {
				var b = recurseCorner(cornerWindows, resizeHandle, handle);
			});
		} else {
			var clonedSnaps = self.getWindowsOnEdge(movingWindow, resizeHandle);
			var b = recurse(clonedSnaps, resizeHandle, resizeHandle);
		}

		for (let i = 0, len = movingWindowSnappedWindows.length; i < len; i++) {
			let snapObj = movingWindowSnappedWindows[i];

			var snappedWindow = self.getWindow(snapObj.name);
			let newBounds = movements[snapObj.name] ? movements[snapObj.name] : snappedWindow.getBounds();
			newBounds.name = snapObj.name;
			newBounds[snapObj.edge] = moveRequest[snapObj.handle];

			newBounds.width = newBounds.right - newBounds.left;
			newBounds.height = newBounds.bottom - newBounds.top;
			if (newBounds.width <= MINIMUM_WIDTH) {
				shortCircuits.width = true;
			}
			if (newBounds.height <= MINIMUM_HEIGHT) {
				shortCircuits.height = true;
				if (debug) {
					Logger.system.debug("forceObjectsToLogger", "short circuiting height because of", newBounds.name, newBounds.height);
				}
			}

			newBounds = self.checkShortCircuits(newBounds, snappedWindow);
			movements[newBounds.name] = newBounds;
		}
		for (var windowName in movements) {
			if (groupBlacklist.includes(windowName)) {
				continue;
			}
			var movement = movements[windowName];
			let win = this.getWindow(windowName);
			if (shortCircuits.width) {
				movement.width = win.width;
				movement.left = win.left;
				movement.right = win.right;
			}
			if (shortCircuits.height) {

				movement.height = win.height;
				movement.top = win.top;
				movement.bottom = win.bottom;
			}

			this.moveWindow(movement);
		}
	}

	/**
  * function for debugging a 3x3 grid.
 */
	logger() {
		var boundingBoxes = {};
		var windowPoolIterator = this.windowPoolIterator();
		for (var win of windowPoolIterator) {
			boundingBoxes[windowName] = JSON.stringify(win.windowBoundingBox);
		}
		var box = "";
		box += "+----------------------------------------+\n";
		box += "|             |             |            |\n";
		box += "|   " + boundingBoxes["A"] + "          |    " + boundingBoxes["B"] + "         |   " + boundingBoxes["C"] + "         |\n";
		box += "|             |             |            |\n";
		box += "|             |             |            |\n";
		box += "+----------------------------------------+\n";
		box += "|             |             |            |\n";
		box += "|   " + boundingBoxes["D"] + "          |    " + boundingBoxes["E"] + "         |   " + boundingBoxes["F"] + "         |\n";
		box += "|             |             |            |\n";
		box += "|             |             |            |\n";
		box += "+----------------------------------------+\n";
		box += "|             |             |            |\n";
		box += "|   " + boundingBoxes["G"] + "          |    " + boundingBoxes["H"] + "         |   " + boundingBoxes["I"] + "         |\n";
		box += "|             |             |            |\n";
		box += "|             |             |            |\n";
		box += "+----------------------------------------+\n";
		global.Logger.system.verbose(box);
	}

	/**
  * Helper to determine whether a moveRequest will affect a window, the group, or just a local collection of windows that are snapped to the movingWindow.
  */
	moveAffectsGroup(moveRequest) {
		if (!this.groupMode.enabled) {
			return false;
		}
		var win = this.getWindow(moveRequest.name);

		if (!win || !win.groupNames.length) {
			return false;
		}

		var group = this.getMovingGroup(moveRequest);
		if (!group.isARectangle()) {
			return false;
		}

		//if the handle that's being dragged is on an exterior edge of a group resizing all.
		var resizeHandle = this.resizeObject.correctedHandle || win.getResizeHandle(moveRequest);

		var edges = ["top", "left", "right", "bottom"];
		if (moveRequest.changeType !== 0 && CORNERS.includes(resizeHandle)) {
			var cornerPoint = win.getPointByVertex(resizeHandle);
			return group.pointIsOnBoundingBox(cornerPoint);
		}

		if (moveRequest.changeType !== 0) {
			return win[resizeHandle] === group[resizeHandle];
		}
		//never used, but could be used if you wanted to only allow exterior windows the ability to move the group.
		for (var i = 0, len = edges.length; i < len; i++) {
			var edge = edges[i];
			if (win[edge] === group[edge]) {
				return true;
			}
		}

		return false;
	}

	/**
  * Should use this. Computes the difference between two boundsObjects.
  * @param {moveRequest} newBounds
  * @param {moveRequest} old
  */
	getBoundsDelta(newBounds, old) {
		var boundsDelta = {};
		var widthDelta = newBounds.width - old.width;

		var heightDelta = newBounds.height - old.height;

		boundsDelta.width = widthDelta;
		boundsDelta.height = heightDelta;
		boundsDelta.top = Math.abs(newBounds.top - old.top);
		boundsDelta.left = Math.abs(newBounds.left - old.left);
		if (newBounds.top < old.top) {
			boundsDelta.top = -boundsDelta.top;
		}
		if (newBounds.left < old.left) {
			boundsDelta.left = -boundsDelta.left;
		}

		return boundsDelta;
	}

	/**
 * Will move a group of windows.
 * @param  {moveRequest} moveRequest
 * @param  {function} cb
 */
	handleGroupMove(moveRequest, cb) {
		const invokeCallback = function () {
			cb({ finished: true });
		};
		if (movingWindow.isMaximized) {
			return invokeCallback();
		}
		let self = this;
		let group = this.getMovableGroup(moveRequest.name);
		let movingDirection = self.getMovingDirection(moveRequest, movingWindow);
		let moveAnchor = group.getMoveAnchor(movingDirection);
		if (moveAnchor === "NotMoving") {
			return invokeCallback();
		}
		let updateGroupWindowsByDelta = function (delta, moveWindows, cb) {
			var groupIter = self.groupWindowIterator(group, moveAnchor);
			//don't need to add anything if the delta is 0.
			var modifyBounds = delta.x || delta.y;
			for (let win of groupIter) {
				let bounds = win.getBounds();
				if (modifyBounds) {
					var newLeft = win.left + delta.x;
					var newTop = win.top + delta.y;
					bounds.left = newLeft;
					bounds.top = newTop;
					bounds.bottom = newTop + bounds.height;
					bounds.right = newLeft + bounds.width;
					bounds.name = win.name;
				}

				if (moveWindows) {
					//I'm breaking my own rule by calling setBounds directly. Sadly, isJiggling was being triggered (I think...didn't really investigate), and the window wasn't moving with small adjustments. Set bounds fixes that.
					win.setBounds(bounds);
				} else {
					win.setInternalBounds(bounds);
				}
			}
			group.updateBounds();
			if (cb) {
				cb();
			}
		};
		let initialBounds = group.getBounds();

		let delta = self.getMoveDelta(moveRequest);
		if (ALLOW_GROUPS_TO_SNAP) {
			//make the group get its new bounds, but don't move the windows until the snap calculation is finished.
			updateGroupWindowsByDelta(delta, false);
			let preSnapBounds = group.getBounds();
			let mr = group.getBounds();
			mr.name = moveRequest.name;
			let groupMoveRequest = this.setMoveRequest(mr, initialBounds);
			groupMoveRequest.changeType = 0;
			this.checkBuffers(groupMoveRequest, function (modifiedRequest) {
				if (modifiedRequest.finished) {
					var delta = self.getMoveDelta(modifiedRequest, preSnapBounds);
					updateGroupWindowsByDelta(delta, true, invokeCallback);
				}
			});
		} else {
			updateGroupWindowsByDelta(delta, true, invokeCallback);
		}
	}

	/**
 * Calculates the % change that a moveRequest inflicts on a group of windows.
 * @param  {moveRequest} moveRequest
 * @return {type}
 */
	getGroupDelta(groupName, moveRequest) {
		var group = this.getGroup(groupName);
		var win = this.getWindow(moveRequest.name);
		var widthDelta = moveRequest.width - win.width;
		var heightDelta = moveRequest.height - win.height;

		var delta = {
			height: BoxMath.getPercentChange(group.height, group.height + heightDelta),
			width: BoxMath.getPercentChange(group.width, group.width + widthDelta)
		};
		return delta;
	}

	/**
  * Creates the resizeObject. Put anything here that should be cached onMouseDown. Will be cleared onMouseUp.
  * @param {moveRequest} moveRequest
  * @return {resizeObject}
  */
	constructResizeObject(moveRequest) {
		var win = this.getWindow(moveRequest.name);
		var resizeObject = {
			handle: win.getResizeHandle(moveRequest),
			type: "edge",
			scalingGroup: moveRequest.changeType !== 0 ? this.moveAffectsGroup(moveRequest) : false
		};

		resizeObject.correctedHandle = resizeObject.handle;
		if (CORNERS.includes(resizeObject.handle)) {
			resizeObject.type = "corner";
			if (resizeObject.scalingGroup) {
				resizeObject = this.correctResizeObject(win, resizeObject);
			}
		}

		resizeObject.movingEdges = this.getMovingEdgesFromResizeHandle(resizeObject.correctedHandle);
		win.resizeHandle = resizeObject.correctedHandle;

		return resizeObject;
	}

	/**
  * If a corner of a window is on the edge of the group, but it's not an actual corner, we need to treat that as an edge resize. See inline documentation for more. This is basically correcting errant resize-handles.
  */
	correctResizeObject(win, resizeObject, force) {

		if (CORNERS.includes(resizeObject.handle)) {
			let group = this.movingGroup;
			let cornerPoint = win.getPointByVertex(resizeObject.handle);
			let groupEdge = group.getEdgeByPoint(cornerPoint);
			if (group.pointIsOnBoundingBox(cornerPoint, false)) {
				let splitHandle = resizeObject.handle.split(/(?=[A-Z])/).map(function (s) {
					return s.toLowerCase();
				});

				if (this.moveRequest) {
					//E.g., 'bottomRight'. Takes and resets the bottom to whatever it was before the user started moving. So even if I grab the bottom right corner and drag it down, the window's bottom edge will not shift.
					this.moveRequest[splitHandle[0]] = movingWindow[splitHandle[0]];
					this.moveRequest.height = this.moveRequest.bottom - this.moveRequest.top;
					this.moveRequest.width = this.moveRequest.right - this.moveRequest.left;
				}
				resizeObject.type = "edge";
				//e.g., bottomRight; this will just choose 'right'. This happens when you grab the corner of a window that's also on the edge of the window...but isn't the corner of the group.

				resizeObject.correctedHandle = groupEdge;
			}
		}
		return resizeObject;
	}

	/**
 * Resizes a window based on some delta.
 * @param  {dockableWindow} win
 * @param  {Object} delta Object with a width/height change.
 * @return {type}
 */
	resizeByDelta(win, delta) {
		var bounds = win.getBounds();
		bounds.width = BoxMath.scaleProportionately(win.width, delta.width);
		bounds.height = BoxMath.scaleProportionately(win.height, delta.height);
		if (win.resizeHandle.toLowerCase().includes("right")) {
			bounds.right = bounds.left + bounds.width;
		}
		if (win.resizeHandle.toLowerCase().includes("bottom")) {

			bounds.bottom = bounds.top + bounds.height;
		}

		if (win.resizeHandle.toLowerCase().includes("top")) {

			bounds.top = bounds.bottom - bounds.height;
		}

		if (win.resizeHandle.toLowerCase().includes("left")) {

			bounds.left = bounds.right - bounds.width;
		}
		return bounds;
	}

	getMovingDirection(bounds, win) {
		if (!win) {
			win = this.getWindow(bounds.name);
		}
		let direction = "";
		if (win.left > bounds.left) {
			direction = "Left";
		}
		if (win.left < bounds.left) {
			direction += "Right";
		}
		if (win.top > bounds.top) {
			direction += "Top";
		}
		if (win.top < bounds.top) {
			direction += "Bottom";
		}
		return direction;
	}

	/**
 * Does the dirty work of actually moving windows.
 * @todo, shortCircuit moves that try to squash windows beyond a minimum width/height.
 * @param  {moveRequest} bounds
 * @param  {function} callback
 */
	moveWindow(bounds, callback) {
		//if window resize causes ANY window to be smaller than the minimum_width, quit that shit.
		if (!bounds) {
			if (callback) {
				callback();
			}
			return;
		}

		if (!callback) {
			callback = function noop() {};
		}

		var win = this.getWindow(bounds.name);
		if (win) {
			win.setBounds(bounds, callback, setBoundsErrorCB);
		}
	}

	/**
 * Checks to see whether a window can be snapped to other windows/monitors.
 * @param  {moveRequest} bounds
 * @param  {function} callback
  */
	checkBuffers(moveRequest, cb) {
		var snappableWindows = this.getSnappableWindows(moveRequest);
		var snappableMonitors = this.getSnappableMonitors(moveRequest);
		if (!snappableWindows.length && !snappableMonitors.length && cb) {
			moveRequest.finished = true;
			cb(moveRequest);
			return;
		}

		var modifiedRequest;

		for (let i = 0, len = snappableMonitors.length; i < len; i++) {
			var monitor = monitorPool[snappableMonitors[i]];
			// let clonedRequest = clone(moveRequest);
			let snapRequest = monitor.snapWindow(moveRequest);
			if (snapRequest) {
				moveRequest = snapRequest;
			}

			if (i === snappableMonitors.length - 1 && snappableWindows.length === 0) {
				moveRequest.finished = true;
				cb(moveRequest);
				break;
			}
		}

		for (var i = 0, len = snappableWindows.length; i < len; i++) {
			var win = this.getWindow(snappableWindows[i]);
			this.setStationaryWindow(win);
			win.setOpacity(SNAPPING_OPACITY);
			modifiedRequest = this.snapWindow(moveRequest);
			//The original request has been changed because of a snap to anstraddler window. replace the reference so new comparisons are made against the newly snapped window.
			moveRequest = modifiedRequest;

			moveRequest.windowBoundingBox = BoxMath.getWindowBoundingBox(moveRequest);
			if (i === snappableWindows.length - 1) {
				modifiedRequest.finished = true;
			}

			cb(modifiedRequest);
		}
	}

	/**
 * Spins through windows and fixes opacity. For onMouseMove, we skip any windows that could be snapped to the movingWindow. onMouseUp, everything gets hit.
 * @todo, see if I can keep a list of windows that are set to 0.5. I don't need to loop through all windows here. Only the ones that aren't set to 1.
 * @param  {object} params
 * @param  {object} params.checkForSnappability
 */
	fixWindowOpacity(params) {
		var windowPoolIterator = this.windowPoolIterator();
		for (var win of windowPoolIterator) {
			if (params.checkForSnappability) {
				if (win.canSnapToWindow(this.moveRequest)) {
					continue;
				}
			}
			win.setOpacity(1);
		}
	}

	/**
  * Happens when config is loaded from the configClient.
  */
	setGlobalMinimums(serviceConfig) {
		MINIMUM_HEIGHT = serviceConfig.MINIMUM_HEIGHT;
		MINIMUM_WIDTH = serviceConfig.MINIMUM_WIDTH;
	}

	/****************************************
  *			Calculators - general		*
 ****************************************/
	/**
 * Given an object, will set boundingboxes on it. If it's a dockableWindow, it'll let the window set itself up.
 * @param  {dockableWindow} win
 * @return {type}
 */
	setBoundingBoxes(win) {

		if (win.setBoundingBoxes) {
			win.setBoundingBoxes();
		} else {
			win.buffer = this.getBuffer(win);
			win.snappingRegions = BoxMath.getSnappingRegions(win, this.bufferSize);
			win.windowBoundingBox = BoxMath.getWindowBoundingBox(win);
			win.innerBuffer = this.getInnerBoundingBox(win);
		}
		return win;
	}

	/**
  * Returns the difference between the movingWindow's location and the requested movement.
 * @param  {moveRequest} moveRequest
 * @return {type}
 */
	getMoveDelta(moveRequest, oldBounds) {
		var movingWin = oldBounds || this.getWindow(moveRequest.name);
		var delta = {
			x: moveRequest.left - movingWin.left,
			y: moveRequest.top - movingWin.top
		};
		return delta;
	}

	/**
 * Returns the inner bounds. We use this to give the windows some internal stickiness.
 * @param  {type} bounds
 * @return {object}
 */
	getInnerBoundingBox(bounds) {
		return {
			min: {
				x: bounds.left + this.bufferSize,
				y: bounds.top + this.bufferSize
			},
			max: {
				x: bounds.right - this.bufferSize,
				y: bounds.bottom - this.bufferSize
			}
		};
	}

	/**
 * Gets the snapping buffer of a request.
 * @param  {type} request
 * @return {type}
 */
	getBuffer(request) {
		return {
			min: {
				x: request.left - this.bufferSize,
				y: request.top - this.bufferSize
			},
			max: {
				x: request.right + this.bufferSize,
				y: request.bottom + this.bufferSize
			}
		};
	}

	/**
 * Given a request, a window, and a region, it'll tell you whether they intersect. We use this to figure out which corner/edge to snap to.
 * @param  {moveRequest} moveRequest
 * @param  {dockableWindow} stationaryWindow
 * @param  {string} stationaryRegion
 * @return {object}
 */
	getIntersections(moveRequest, stationaryWindow, stationaryRegion) {

		var movingBoundingBoxes = moveRequest.snappingRegions;
		var stationaryBoundingBoxes = stationaryWindow.snappingRegions;
		var intersections = [];
		for (var movingRegion in movingBoundingBoxes) {

			if (movingRegion === "inner") {
				continue;
			}
			if (BoxMath.intersectBoundingBoxes(stationaryBoundingBoxes[stationaryRegion], movingBoundingBoxes[movingRegion])) {
				intersections.push(movingRegion);
			}
		}
		return intersections;
	}

	/****************************************
  *				Iterators				*
 ****************************************/
	*windowPoolIterator() {
		for (var windowName in windowPool) {
			let win = this.getWindow(windowName);
			if (!win.isMinimized) {
				yield win;
			}
		}
	}

	*groupWindowIterator(group, orderAnchor = movingWindow) {
		//TODO: move this into group so you can do group.windowITerator (also will help clenaup group.scale)
		let windows = this.orderWindows(group.windows, orderAnchor);
		//preserves order..for .. in does not.
		for (let i = 0; i < windows.length; i++) {
			yield windows[i];
		}
	}

	setRouterClient(client) {
		this.routerClient = client;
	}
}
module.exports = DockingCalculator;

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\services\\docking\\dockingCalculator.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\services\\docking\\dockingCalculator.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0)))

/***/ }),
/* 153 */,
/* 154 */,
/* 155 */,
/* 156 */,
/* 157 */,
/* 158 */,
/* 159 */,
/* 160 */,
/* 161 */,
/* 162 */,
/* 163 */,
/* 164 */,
/* 165 */,
/* 166 */,
/* 167 */,
/* 168 */,
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(120);


/***/ })
/******/ ]);
//# sourceMappingURL=dockingService.js.map