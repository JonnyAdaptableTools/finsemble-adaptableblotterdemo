: false\r\n};\r\n\r\nlet darkTheme = {\r\n    font: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\r\n    color: '#ffffff',\r\n    backgroundColor: '#403E3E',\r\n    altbackground: '#302E2E',\r\n    foregroundSelectionColor: '#ffffff',\r\n    backgroundSelectionColor: '#546465',\r\n\r\n    columnHeaderFont: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\r\n    columnHeaderColor: 'white',\r\n    columnHeaderBackgroundColor: '#07071E',\r\n    columnHeaderForegroundSelectionColor: 'white',\r\n    columnHeaderBackgroundSelectionColor: '#3D77FE',\r\n\r\n    rowHeaderFont: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\r\n    rowHeaderColor: 'white',\r\n    rowHeaderBackgroundColor: '#07071E',\r\n    rowHeaderForegroundSelectionColor: 'white',\r\n    rowHeaderBackgroundSelectionColor: '#3D77FE',\r\n\r\n    backgroundColor2: 'rgb(201, 201, 201)',\r\n    lineColor: 'rgb(199, 199, 199)',\r\n    voffset: 0,\r\n    scrollbarHoverOver: 'visible',\r\n    scrollbarHoverOff: 'visible',\r\n    scrollingEnabled: true,\r\n\r\n    fixedRowAlign: 'center',\r\n    fixedColAlign: 'center',\r\n    cellPadding: 15,\r\n    gridLinesH: false,\r\n    gridLinesV: false,\r\n\r\n    defaultRowHeight: 30,\r\n    defaultFixedRowHeight: 15,\r\n    showRowNumbers: false,\r\n    editorActivationKeys: ['alt', 'esc'],\r\n    columnAutosizing: true,\r\n    readOnly: false\r\n};\r\n\r\nfunction hypergridAddRow(grid, blotter, newRow) {\r\n    if (!newRowTimer) {\r\n        //we just want to avoid the data going out of index when editing it. \r\n        newRowTimer = setInterval(() => {\r\n            if (!blotter.gridHasCurrentEditValue() && newRowList.length > 0) {\r\n                newRowList.forEach(trade => grid.behavior.dataModel.addRow(trade));\r\n                newRowList.length = 0;\r\n                blotter.ReindexAndRepaint();\r\n            }\r\n        }, 500);\r\n    }\r\n    newRowList.push(newRow);\r\n}\r\n\r\nfunction hypergridUpdateRowFromDataSource(grid, blotter, updatedRow, primaryKeyColumn) {\r\n    let primaryKeyValue = updatedRow[primaryKeyColumn];\r\n    let row = grid.behavior.dataModel.dataSource.findRow(primaryKeyColumn, primaryKeyValue);\r\n    for (let column of grid.behavior.allColumns) {\r\n        row[column.name] = updatedRow[column.name];\r\n    }\r\n    //if not editing we refresh the grid\r\n    if (!blotter.gridHasCurrentEditValue()) {\r\n        blotter.ReindexAndRepaint();\r\n    }\r\n}\r\n\r\nfunction createGrid(data, blotterType) {\r\n    var grid = new hypergrid('#gridcontainer', { data: data, schema: getSchema(data, blotterType) });\r\n    grid.addProperties({ editOnKeydown: false });\r\n    //Set to `true` to render `0` and `false`. Otherwise these value appear as blank cells\r\n    grid.addProperties({ renderFalsy: true });\r\n    grid.localization.add('USDCurrencyFormat', new grid.localization.NumberFormatter('en-US', {\r\n        style: 'currency',\r\n        currency: 'USD',\r\n        maximumFractionDigits: 0\r\n    }));\r\n    grid.localization.add('PriceFormat', new grid.localization.NumberFormatter('en-US', {\r\n        maximumFractionDigits: 4\r\n    }));\r\n\r\n    var shortDateOptions = { year: 'numeric', month: 'long', day: 'numeric' };\r\n    grid.localization.add('shortDateFormat', new grid.localization.DateFormatter('en-EN', shortDateOptions));\r\n    let dateTimeoptions = {\r\n        year: 'numeric', month: 'numeric', day: 'numeric',\r\n        hour: 'numeric', minute: 'numeric', second: 'numeric',\r\n        hour12: false\r\n    };\r\n    grid.localization.add('dateTimeFormat', new grid.localization.DateFormatter('en-EN', dateTimeoptions));\r\n    return grid;\r\n}\r\n\r\nfunction getSchema(data, blotterType) {\r\n    var positionColumns = [\r\n        \"instrumentId\",\r\n        \"position\",\r\n        \"currency\",\r\n        \"currentPrice\",\r\n        \"closingPrice\",\r\n        \"pnl\"\r\n    ];\r\n    var priceColumns = [\r\n        \"instrumentId\",\r\n        \"price\",\r\n        \"bidOfferSpread\",\r\n        \"bid\",\r\n        \"ask\",\r\n        \"closingPrice\",\r\n        \"changeOnDay\",\r\n        \"bloombergBid\",\r\n        \"bloombergAsk\",\r\n    ];\r\n    var tradeColumns = [\r\n        \"tradeId\",\r\n        \"instrumentId\",\r\n        \"instrumentName\",\r\n        \"notional\",\r\n        \"deskId\",\r\n        \"counterparty\",\r\n        \"currency\",\r\n        \"country\",\r\n        \"changeOnYear\",\r\n        \"price\",\r\n        \"moodysRating\",\r\n        \"fitchRating\",\r\n        \"sandpRating\",\r\n        \"tradeDate\",\r\n        \"settlementDate\",\r\n        \"lastUpdated\",\r\n        \"lastUpdatedBy\"\r\n    ];\r\n    var columns;\r\n    switch (blotterType) {\r\n        case \"trade\":\r\n            columns = tradeColumns;\r\n            break;\r\n        case \"position\":\r\n            columns = positionColumns;\r\n            break;\r\n        case \"price\":\r\n            columns = priceColumns;\r\n            break;\r\n    }\r\n    var schema = [];\r\n    for (var p of columns) {\r\n        schema.push({ name: p, header: capitalize(p) });\r\n    }\r\n    return schema;\r\n}\r\nfunction capitalize(string) {\r\n    return (/[a-z]/.test(string) ? string : string.toLowerCase())\r\n        .replace(/[\\s\\-_]*([^\\s\\-_])([^\\s\\-_]+)/g, replacer)\r\n        .replace(/[A-Z]/g, ' $&')\r\n        .trim();\r\n}\r\nfunction replacer(a, b, c) {\r\n    return b.toUpperCase() + c;\r\n}\r\n\r\nfunction initAdaptableBlotter(grid, blotterId, primaryKey) {\r\n    let adaptableblotter = new adaptableblotterhypergrid.AdaptableBlotter({\r\n        blotterId: blotterId,\r\n        primaryKey: primaryKey,\r\n        vendorGrid: grid,\r\n        userName: \"Jonathan\",\r\n        enableAuditLog: false,\r\n        enableRemoteConfigServer: false,\r\n        predefinedConfig: \"defaultConfig.json\",\r\n        adaptableBlotterContainer: \"adaptableblottercontainer\"\r\n    });\r\n\r\n    let origgetCell = grid.behavior.dataModel.getCell;\r\n    grid.behavior.dataModel.getCell = (config, declaredRendererName) => {\r\n        if (config.isDataRow) {\r\n            var y = config.dataCell.y;\r\n            if (y % 2) {\r\n                config.backgroundColor = config.altbackground;\r\n            }\r\n            if (!adaptableblotter.isColumnReadonly(config.field)) {\r\n                config.font = lightTheme.fontBold;\r\n            }\r\n        }\r\n        return origgetCell.call(grid.behavior.dataModel, config, declaredRendererName);\r\n    };\r\n\r\n    grid.addProperties(lightTheme);\r\n    return adaptableblotter;\r\n}\r\n\r\nclass DemoDataObject {\r\n    constructor() {\r\n        this.popupState = null;\r\n        this.didMaximizeForPopup = false;\r\n        this.currentInstrumentExpression = null;\r\n        this.currentQuickSearch = null;\r\n        this.currentTheme = \"\";\r\n        this.currentSelectedSymbol = \"\"\r\n    }\r\n}\r\n\r\nfunction maximizeWidgetWhenABPopupVisible(adaptableblotter, demoDataObject) {\r\n    adaptableblotter.AdaptableBlotterStore.TheStore.subscribe(() => {\r\n        if (demoDataObject.popupState !== adaptableblotter.AdaptableBlotterStore.TheStore.getState().Popup) {\r\n            demoDataObject.popupState = adaptableblotter.AdaptableBlotterStore.TheStore.getState().Popup;\r\n            if (demoDataObject.popupState.ScreenPopup.ShowPopup === true &&\r\n                FSBL.Clients.WindowClient.windowState !== \"maximized\") {\r\n                demoDataObject.didMaximizeForPopup = true;\r\n                FSBL.Clients.WindowClient.maximize();\r\n            }\r\n            else if (demoDataObject.popupState.ScreenPopup.ShowPopup === false &&\r\n                demoDataObject.didMaximizeForPopup) {\r\n                FSBL.Clients.WindowClient.restore();\r\n                demoDataObject.didMaximizeForPopup = false;\r\n            }\r\n        }\r\n    });\r\n}\r\n// function publishInstrumentExpressionWhenChanged(adaptableblotter, demoDataObject) {\r\n//     adaptableblotter.AdaptableBlotterStore.TheStore.subscribe(() => {\r\n//         //we first check that the state update concerns the filters\r\n//         if (adaptableblotter.AdaptableBlotterStore.TheStore.getState().Filter.ColumnFilters !== demoDataObject.currentFilters) {\r\n//             demoDataObject.currentFilters = adaptableblotter.AdaptableBlotterStore.TheStore.getState().Filter.ColumnFilters;\r\n//             //we get the expression for the column instrumentId\r\n//             let localInstrumentIdExpression = demoDataObject.currentFilters.find(x => x.ColumnId === \"instrumentId\");\r\n//             if (localInstrumentIdExpression) {\r\n//                 if (demoDataObject.currentInstrumentExpression) {\r\n//                     let localColumnValues = localInstrumentIdExpression.Filter.ColumnDisplayValuesExpressions.find(x => x.ColumnName === \"instrumentId\");\r\n//                     let localColumnValuesArray = localColumnValues ? localColumnValues.ColumnValues : [];\r\n//                     let localUserFilterUids = localInstrumentIdExpression.Filter.UserFilters.find(x => x.ColumnName === \"instrumentId\");\r\n//                     let localuserFilterUidsArray = localUserFilterUids ? localUserFilterUids.UserFilterUids : [];\r\n\r\n//                     let currentColumnValues = demoDataObject.currentInstrumentExpression.Filter.ColumnDisplayValuesExpressions.find(x => x.ColumnName === \"instrumentId\");\r\n//                     let currentColumnValuesArray = currentColumnValues ? currentColumnValues.ColumnValues : [];\r\n//                     let currentUserFilterUids = demoDataObject.currentInstrumentExpression.Filter.UserFilters.find(x => x.ColumnName === \"instrumentId\");\r\n//                     let currentuserFilterUidsArray = currentUserFilterUids ? currentUserFilterUids.UserFilterUids : [];\r\n\r\n//                     demoDataObject.currentInstrumentExpression = localInstrumentIdExpression;\r\n//                     if (!areArraysEqual(localColumnValuesArray, currentColumnValuesArray) ||\r\n//                         !areArraysEqual(localuserFilterUidsArray, currentuserFilterUidsArray)) {\r\n//                         FSBL.Clients.LinkerClient.publish({ dataType: \"instrumentExpression\", data: demoDataObject.currentInstrumentExpression });\r\n//                     }\r\n//                 }\r\n//                 else {\r\n//                     demoDataObject.currentInstrumentExpression = localInstrumentIdExpression;\r\n//                     FSBL.Clients.LinkerClient.publish({ dataType: \"instrumentExpression\", data: demoDataObject.currentInstrumentExpression });\r\n//                 }\r\n//             }\r\n//             else if (demoDataObject.currentInstrumentExpression) {\r\n//                 demoDataObject.currentInstrumentExpression = null;\r\n//                 FSBL.Clients.LinkerClient.publish({ dataType: \"instrumentExpression\", data: null });\r\n//             }\r\n//         }\r\n//     });\r\n// }\r\n\r\nfunction publishQuickSearchWhenChanged(adaptableblotter, demoDataObject) {\r\n    adaptableblotter.AdaptableBlotterStore.TheStore.subscribe(() => {\r\n        //we first check that the state update concerns the filters\r\n        if (adaptableblotter.AdaptableBlotterStore.TheStore.getState().QuickSearch.QuickSearchText !== demoDataObject.currentQuickSearch) {\r\n          alert(\"qu changed\")\r\n            demoDataObject.currentQuickSearch = adaptableblotter.AdaptableBlotterStore.TheStore.getState().QuickSearch.QuickSearchText;\r\n            FSBL.Clients.LinkerClient.publish({ dataType: \"quickSearch\", data: demoDataObject.currentQuickSearch });\r\n        }\r\n    });\r\n}\r\n\r\nfunction publishSymbolWhenSelectionChanged(grid, demoDataObject) {\r\n    grid.addEventListener('fin-selection-changed', (e) => {\r\n\r\n        if (e.detail.selections.length === 0) {\r\n            //no selection\r\n            demoDataObject.currentSelectedSymbol = \"\";\r\n            FSBL.Clients.LinkerClient.publish({ dataType: \"symbol\", data: \"\" });\r\n            return;\r\n        }\r\n\r\n        //get the first selected cell of the selections\r\n        let rowIndex = e.detail.selections[0].firstSelectedCell.y;\r\n        let row = grid.behavior.dataModel.dataSource.getRow(rowIndex);\r\n        let column = grid.behavior.getActiveColumns()[e.detail.selections[0].firstSelectedCell.x];\r\n        if (column.name === \"instrumentId\") {\r\n            let symbol = row.instrumentId;\r\n            demoDataObject.currentSelectedSymbol = symbol;\r\n            //we set the current quicksearch as well as we do not want to set the quicksearch when we select a cell\r\n            demoDataObject.currentQuickSearch = symbol;\r\n            FSBL.Clients.LinkerClient.publish({ dataType: \"symbol\", data: symbol });\r\n        }\r\n    });\r\n}\r\n\r\nfunction setEmittersWhenSelectionChanged(grid, adaptableblotter) {\r\n    grid.addEventListener('fin-selection-changed', () => {\r\n        FSBL.Clients.DataTransferClient.setEmitters({\r\n            emitters: [\r\n                {\r\n                    type: \"adaptableblotter.selectedcells\",\r\n                    data: { selectedCells: JSON.stringify(adaptableblotter.getSelectedCells().Selection) }\r\n                }\r\n            ]\r\n        })\r\n    });\r\n}\r\n\r\nfunction hypergridThemeChangeWhenAbChange(adaptableblotter, grid, demoDataObject) {\r\n    adaptableblotter.AdaptableBlotterStore.TheStore.subscribe(() => {\r\n        if (demoDataObject.themeName !== adaptableblotter.AdaptableBlotterStore.TheStore.getState().Theme.CurrentTheme) {\r\n            demoDataObject.themeName = adaptableblotter.AdaptableBlotterStore.TheStore.getState().Theme.CurrentTheme;\r\n            if (demoDataObject.themeName === \"Dark Theme\" ||\r\n                demoDataObject.themeName === \"Cyborg\" ||\r\n                demoDataObject.themeName === \"Darkly\" ||\r\n                demoDataObject.themeName === \"Superhero\") {\r\n                grid.addProperties(darkTheme);\r\n            }\r\n            else {\r\n                grid.addProperties(lightTheme);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction areArraysEqual(arr1, arr2) {\r\n    if (arr1.length !== arr2.length) {\r\n        return false;\r\n    }\r\n    return arr1.every(x => arr2.indexOf(x) !== -1);\r\n}\r\n\r\nmodule.exports.hypergridAddRow = hypergridAddRow;\r\nmodule.exports.hypergridUpdateRowFromDataSource = hypergridUpdateRowFromDataSource;\r\nmodule.exports.createGrid = createGrid;\r\nmodule.exports.initAdaptableBlotter = initAdaptableBlotter;\r\nmodule.exports.DemoDataObject = DemoDataObject;\r\nmodule.exports.maximizeWidgetWhenABPopupVisible = maximizeWidgetWhenABPopupVisible;\r\n// module.exports.publishInstrumentExpressionWhenChanged = publishInstrumentExpressionWhenChanged;\r\nmodule.exports.publishQuickSearchWhenChanged = publishQuickSearchWhenChanged;\r\nmodule.exports.hypergridThemeChangeWhenAbChange = hypergridThemeChangeWhenAbChange;\r\nmodule.exports.publishSymbolWhenSelectionChanged = publishSymbolWhenSelectionChanged;\r\nmodule.exports.setEmittersWhenSelectionChanged = setEmittersWhenSelectionChanged;"]}}},"hash":"c1e828958e48414e3b1fc593d1f62cdd","dependencyBlock":{"type":"DependenciesBlock","dependencies":[{"type":"ConstDependency","expression":"","range":[0,13],"loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":13}}},{"type":"CommonJsRequireDependency","request":"adaptableblotter/dist/adaptableblotterhypergrid-bundle.min","range":[55,115],"loc":{"start":{"line":3,"column":32},"end":{"line":3,"column":101}}},{"type":"RequireHeaderDependency","range":[47,54],"loc":{"start":{"line":3,"column":32},"end":{"line":3,"column":101}}},{"type":"CommonJsRequireDependency","request":"fin-hypergrid","range":[142,157],"loc":{"start":{"line":4,"column":16},"end":{"line":4,"column":40}}},{"type":"RequireHeaderDependency","range":[134,141],"loc":{"start":{"line":4,"column":16},"end":{"line":4,"column":40}}}],"variables":[],"blocks":[]},"source":{"_cachedSource":{"source":{"type":"ReplaceSource","replacements":[[142,156,"73",3],[134,140,"__webpack_require__",4],[55,114,"68",1],[47,53,"__webpack_require__",2],[0,12,"",0]]},"hash":"c1e828958e48414e3b1fc593d1f62cdd"}}}{"type":"NormalModule","constructor":{"request":"node_modules/babel-loader/lib/index.js??ref--9!src/demohelper.js","userRequest":"src/demohelper.js","rawRequest":"../../demohelper","loaders":[{"loader":"node_modules/babel-loader/lib/index.js","ident":"ref--9","options":{"cacheDirectory":"./.babel_cache/","presets":["react","stage-1"]}}],"resource":"src/demohelper.js","parser":{"type":"Parser"}},"identifier":"node_modules/babel-loader/lib/index.js??ref--9!src/demohelper.js","assigned":{"issuer":"node_modules/babel-loader/lib/index.js??ref--9!src/components/tradeblotter/tradeblotter.js","useSourceMap":true},"build":{"built":true,"buildTimestamp":1533762587200,"cacheable":true,"meta":{},"assets":[],"fileDependencies":["src/demohelper.js"],"contextDependencies":[],"strict":true,"warnings":[],"errors":[],"_source":{"type":"SourceMapSource","value":"\"use strict\";\n\nvar adaptableblotterhypergrid = require('adaptableblotter/dist/adaptableblotterhypergrid-bundle.min');\nvar hypergrid = require('fin-hypergrid');\n\nlet newRowTimer;\nlet newRowList = [];\n\nlet lightTheme = {\n    font: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\n    fontBold: 'bold 12px Helvetica Neue, Helvetica, Arial, sans-serif',\n    color: '#003f59',\n    backgroundColor: 'white',\n    altbackground: '#e6f2f8',\n    foregroundSelectionColor: 'white',\n    backgroundSelectionColor: 'rgba(13, 106, 146, 0.5)',\n\n    columnHeaderFont: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\n    columnHeaderColor: '#00435e',\n    columnHeaderBackgroundColor: '#d9ecf5',\n    columnHeaderForegroundSelectionColor: 'rgb(25, 25, 25)',\n    columnHeaderBackgroundSelectionColor: 'rgb(255, 220, 97)',\n\n    rowHeaderFont: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\n    rowHeaderColor: '#00435e',\n    rowHeaderBackgroundColor: '#d9ecf5',\n    rowHeaderForegroundSelectionColor: 'rgb(25, 25, 25)',\n    rowHeaderBackgroundSelectionColor: 'rgb(255, 220, 97)',\n\n    backgroundColor2: 'rgb(201, 201, 201)',\n    lineColor: '#bbdceb',\n    voffset: 0,\n    scrollbarHoverOver: 'visible',\n    scrollbarHoverOff: 'visible',\n    scrollingEnabled: true,\n\n    fixedRowAlign: 'center',\n    fixedColAlign: 'center',\n    cellPadding: 15,\n    gridLinesH: false,\n    gridLinesV: true,\n\n    defaultRowHeight: 30,\n    defaultFixedRowHeight: 15,\n    showRowNumbers: false,\n    editorActivationKeys: ['alt', 'esc'],\n    columnAutosizing: true,\n    readOnly: false\n};\n\nlet darkTheme = {\n    font: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\n    color: '#ffffff',\n    backgroundColor: '#403E3E',\n    altbackground: '#302E2E',\n    foregroundSelectionColor: '#ffffff',\n    backgroundSelectionColor: '#546465',\n\n    columnHeaderFont: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\n    columnHeaderColor: 'white',\n    columnHeaderBackgroundColor: '#07071E',\n    columnHeaderForegroundSelectionColor: 'white',\n    columnHeaderBackgroundSelectionColor: '#3D77FE',\n\n    rowHeaderFont: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\n    rowHeaderColor: 'white',\n    rowHeaderBackgroundColor: '#07071E',\n    rowHeaderForegroundSelectionColor: 'white',\n    rowHeaderBackgroundSelectionColor: '#3D77FE',\n\n    backgroundColor2: 'rgb(201, 201, 201)',\n    lineColor: 'rgb(199, 199, 199)',\n    voffset: 0,\n    scrollbarHoverOver: 'visible',\n    scrollbarHoverOff: 'visible',\n    scrollingEnabled: true,\n\n    fixedRowAlign: 'center',\n    fixedColAlign: 'center',\n    cellPadding: 15,\n    gridLinesH: false,\n    gridLinesV: false,\n\n    defaultRowHeight: 30,\n    defaultFixedRowHeight: 15,\n    showRowNumbers: false,\n    editorActivationKeys: ['alt', 'esc'],\n    columnAutosizing: true,\n    readOnly: false\n};\n\nfunction hypergridAddRow(grid, blotter, newRow) {\n    if (!newRowTimer) {\n        //we just want to avoid the data going out of index when editing it. \n        newRowTimer = setInterval(() => {\n            if (!blotter.gridHasCurrentEditValue() && newRowList.length > 0) {\n                newRowList.forEach(trade => grid.behavior.dataModel.addRow(trade));\n                newRowList.length = 0;\n                blotter.ReindexAndRepaint();\n            }\n        }, 500);\n    }\n    newRowList.push(newRow);\n}\n\nfunction hypergridUpdateRowFromDataSource(grid, blotter, updatedRow, primaryKeyColumn) {\n    let primaryKeyValue = updatedRow[primaryKeyColumn];\n    let row = grid.behavior.dataModel.dataSource.findRow(primaryKeyColumn, primaryKeyValue);\n    for (let column of grid.behavior.allColumns) {\n        row[column.name] = updatedRow[column.name];\n    }\n    //if not editing we refresh the grid\n    if (!blotter.gridHasCurrentEditValue()) {\n        blotter.ReindexAndRepaint();\n    }\n}\n\nfunction createGrid(data, blotterType) {\n    var grid = new hypergrid('#gridcontainer', { data: data, schema: getSchema(data, blotterType) });\n    grid.addProperties({ editOnKeydown: false });\n    //Set to `true` to render `0` and `false`. Otherwise these value appear as blank cells\n    grid.addProperties({ renderFalsy: true });\n    grid.localization.add('USDCurrencyFormat', new grid.localization.NumberFormatter('en-US', {\n        style: 'currency',\n        currency: 'USD',\n        maximumFractionDigits: 0\n    }));\n    grid.localization.add('PriceFormat', new grid.localization.NumberFormatter('en-US', {\n        maximumFractionDigits: 4\n    }));\n\n    var shortDateOptions = { year: 'numeric', month: 'long', day: 'numeric' };\n    grid.localization.add('shortDateFormat', new grid.localization.DateFormatter('en-EN', shortDateOptions));\n    let dateTimeoptions = {\n        year: 'numeric', month: 'numeric', day: 'numeric',\n        hour: 'numeric', minute: 'numeric', second: 'numeric',\n        hour12: false\n    };\n    grid.localization.add('dateTimeFormat', new grid.localization.DateFormatter('en-EN', dateTimeoptions));\n    return grid;\n}\n\nfunction getSchema(data, blotterType) {\n    var positionColumns = [\"instrumentId\", \"position\", \"currency\", \"currentPrice\", \"closingPrice\", \"pnl\"];\n    var priceColumns = [\"instrumentId\", \"price\", \"bidOfferSpread\", \"bid\", \"ask\", \"closingPrice\", \"changeOnDay\", \"bloombergBid\", \"bloombergAsk\"];\n    var tradeColumns = [\"tradeId\", \"instrumentId\", \"instrumentName\", \"notional\", \"deskId\", \"counterparty\", \"currency\", \"country\", \"changeOnYear\", \"price\", \"moodysRating\", \"fitchRating\", \"sandpRating\", \"tradeDate\", \"settlementDate\", \"lastUpdated\", \"lastUpdatedBy\"];\n    var columns;\n    switch (blotterType) {\n        case \"trade\":\n            columns = tradeColumns;\n            break;\n        case \"position\":\n            columns = positionColumns;\n            break;\n        case \"price\":\n            columns = priceColumns;\n            break;\n    }\n    var schema = [];\n    for (var p of columns) {\n        schema.push({ name: p, header: capitalize(p) });\n    }\n    return schema;\n}\nfunction capitalize(string) {\n    return (/[a-z]/.test(string) ? string : string.toLowerCase()).replace(/[\\s\\-_]*([^\\s\\-_])([^\\s\\-_]+)/g, replacer).replace(/[A-Z]/g, ' $&').trim();\n}\nfunction replacer(a, b, c) {\n    return b.toUpperCase() + c;\n}\n\nfunction initAdaptableBlotter(grid, blotterId, primaryKey) {\n    let adaptableblotter = new adaptableblotterhypergrid.AdaptableBlotter({\n        blotterId: blotterId,\n        primaryKey: primaryKey,\n        vendorGrid: grid,\n        userName: \"Jonathan\",\n        enableAuditLog: false,\n        enableRemoteConfigServer: false,\n        predefinedConfig: \"defaultConfig.json\",\n        adaptableBlotterContainer: \"adaptableblottercontainer\"\n    });\n\n    let origgetCell = grid.behavior.dataModel.getCell;\n    grid.behavior.dataModel.getCell = (config, declaredRendererName) => {\n        if (config.isDataRow) {\n            var y = config.dataCell.y;\n            if (y % 2) {\n                config.backgroundColor = config.altbackground;\n            }\n            if (!adaptableblotter.isColumnReadonly(config.field)) {\n                config.font = lightTheme.fontBold;\n            }\n        }\n        return origgetCell.call(grid.behavior.dataModel, config, declaredRendererName);\n    };\n\n    grid.addProperties(lightTheme);\n    return adaptableblotter;\n}\n\nclass DemoDataObject {\n    constructor() {\n        this.popupState = null;\n        this.didMaximizeForPopup = false;\n        this.currentInstrumentExpression = null;\n        this.currentQuickSearch = null;\n        this.currentTheme = \"\";\n        this.currentSelectedSymbol = \"\";\n    }\n}\n\nfunction maximizeWidgetWhenABPopupVisible(adaptableblotter, demoDataObject) {\n    adaptableblotter.AdaptableBlotterStore.TheStore.subscribe(() => {\n        if (demoDataObject.popupState !== adaptableblotter.AdaptableBlotterStore.TheStore.getState().Popup) {\n            demoDataObject.popupState = adaptableblotter.AdaptableBlotterStore.TheStore.getState().Popup;\n            if (demoDataObject.popupState.ScreenPopup.ShowPopup === true && FSBL.Clients.WindowClient.windowState !== \"maximized\") {\n                demoDataObject.didMaximizeForPopup = true;\n                FSBL.Clients.WindowClient.maximize();\n            } else if (demoDataObject.popupState.ScreenPopup.ShowPopup === false && demoDataObject.didMaximizeForPopup) {\n                FSBL.Clients.WindowClient.restore();\n                demoDataObject.didMaximizeForPopup = false;\n            }\n        }\n    });\n}\n// function publishInstrumentExpressionWhenChanged(adaptableblotter, demoDataObject) {\n//     adaptableblotter.AdaptableBlotterStore.TheStore.subscribe(() => {\n//         //we first check that the state update concerns the filters\n//         if (adaptableblotter.AdaptableBlotterStore.TheStore.getState().Filter.ColumnFilters !== demoDataObject.currentFilters) {\n//             demoDataObject.currentFilters = adaptableblotter.AdaptableBlotterStore.TheStore.getState().Filter.ColumnFilters;\n//             //we get the expression for the column instrumentId\n//             let localInstrumentIdExpression = demoDataObject.currentFilters.find(x => x.ColumnId === \"instrumentId\");\n//             if (localInstrumentIdExpression) {\n//                 if (demoDataObject.currentInstrumentExpression) {\n//                     let localColumnValues = localInstrumentIdExpression.Filter.ColumnDisplayValuesExpressions.find(x => x.ColumnName === \"instrumentId\");\n//                     let localColumnValuesArray = localColumnValues ? localColumnValues.ColumnValues : [];\n//                     let localUserFilterUids = localInstrumentIdExpression.Filter.UserFilters.find(x => x.ColumnName === \"instrumentId\");\n//                     let localuserFilterUidsArray = localUserFilterUids ? localUserFilterUids.UserFilterUids : [];\n\n//                     let currentColumnValues = demoDataObject.currentInstrumentExpression.Filter.ColumnDisplayValuesExpressions.find(x => x.ColumnName === \"instrumentId\");\n//                     let currentColumnValuesArray = currentColumnValues ? currentColumnValues.ColumnValues : [];\n//                     let currentUserFilterUids = demoDataObject.currentInstrumentExpression.Filter.UserFilters.find(x => x.ColumnName === \"instrumentId\");\n//                     let currentuserFilterUidsArray = currentUserFilterUids ? currentUserFilterUids.UserFilterUids : [];\n\n//                     demoDataObject.currentInstrumentExpression = localInstrumentIdExpression;\n//                     if (!areArraysEqual(localColumnValuesArray, currentColumnValuesArray) ||\n//                         !areArraysEqual(localuserFilterUidsArray, currentuserFilterUidsArray)) {\n//                         FSBL.Clients.LinkerClient.publish({ dataType: \"instrumentExpression\", data: demoDataObject.currentInstrumentExpression });\n//                     }\n//                 }\n//                 else {\n//                     demoDataObject.currentInstrumentExpression = localInstrumentIdExpression;\n//                     FSBL.Clients.LinkerClient.publish({ dataType: \"instrumentExpression\", data: demoDataObject.currentInstrumentExpression });\n//                 }\n//             }\n//             else if (demoDataObject.currentInstrumentExpression) {\n//                 demoDataObject.currentInstrumentExpression = null;\n//                 FSBL.Clients.LinkerClient.publish({ dataType: \"instrumentExpression\", data: null });\n//             }\n//         }\n//     });\n// }\n\nfunction publishQuickSearchWhenChanged(adaptableblotter, demoDataObject) {\n    adaptableblotter.AdaptableBlotterStore.TheStore.subscribe(() => {\n        //we first check that the state update concerns the filters\n        alert(\"Hello world\");\n        if (adaptableblotter.AdaptableBlotterStore.TheStore.getState().QuickSearch.QuickSearchText !== demoDataObject.currentQuickSearch) {\n            alert(\"qu changed\");\n            demoDataObject.currentQuickSearch = adaptableblotter.AdaptableBlotterStore.TheStore.getState().QuickSearch.QuickSearchText;\n            FSBL.Clients.LinkerClient.publish({ dataType: \"quickSearch\", data: demoDataObject.currentQuickSearch });\n        }\n    });\n}\n\nfunction publishSymbolWhenSelectionChanged(grid, demoDataObject) {\n    grid.addEventListener('fin-selection-changed', e => {\n\n        if (e.detail.selections.length === 0) {\n            //no selection\n            demoDataObject.currentSelectedSymbol = \"\";\n            FSBL.Clients.LinkerClient.publish({ dataType: \"symbol\", data: \"\" });\n            return;\n        }\n\n        //get the first selected cell of the selections\n        let rowIndex = e.detail.selections[0].firstSelectedCell.y;\n        let row = grid.behavior.dataModel.dataSource.getRow(rowIndex);\n        let column = grid.behavior.getActiveColumns()[e.detail.selections[0].firstSelectedCell.x];\n        if (column.name === \"instrumentId\") {\n            let symbol = row.instrumentId;\n            demoDataObject.currentSelectedSymbol = symbol;\n            //we set the current quicksearch as well as we do not want to set the quicksearch when we select a cell\n            demoDataObject.currentQuickSearch = symbol;\n            FSBL.Clients.LinkerClient.publish({ dataType: \"symbol\", data: symbol });\n        }\n    });\n}\n\nfunction setEmittersWhenSelectionChanged(grid, adaptableblotter) {\n    grid.addEventListener('fin-selection-changed', () => {\n        FSBL.Clients.DataTransferClient.setEmitters({\n            emitters: [{\n                type: \"adaptableblotter.selectedcells\",\n                data: { selectedCells: JSON.stringify(adaptableblotter.getSelectedCells().Selection) }\n            }]\n        });\n    });\n}\n\nfunction hypergridThemeChangeWhenAbChange(adaptableblotter, grid, demoDataObject) {\n    adaptableblotter.AdaptableBlotterStore.TheStore.subscribe(() => {\n        if (demoDataObject.themeName !== adaptableblotter.AdaptableBlotterStore.TheStore.getState().Theme.CurrentTheme) {\n            demoDataObject.themeName = adaptableblotter.AdaptableBlotterStore.TheStore.getState().Theme.CurrentTheme;\n            if (demoDataObject.themeName === \"Dark Theme\" || demoDataObject.themeName === \"Cyborg\" || demoDataObject.themeName === \"Darkly\" || demoDataObject.themeName === \"Superhero\") {\n                grid.addProperties(darkTheme);\n            } else {\n                grid.addProperties(lightTheme);\n            }\n        }\n    });\n}\n\nfunction areArraysEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    return arr1.every(x => arr2.indexOf(x) !== -1);\n}\n\nmodule.exports.hypergridAddRow = hypergridAddRow;\nmodule.exports.hypergridUpdateRowFromDataSource = hypergridUpdateRowFromDataSource;\nmodule.exports.createGrid = createGrid;\nmodule.exports.initAdaptableBlotter = initAdaptableBlotter;\nmodule.exports.DemoDataObject = DemoDataObject;\nmodule.exports.maximizeWidgetWhenABPopupVisible = maximizeWidgetWhenABPopupVisible;\n// module.exports.publishInstrumentExpressionWhenChanged = publishInstrumentExpressionWhenChanged;\nmodule.exports.publishQuickSearchWhenChanged = publishQuickSearchWhenChanged;\nmodule.exports.hypergridThemeChangeWhenAbChange = hypergridThemeChangeWhenAbChange;\nmodule.exports.publishSymbolWhenSelectionChanged = publishSymbolWhenSelectionChanged;\nmodule.exports.setEmittersWhenSelectionChanged = setEmittersWhenSelectionChanged;","name":"node_modules/babel-loader/lib/index.js??ref--9!C:/code/finsemble-adaptableblotterdemo/src/demohelper.js","sourceMap":{"version":3,"sources":["C:\\code\\finsemble-adaptableblotterdemo\\src\\demohelper.js"],"names":["adaptableblotterhypergrid","require","hypergrid","newRowTimer","newRowList","lightTheme","font","fontBold","color","backgroundColor","altbackground","foregroundSelectionColor","backgroundSelectionColor","columnHeaderFont","columnHeaderColor","columnHeaderBackgroundColor","columnHeaderForegroundSelectionColor","columnHeaderBackgroundSelectionColor","rowHeaderFont","rowHeaderColor","rowHeaderBackgroundColor","rowHeaderForegroundSelectionColor","rowHeaderBackgroundSelectionColor","backgroundColor2","lineColor","voffset","scrollbarHoverOver","scrollbarHoverOff","scrollingEnabled","fixedRowAlign","fixedColAlign","cellPadding","gridLinesH","gridLinesV","defaultRowHeight","defaultFixedRowHeight","showRowNumbers","editorActivationKeys","columnAutosizing","readOnly","darkTheme","hypergridAddRow","grid","blotter","newRow","setInterval","gridHasCurrentEditValue","length","forEach","trade","behavior","dataModel","addRow","ReindexAndRepaint","push","hypergridUpdateRowFromDataSource","updatedRow","primaryKeyColumn","primaryKeyValue","row","dataSource","findRow","column","allColumns","name","createGrid","data","blotterType","schema","getSchema","addProperties","editOnKeydown","renderFalsy","localization","add","NumberFormatter","style","currency","maximumFractionDigits","shortDateOptions","year","month","day","DateFormatter","dateTimeoptions","hour","minute","second","hour12","positionColumns","priceColumns","tradeColumns","columns","p","header","capitalize","string","test","toLowerCase","replace","replacer","trim","a","b","c","toUpperCase","initAdaptableBlotter","blotterId","primaryKey","adaptableblotter","AdaptableBlotter","vendorGrid","userName","enableAuditLog","enableRemoteConfigServer","predefinedConfig","adaptableBlotterContainer","origgetCell","getCell","config","declaredRendererName","isDataRow","y","dataCell","isColumnReadonly","field","call","DemoDataObject","constructor","popupState","didMaximizeForPopup","currentInstrumentExpression","currentQuickSearch","currentTheme","currentSelectedSymbol","maximizeWidgetWhenABPopupVisible","demoDataObject","AdaptableBlotterStore","TheStore","subscribe","getState","Popup","ScreenPopup","ShowPopup","FSBL","Clients","WindowClient","windowState","maximize","restore","publishQuickSearchWhenChanged","alert","QuickSearch","QuickSearchText","LinkerClient","publish","dataType","publishSymbolWhenSelectionChanged","addEventListener","e","detail","selections","rowIndex","firstSelectedCell","getRow","getActiveColumns","x","symbol","instrumentId","setEmittersWhenSelectionChanged","DataTransferClient","setEmitters","emitters","type","selectedCells","JSON","stringify","getSelectedCells","Selection","hypergridThemeChangeWhenAbChange","themeName","Theme","CurrentTheme","areArraysEqual","arr1","arr2","every","indexOf","module","exports"],"mappings":"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","file":"demohelper.js","sourceRoot":"C:/Users/adaptabletools/AppData/Local/OpenFin","sourcesContent":["\"use strict\";\r\n\r\nvar adaptableblotterhypergrid = require('adaptableblotter/dist/adaptableblotterhypergrid-bundle.min');\r\nvar hypergrid = require('fin-hypergrid');\r\n\r\nlet newRowTimer;\r\nlet newRowList = [];\r\n\r\nlet lightTheme = {\r\n    font: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\r\n    fontBold: 'bold 12px Helvetica Neue, Helvetica, Arial, sans-serif',\r\n    color: '#003f59',\r\n    backgroundColor: 'white',\r\n    altbackground: '#e6f2f8',\r\n    foregroundSelectionColor: 'white',\r\n    backgroundSelectionColor: 'rgba(13, 106, 146, 0.5)',\r\n\r\n    columnHeaderFont: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\r\n    columnHeaderColor: '#00435e',\r\n    columnHeaderBackgroundColor: '#d9ecf5',\r\n    columnHeaderForegroundSelectionColor: 'rgb(25, 25, 25)',\r\n    columnHeaderBackgroundSelectionColor: 'rgb(255, 220, 97)',\r\n\r\n    rowHeaderFont: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\r\n    rowHeaderColor: '#00435e',\r\n    rowHeaderBackgroundColor: '#d9ecf5',\r\n    rowHeaderForegroundSelectionColor: 'rgb(25, 25, 25)',\r\n    rowHeaderBackgroundSelectionColor: 'rgb(255, 220, 97)',\r\n\r\n    backgroundColor2: 'rgb(201, 201, 201)',\r\n    lineColor: '#bbdceb',\r\n    voffset: 0,\r\n    scrollbarHoverOver: 'visible',\r\n    scrollbarHoverOff: 'visible',\r\n    scrollingEnabled: true,\r\n\r\n    fixedRowAlign: 'center',\r\n    fixedColAlign: 'center',\r\n    cellPadding: 15,\r\n    gridLinesH: false,\r\n    gridLinesV: true,\r\n\r\n    defaultRowHeight: 30,\r\n    defaultFixedRowHeight: 15,\r\n    showRowNumbers: false,\r\n    editorActivationKeys: ['alt', 'esc'],\r\n    columnAutosizing: true,\r\n    readOnly: false\r\n};\r\n\r\nlet darkTheme = {\r\n    font: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\r\n    color: '#ffffff',\r\n    backgroundColor: '#403E3E',\r\n    altbackground: '#302E2E',\r\n    foregroundSelectionColor: '#ffffff',\r\n    backgroundSelectionColor: '#546465',\r\n\r\n    columnHeaderFont: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\r\n    columnHeaderColor: 'white',\r\n    columnHeaderBackgroundColor: '#07071E',\r\n    columnHeaderForegroundSelectionColor: 'white',\r\n    columnHeaderBackgroundSelectionColor: '#3D77FE',\r\n\r\n    rowHeaderFont: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\r\n    rowHeaderColor: 'white',\r\n    rowHeaderBackgroundColor: '#07071E',\r\n    rowHeaderForegroundSelectionColor: 'white',\r\n    rowHeaderBackgroundSelectionColor: '#3D77FE',\r\n\r\n    backgroundColor2: 'rgb(201, 201, 201)',\r\n    lineColor: 'rgb(199, 199, 199)',\r\n    voffset: 0,\r\n    scrollbarHoverOver: 'visible',\r\n    scrollbarHoverOff: 'visible',\r\n    scrollingEnabled: true,\r\n\r\n    fixedRowAlign: 'center',\r\n    fixedColAlign: 'center',\r\n    cellPadding: 15,\r\n    gridLinesH: false,\r\n    gridLinesV: false,\r\n\r\n    defaultRowHeight: 30,\r\n    defaultFixedRowHeight: 15,\r\n    showRowNumbers: false,\r\n    editorActivationKeys: ['alt', 'esc'],\r\n    columnAutosizing: true,\r\n    readOnly: false\r\n};\r\n\r\nfunction hypergridAddRow(grid, blotter, newRow) {\r\n    if (!newRowTimer) {\r\n        //we just want to avoid the data going out of index when editing it. \r\n        newRowTimer = setInterval(() => {\r\n            if (!blotter.gridHasCurrentEditValue() && newRowList.length > 0) {\r\n                newRowList.forEach(trade => grid.behavior.dataModel.addRow(trade));\r\n                newRowList.length = 0;\r\n                blotter.ReindexAndRepaint();\r\n            }\r\n        }, 500);\r\n    }\r\n    newRowList.push(newRow);\r\n}\r\n\r\nfunction hypergridUpdateRowFromDataSource(grid, blotter, updatedRow, primaryKeyColumn) {\r\n    let primaryKeyValue = updatedRow[primaryKeyColumn];\r\n    let row = grid.behavior.dataModel.dataSource.findRow(primaryKeyColumn, primaryKeyValue);\r\n    for (let column of grid.behavior.allColumns) {\r\n        row[column.name] = updatedRow[column.name];\r\n    }\r\n    //if not editing we refresh the grid\r\n    if (!blotter.gridHasCurrentEditValue()) {\r\n        blotter.ReindexAndRepaint();\r\n    }\r\n}\r\n\r\nfunction createGrid(data, blotterType) {\r\n    var grid = new hypergrid('#gridcontainer', { data: data, schema: getSchema(data, blotterType) });\r\n    grid.addProperties({ editOnKeydown: false });\r\n    //Set to `true` to render `0` and `false`. Otherwise these value appear as blank cells\r\n    grid.addProperties({ renderFalsy: true });\r\n    grid.localization.add('USDCurrencyFormat', new grid.localization.NumberFormatter('en-US', {\r\n        style: 'currency',\r\n        currency: 'USD',\r\n        maximumFractionDigits: 0\r\n    }));\r\n    grid.localization.add('PriceFormat', new grid.localization.NumberFormatter('en-US', {\r\n        maximumFractionDigits: 4\r\n    }));\r\n\r\n    var shortDateOptions = { year: 'numeric', month: 'long', day: 'numeric' };\r\n    grid.localization.add('shortDateFormat', new grid.localization.DateFormatter('en-EN', shortDateOptions));\r\n    let dateTimeoptions = {\r\n        year: 'numeric', month: 'numeric', day: 'numeric',\r\n        hour: 'numeric', minute: 'numeric', second: 'numeric',\r\n        hour12: false\r\n    };\r\n    grid.localization.add('dateTimeFormat', new grid.localization.DateFormatter('en-EN', dateTimeoptions));\r\n    return grid;\r\n}\r\n\r\nfunction getSchema(data, blotterType) {\r\n    var positionColumns = [\r\n        \"instrumentId\",\r\n        \"position\",\r\n        \"currency\",\r\n        \"currentPrice\",\r\n        \"closingPrice\",\r\n        \"pnl\"\r\n    ];\r\n    var priceColumns = [\r\n        \"instrumentId\",\r\n        \"price\",\r\n        \"bidOfferSpread\",\r\n        \"bid\",\r\n        \"ask\",\r\n        \"closingPrice\",\r\n        \"changeOnDay\",\r\n        \"bloombergBid\",\r\n        \"bloombergAsk\",\r\n    ];\r\n    var tradeColumns = [\r\n        \"tradeId\",\r\n        \"instrumentId\",\r\n        \"instrumentName\",\r\n        \"notional\",\r\n        \"deskId\",\r\n        \"counterparty\",\r\n        \"currency\",\r\n        \"country\",\r\n        \"changeOnYear\",\r\n        \"price\",\r\n        \"moodysRating\",\r\n        \"fitchRating\",\r\n        \"sandpRating\",\r\n        \"tradeDate\",\r\n        \"settlementDate\",\r\n        \"lastUpdated\",\r\n        \"lastUpdatedBy\"\r\n    ];\r\n    var columns;\r\n    switch (blotterType) {\r\n        case \"trade\":\r\n            columns = tradeColumns;\r\n            break;\r\n        case \"position\":\r\n            columns = positionColumns;\r\n            break;\r\n        case \"price\":\r\n            columns = priceColumns;\r\n            break;\r\n    }\r\n    var schema = [];\r\n    for (var p of columns) {\r\n        schema.push({ name: p, header: capitalize(p) });\r\n    }\r\n    return schema;\r\n}\r\nfunction capitalize(string) {\r\n    return (/[a-z]/.test(string) ? string : string.toLowerCase())\r\n        .replace(/[\\s\\-_]*([^\\s\\-_])([^\\s\\-_]+)/g, replacer)\r\n        .replace(/[A-Z]/g, ' $&')\r\n        .trim();\r\n}\r\nfunction replacer(a, b, c) {\r\n    return b.toUpperCase() + c;\r\n}\r\n\r\nfunction initAdaptableBlotter(grid, blotterId, primaryKey) {\r\n    let adaptableblotter = new adaptableblotterhypergrid.AdaptableBlotter({\r\n        blotterId: blotterId,\r\n        primaryKey: primaryKey,\r\n        vendorGrid: grid,\r\n        userName: \"Jonathan\",\r\n        enableAuditLog: false,\r\n        enableRemoteConfigServer: false,\r\n        predefinedConfig: \"defaultConfig.json\",\r\n        adaptableBlotterContainer: \"adaptableblottercontainer\"\r\n    });\r\n\r\n    let origgetCell = grid.behavior.dataModel.getCell;\r\n    grid.behavior.dataModel.getCell = (config, declaredRendererName) => {\r\n        if (config.isDataRow) {\r\n            var y = config.dataCell.y;\r\n            if (y % 2) {\r\n                config.backgroundColor = config.altbackground;\r\n            }\r\n            if (!adaptableblotter.isColumnReadonly(config.field)) {\r\n                config.font = lightTheme.fontBold;\r\n            }\r\n        }\r\n        return origgetCell.call(grid.behavior.dataModel, config, declaredRendererName);\r\n    };\r\n\r\n    grid.addProperties(lightTheme);\r\n    return adaptableblotter;\r\n}\r\n\r\nclass DemoDataObject {\r\n    constructor() {\r\n        this.popupState = null;\r\n        this.didMaximizeForPopup = false;\r\n        this.currentInstrumentExpression = null;\r\n        this.currentQuickSearch = null;\r\n        this.currentTheme = \"\";\r\n        this.currentSelectedSymbol = \"\"\r\n    }\r\n}\r\n\r\nfunction maximizeWidgetWhenABPopupVisible(adaptableblotter, demoDataObject) {\r\n    adaptableblotter.AdaptableBlotterStore.TheStore.subscribe(() => {\r\n        if (demoDataObject.popupState !== adaptableblotter.AdaptableBlotterStore.TheStore.getState().Popup) {\r\n            demoDataObject.popupState = adaptableblotter.AdaptableBlotterStore.TheStore.getState().Popup;\r\n            if (demoDataObject.popupState.ScreenPopup.ShowPopup === true &&\r\n                FSBL.Clients.WindowClient.windowState !== \"maximized\") {\r\n                demoDataObject.didMaximizeForPopup = true;\r\n                FSBL.Clients.WindowClient.maximize();\r\n            }\r\n            else if (demoDataObject.popupState.ScreenPopup.ShowPopup === false &&\r\n                demoDataObject.didMaximizeForPopup) {\r\n                FSBL.Clients.WindowClient.restore();\r\n                demoDataObject.didMaximizeForPopup = false;\r\n            }\r\n        }\r\n    });\r\n}\r\n// function publishInstrumentExpressionWhenChanged(adaptableblotter, demoDataObject) {\r\n//     adaptableblotter.AdaptableBlotterStore.TheStore.subscribe(() => {\r\n//         //we first check that the state update concerns the filters\r\n//         if (adaptableblotter.AdaptableBlotterStore.TheStore.getState().Filter.ColumnFilters !== demoDataObject.currentFilters) {\r\n//             demoDataObject.currentFilters = adaptableblotter.AdaptableBlotterStore.TheStore.getState().Filter.ColumnFilters;\r\n//             //we get the expression for the column instrumentId\r\n//             let localInstrumentIdExpression = demoDataObject.currentFilters.find(x => x.ColumnId === \"instrumentId\");\r\n//             if (localInstrumentIdExpression) {\r\n//                 if (demoDataObject.currentInstrumentExpression) {\r\n//                     let localColumnValues = localInstrumentIdExpression.Filter.ColumnDisplayValuesExpressions.find(x => x.ColumnName === \"instrumentId\");\r\n//                     let localColumnValuesArray = localColumnValues ? localColumnValues.ColumnValues : [];\r\n//                     let localUserFilterUids = localInstrumentIdExpression.Filter.UserFilters.find(x => x.ColumnName === \"instrumentId\");\r\n//                     let localuserFilterUidsArray = localUserFilterUids ? localUserFilterUids.UserFilterUids : [];\r\n\r\n//                     let currentColumnValues = demoDataObject.currentInstrumentExpression.Filter.ColumnDisplayValuesExpressions.find(x => x.ColumnName === \"instrumentId\");\r\n//                     let currentColumnValuesArray = currentColumnValues ? currentColumnValues.ColumnValues : [];\r\n//                     let currentUserFilterUids = demoDataObject.currentInstrumentExpression.Filter.UserFilters.find(x => x.ColumnName === \"instrumentId\");\r\n//                     let currentuserFilterUidsArray = currentUserFilterUids ? currentUserFilterUids.UserFilterUids : [];\r\n\r\n//                     demoDataObject.currentInstrumentExpression = localInstrumentIdExpression;\r\n//                     if (!areArraysEqual(localColumnValuesArray, currentColumnValuesArray) ||\r\n//                         !areArraysEqual(localuserFilterUidsArray, currentuserFilterUidsArray)) {\r\n//                         FSBL.Clients.LinkerClient.publish({ dataType: \"instrumentExpression\", data: demoDataObject.currentInstrumentExpression });\r\n//                     }\r\n//                 }\r\n//                 else {\r\n//                     demoDataObject.currentInstrumentExpression = localInstrumentIdExpression;\r\n//                     FSBL.Clients.LinkerClient.publish({ dataType: \"instrumentExpression\", data: demoDataObject.currentInstrumentExpression });\r\n//                 }\r\n//             }\r\n//             else if (demoDataObject.currentInstrumentExpression) {\r\n//                 demoDataObject.currentInstrumentExpression = null;\r\n//                 FSBL.Clients.LinkerClient.publish({ dataType: \"instrumentExpression\", data: null });\r\n//             }\r\n//         }\r\n//     });\r\n// }\r\n\r\nfunction publishQuickSearchWhenChanged(adaptableblotter, demoDataObject) {\r\n    adaptableblotter.AdaptableBlotterStore.TheStore.subscribe(() => {\r\n        //we first check that the state update concerns the filters\r\n        alert(\"Hello world\")\r\n        if (adaptableblotter.AdaptableBlotterStore.TheStore.getState().QuickSearch.QuickSearchText !== demoDataObject.currentQuickSearch) {\r\n          alert(\"qu changed\")\r\n            demoDataObject.currentQuickSearch = adaptableblotter.AdaptableBlotterStore.TheStore.getState().QuickSearch.QuickSearchText;\r\n            FSBL.Clients.LinkerClient.publish({ dataType: \"quickSearch\", data: demoDataObject.currentQuickSearch });\r\n        }\r\n    });\r\n}\r\n\r\nfunction publishSymbolWhenSelectionChanged(grid, demoDataObject) {\r\n    grid.addEventListener('fin-selection-changed', (e) => {\r\n\r\n        if (e.detail.selections.length === 0) {\r\n            //no selection\r\n            demoDataObject.currentSelectedSymbol = \"\";\r\n            FSBL.Clients.LinkerClient.publish({ dataType: \"symbol\", data: \"\" });\r\n            return;\r\n        }\r\n\r\n        //get the first selected cell of the selections\r\n        let rowIndex = e.detail.selections[0].firstSelectedCell.y;\r\n        let row = grid.behavior.dataModel.dataSource.getRow(rowIndex);\r\n        let column = grid.behavior.getActiveColumns()[e.detail.selections[0].firstSelectedCell.x];\r\n        if (column.name === \"instrumentId\") {\r\n            let symbol = row.instrumentId;\r\n            demoDataObject.currentSelectedSymbol = symbol;\r\n            //we set the current quicksearch as well as we do not want to set the quicksearch when we select a cell\r\n            demoDataObject.currentQuickSearch = symbol;\r\n            FSBL.Clients.LinkerClient.publish({ dataType: \"symbol\", data: symbol });\r\n        }\r\n    });\r\n}\r\n\r\nfunction setEmittersWhenSelectionChanged(grid, adaptableblotter) {\r\n    grid.addEventListener('fin-selection-changed', () => {\r\n        FSBL.Clients.DataTransferClient.setEmitters({\r\n            emitters: [\r\n                {\r\n                    type: \"adaptableblotter.selectedcells\",\r\n                    data: { selectedCells: JSON.stringify(adaptableblotter.getSelectedCells().Selection) }\r\n                }\r\n            ]\r\n        })\r\n    });\r\n}\r\n\r\nfunction hypergridThemeChangeWhenAbChange(adaptableblotter, grid, demoDataObject) {\r\n    adaptableblotter.AdaptableBlotterStore.TheStore.subscribe(() => {\r\n        if (demoDataObject.themeName !== adaptableblotter.AdaptableBlotterStore.TheStore.getState().Theme.CurrentTheme) {\r\n            demoDataObject.themeName = adaptableblotter.AdaptableBlotterStore.TheStore.getState().Theme.CurrentTheme;\r\n            if (demoDataObject.themeName === \"Dark Theme\" ||\r\n                demoDataObject.themeName === \"Cyborg\" ||\r\n                demoDataObject.themeName === \"Darkly\" ||\r\n                demoDataObject.themeName === \"Superhero\") {\r\n                grid.addProperties(darkTheme);\r\n            }\r\n            else {\r\n                grid.addProperties(lightTheme);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction areArraysEqual(arr1, arr2) {\r\n    if (arr1.length !== arr2.length) {\r\n        return false;\r\n    }\r\n    return arr1.every(x => arr2.indexOf(x) !== -1);\r\n}\r\n\r\nmodule.exports.hypergridAddRow = hypergridAddRow;\r\nmodule.exports.hypergridUpdateRowFromDataSource = hypergridUpdateRowFromDataSource;\r\nmodule.exports.createGrid = createGrid;\r\nmodule.exports.initAdaptableBlotter = initAdaptableBlotter;\r\nmodule.exports.DemoDataObject = DemoDataObject;\r\nmodule.exports.maximizeWidgetWhenABPopupVisible = maximizeWidgetWhenABPopupVisible;\r\n// module.exports.publishInstrumentExpressionWhenChanged = publishInstrumentExpressionWhenChanged;\r\nmodule.exports.publishQuickSearchWhenChanged = publishQuickSearchWhenChanged;\r\nmodule.exports.hypergridThemeChangeWhenAbChange = hypergridThemeChangeWhenAbChange;\r\nmodule.exports.publishSymbolWhenSelectionChanged = publishSymbolWhenSelectionChanged;\r\nmodule.exports.setEmittersWhenSelectionChanged = setEmittersWhenSelectionChanged;"]}}},"hash":"8f8d30bd731e760b6af6f2371cfcdcf5","dependencyBlock":{"type":"DependenciesBlock","dependencies":[{"type":"ConstDependency","expression":"","range":[0,13],"loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":13}}},{"type":"CommonJsRequireDependency","request":"adaptableblotter/dist/adaptableblotterhypergrid-bundle.min","range":[55,115],"loc":{"start":{"line":3,"column":32},"end":{"line":3,"column":101}}},{"type":"RequireHeaderDependency","range":[47,54],"loc":{"start":{"line":3,"column":32},"end":{"line":3,"column":101}}},{"type":"CommonJsRequireDependency","request":"fin-hypergrid","range":[142,157],"loc":{"start":{"line":4,"column":16},"end":{"line":4,"column":40}}},{"type":"RequireHeaderDependency","range":[134,141],"loc":{"start":{"line":4,"column":16},"end":{"line":4,"column":40}}}],"variables":[],"blocks":[]},"source":{"_cachedSource":{"source":{"type":"ReplaceSource","replacements":[[142,156,"73",3],[134,140,"__webpack_require__",4],[55,114,"68",1],[47,53,"__webpack_require__",2],[0,12,"",0]]},"hash":"8f8d30bd731e760b6af6f2371cfcdcf5"}}}{"type":"NormalModule","constructor":{"request":"node_modules/babel-loader/lib/index.js??ref--9!src/demohelper.js","userRequest":"src/demohelper.js","rawRequest":"../../demohelper","loaders":[{"loader":"node_modules/babel-loader/lib/index.js","ident":"ref--9","options":{"cacheDirectory":"./.babel_cache/","presets":["react","stage-1"]}}],"resource":"src/demohelper.js","parser":{"type":"Parser"}},"identifier":"node_modules/babel-loader/lib/index.js??ref--9!src/demohelper.js","assigned":{"issuer":"node_modules/babel-loader/lib/index.js??ref--9!src/components/blotterreceiver/blotterreceiver.js","useSourceMap":true},"build":{"built":true,"buildTimestamp":1533762787518,"cacheable":true,"meta":{},"assets":[],"fileDependencies":["src/demohelper.js"],"contextDependencies":[],"strict":true,"warnings":[],"errors":[],"_source":{"type":"SourceMapSource","value":"\"use strict\";\n\nvar adaptableblotterhypergrid = require('adaptableblotter/dist/adaptableblotterhypergrid-bundle.min');\nvar hypergrid = require('fin-hypergrid');\n\nlet newRowTimer;\nlet newRowList = [];\n\nlet lightTheme = {\n    font: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\n    fontBold: 'bold 12px Helvetica Neue, Helvetica, Arial, sans-serif',\n    color: '#003f59',\n    backgroundColor: 'white',\n    altbackground: '#e6f2f8',\n    foregroundSelectionColor: 'white',\n    backgroundSelectionColor: 'rgba(13, 106, 146, 0.5)',\n\n    columnHeaderFont: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\n    columnHeaderColor: '#00435e',\n    columnHeaderBackgroundColor: '#d9ecf5',\n    columnHeaderForegroundSelectionColor: 'rgb(25, 25, 25)',\n    columnHeaderBackgroundSelectionColor: 'rgb(255, 220, 97)',\n\n    rowHeaderFont: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\n    rowHeaderColor: '#00435e',\n    rowHeaderBackgroundColor: '#d9ecf5',\n    rowHeaderForegroundSelectionColor: 'rgb(25, 25, 25)',\n    rowHeaderBackgroundSelectionColor: 'rgb(255, 220, 97)',\n\n    backgroundColor2: 'rgb(201, 201, 201)',\n    lineColor: '#bbdceb',\n    voffset: 0,\n    scrollbarHoverOver: 'visible',\n    scrollbarHoverOff: 'visible',\n    scrollingEnabled: true,\n\n    fixedRowAlign: 'center',\n    fixedColAlign: 'center',\n    cellPadding: 15,\n    gridLinesH: false,\n    gridLinesV: true,\n\n    defaultRowHeight: 30,\n    defaultFixedRowHeight: 15,\n    showRowNumbers: false,\n    editorActivationKeys: ['alt', 'esc'],\n    columnAutosizing: true,\n    readOnly: false\n};\n\nlet darkTheme = {\n    font: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\n    color: '#ffffff',\n    backgroundColor: '#403E3E',\n    altbackground: '#302E2E',\n    foregroundSelectionColor: '#ffffff',\n    backgroundSelectionColor: '#546465',\n\n    columnHeaderFont: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\n    columnHeaderColor: 'white',\n    columnHeaderBackgroundColor: '#07071E',\n    columnHeaderForegroundSelectionColor: 'white',\n    columnHeaderBackgroundSelectionColor: '#3D77FE',\n\n    rowHeaderFont: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\n    rowHeaderColor: 'white',\n    rowHeaderBackgroundColor: '#07071E',\n    rowHeaderForegroundSelectionColor: 'white',\n    rowHeaderBackgroundSelectionColor: '#3D77FE',\n\n    backgroundColor2: 'rgb(201, 201, 201)',\n    lineColor: 'rgb(199, 199, 199)',\n    voffset: 0,\n    scrollbarHoverOver: 'visible',\n    scrollbarHoverOff: 'visible',\n    scrollingEnabled: true,\n\n    fixedRowAlign: 'center',\n    fixedColAlign: 'center',\n    cellPadding: 15,\n    gridLinesH: false,\n    gridLinesV: false,\n\n    defaultRowHeight: 30,\n    defaultFixedRowHeight: 15,\n    showRowNumbers: false,\n    editorActivationKeys: ['alt', 'esc'],\n    columnAutosizing: true,\n    readOnly: false\n};\n\nfunction hypergridAddRow(grid, blotter, newRow) {\n    if (!newRowTimer) {\n        //we just want to avoid the data going out of index when editing it. \n        newRowTimer = setInterval(() => {\n            if (!blotter.gridHasCurrentEditValue() && newRowList.length > 0) {\n                newRowList.forEach(trade => grid.behavior.dataModel.addRow(trade));\n                newRowList.length = 0;\n                blotter.ReindexAndRepaint();\n            }\n        }, 500);\n    }\n    newRowList.push(newRow);\n}\n\nfunction hypergridUpdateRowFromDataSource(grid, blotter, updatedRow, primaryKeyColumn) {\n    let primaryKeyValue = updatedRow[primaryKeyColumn];\n    let row = grid.behavior.dataModel.dataSource.findRow(primaryKeyColumn, primaryKeyValue);\n    for (let column of grid.behavior.allColumns) {\n        row[column.name] = updatedRow[column.name];\n    }\n    //if not editing we refresh the grid\n    if (!blotter.gridHasCurrentEditValue()) {\n        blotter.ReindexAndRepaint();\n    }\n}\n\nfunction createGrid(data, blotterType) {\n    var grid = new hypergrid('#gridcontainer', { data: data, schema: getSchema(data, blotterType) });\n    grid.addProperties({ editOnKeydown: false });\n    //Set to `true` to render `0` and `false`. Otherwise these value appear as blank cells\n    grid.addProperties({ renderFalsy: true });\n    grid.localization.add('USDCurrencyFormat', new grid.localization.NumberFormatter('en-US', {\n        style: 'currency',\n        currency: 'USD',\n        maximumFractionDigits: 0\n    }));\n    grid.localization.add('PriceFormat', new grid.localization.NumberFormatter('en-US', {\n        maximumFractionDigits: 4\n    }));\n\n    var shortDateOptions = { year: 'numeric', month: 'long', day: 'numeric' };\n    grid.localization.add('shortDateFormat', new grid.localization.DateFormatter('en-EN', shortDateOptions));\n    let dateTimeoptions = {\n        year: 'numeric', month: 'numeric', day: 'numeric',\n        hour: 'numeric', minute: 'numeric', second: 'numeric',\n        hour12: false\n    };\n    grid.localization.add('dateTimeFormat', new grid.localization.DateFormatter('en-EN', dateTimeoptions));\n    return grid;\n}\n\nfunction getSchema(data, blotterType) {\n    var positionColumns = [\"instrumentId\", \"position\", \"currency\", \"currentPrice\", \"closingPrice\", \"pnl\"];\n    var priceColumns = [\"instrumentId\", \"price\", \"bidOfferSpread\", \"bid\", \"ask\", \"closingPrice\", \"changeOnDay\", \"bloombergBid\", \"bloombergAsk\"];\n    var tradeColumns = [\"tradeId\", \"instrumentId\", \"instrumentName\", \"notional\", \"deskId\", \"counterparty\", \"currency\", \"country\", \"changeOnYear\", \"price\", \"moodysRating\", \"fitchRating\", \"sandpRating\", \"tradeDate\", \"settlementDate\", \"lastUpdated\", \"lastUpdatedBy\"];\n    var columns;\n    switch (blotterType) {\n        case \"trade\":\n            columns = tradeColumns;\n            break;\n        case \"position\":\n            columns = positionColumns;\n            break;\n        case \"price\":\n            columns = priceColumns;\n            break;\n    }\n    var schema = [];\n    for (var p of columns) {\n        schema.push({ name: p, header: capitalize(p) });\n    }\n    return schema;\n}\nfunction capitalize(string) {\n    return (/[a-z]/.test(string) ? string : string.toLowerCase()).replace(/[\\s\\-_]*([^\\s\\-_])([^\\s\\-_]+)/g, replacer).replace(/[A-Z]/g, ' $&').trim();\n}\nfunction replacer(a, b, c) {\n    return b.toUpperCase() + c;\n}\n\nfunction initAdaptableBlotter(grid, blotterId, primaryKey) {\n    let adaptableblotter = new adaptableblotterhypergrid.AdaptableBlotter({\n        blotterId: blotterId,\n        primaryKey: primaryKey,\n        vendorGrid: grid,\n        userName: \"Jonathan\",\n        enableAuditLog: false,\n        enableRemoteConfigServer: false,\n        predefinedConfig: \"defaultConfig.json\",\n        adaptableBlotterContainer: \"adaptableblottercontainer\"\n    });\n\n    let origgetCell = grid.behavior.dataModel.getCell;\n    grid.behavior.dataModel.getCell = (config, declaredRendererName) => {\n        if (config.isDataRow) {\n            var y = config.dataCell.y;\n            if (y % 2) {\n                config.backgroundColor = config.altbackground;\n            }\n            if (!adaptableblotter.isColumnReadonly(config.field)) {\n                config.font = lightTheme.fontBold;\n            }\n        }\n        return origgetCell.call(grid.behavior.dataModel, config, declaredRendererName);\n    };\n\n    grid.addProperties(lightTheme);\n    return adaptableblotter;\n}\n\nclass DemoDataObject {\n    constructor() {\n        this.popupState = null;\n        this.didMaximizeForPopup = false;\n        this.currentInstrumentExpression = null;\n        this.currentQuickSearch = null;\n        this.currentTheme = \"\";\n        this.currentSelectedSymbol = \"\";\n    }\n}\n\nfunction maximizeWidgetWhenABPopupVisible(adaptableblotter, demoDataObject) {\n    adaptableblotter.AdaptableBlotterStore.TheStore.subscribe(() => {\n        if (demoDataObject.popupState !== adaptableblotter.AdaptableBlotterStore.TheStore.getState().Popup) {\n            demoDataObject.popupState = adaptableblotter.AdaptableBlotterStore.TheStore.getState().Popup;\n            if (demoDataObject.popupState.ScreenPopup.ShowPopup === true && FSBL.Clients.WindowClient.windowState !== \"maximized\") {\n                demoDataObject.didMaximizeForPopup = true;\n                FSBL.Clients.WindowClient.maximize();\n            } else if (demoDataObject.popupState.ScreenPopup.ShowPopup === false && demoDataObject.didMaximizeForPopup) {\n                FSBL.Clients.WindowClient.restore();\n                demoDataObject.didMaximizeForPopup = false;\n            }\n        }\n    });\n}\n// function publishInstrumentExpressionWhenChanged(adaptableblotter, demoDataObject) {\n//     adaptableblotter.AdaptableBlotterStore.TheStore.subscribe(() => {\n//         //we first check that the state update concerns the filters\n//         if (adaptableblotter.AdaptableBlotterStore.TheStore.getState().Filter.ColumnFilters !== demoDataObject.currentFilters) {\n//             demoDataObject.currentFilters = adaptableblotter.AdaptableBlotterStore.TheStore.getState().Filter.ColumnFilters;\n//             //we get the expression for the column instrumentId\n//             let localInstrumentIdExpression = demoDataObject.currentFilters.find(x => x.ColumnId === \"instrumentId\");\n//             if (localInstrumentIdExpression) {\n//                 if (demoDataObject.currentInstrumentExpression) {\n//                     let localColumnValues = localInstrumentIdExpression.Filter.ColumnDisplayValuesExpressions.find(x => x.ColumnName === \"instrumentId\");\n//                     let localColumnValuesArray = localColumnValues ? localColumnValues.ColumnValues : [];\n//                     let localUserFilterUids = localInstrumentIdExpression.Filter.UserFilters.find(x => x.ColumnName === \"instrumentId\");\n//                     let localuserFilterUidsArray = localUserFilterUids ? localUserFilterUids.UserFilterUids : [];\n\n//                     let currentColumnValues = demoDataObject.currentInstrumentExpression.Filter.ColumnDisplayValuesExpressions.find(x => x.ColumnName === \"instrumentId\");\n//                     let currentColumnValuesArray = currentColumnValues ? currentColumnValues.ColumnValues : [];\n//                     let currentUserFilterUids = demoDataObject.currentInstrumentExpression.Filter.UserFilters.find(x => x.ColumnName === \"instrumentId\");\n//                     let currentuserFilterUidsArray = currentUserFilterUids ? currentUserFilterUids.UserFilterUids : [];\n\n//                     demoDataObject.currentInstrumentExpression = localInstrumentIdExpression;\n//                     if (!areArraysEqual(localColumnValuesArray, currentColumnValuesArray) ||\n//                         !areArraysEqual(localuserFilterUidsArray, currentuserFilterUidsArray)) {\n//                         FSBL.Clients.LinkerClient.publish({ dataType: \"instrumentExpression\", data: demoDataObject.currentInstrumentExpression });\n//                     }\n//                 }\n//                 else {\n//                     demoDataObject.currentInstrumentExpression = localInstrumentIdExpression;\n//                     FSBL.Clients.LinkerClient.publish({ dataType: \"instrumentExpression\", data: demoDataObject.currentInstrumentExpression });\n//                 }\n//             }\n//             else if (demoDataObject.currentInstrumentExpression) {\n//                 demoDataObject.currentInstrumentExpression = null;\n//                 FSBL.Clients.LinkerClient.publish({ dataType: \"instrumentExpression\", data: null });\n//             }\n//         }\n//     });\n// }\n\nfunction publishQuickSearchWhenChanged(adaptableblotter, demoDataObject) {\n    adaptableblotter.AdaptableBlotterStore.TheStore.subscribe(() => {\n        //we first check that the state update concerns the filters\n        if (adaptableblotter.AdaptableBlotterStore.TheStore.getState().QuickSearch.QuickSearchText !== demoDataObject.currentQuickSearch) {\n            alert(\"qu changed\");\n            demoDataObject.currentQuickSearch = adaptableblotter.AdaptableBlotterStore.TheStore.getState().QuickSearch.QuickSearchText;\n            FSBL.Clients.LinkerClient.publish({ dataType: \"quickSearch\", data: demoDataObject.currentQuickSearch });\n        }\n    });\n}\n\nfunction publishSymbolWhenSelectionChanged(grid, demoDataObject) {\n    grid.addEventListener('fin-selection-changed', e => {\n\n        if (e.detail.selections.length === 0) {\n            //no selection\n            demoDataObject.currentSelectedSymbol = \"\";\n            FSBL.Clients.LinkerClient.publish({ dataType: \"symbol\", data: \"\" });\n            return;\n        }\n\n        //get the first selected cell of the selections\n        let rowIndex = e.detail.selections[0].firstSelectedCell.y;\n        let row = grid.behavior.dataModel.dataSource.getRow(rowIndex);\n        let column = grid.behavior.getActiveColumns()[e.detail.selections[0].firstSelectedCell.x];\n        if (column.name === \"instrumentId\") {\n            let symbol = row.instrumentId;\n            demoDataObject.currentSelectedSymbol = symbol;\n            //we set the current quicksearch as well as we do not want to set the quicksearch when we select a cell\n            demoDataObject.currentQuickSearch = symbol;\n            FSBL.Clients.LinkerClient.publish({ dataType: \"symbol\", data: symbol });\n        }\n    });\n}\n\nfunction setEmittersWhenSelectionChanged(grid, adaptableblotter) {\n    grid.addEventListener('fin-selection-changed', () => {\n        FSBL.Clients.DataTransferClient.setEmitters({\n            emitters: [{\n                type: \"adaptableblotter.selectedcells\",\n                data: { selectedCells: JSON.stringify(adaptableblotter.getSelectedCells().Selection) }\n            }]\n        });\n    });\n}\n\nfunction hypergridThemeChangeWhenAbChange(adaptableblotter, grid, demoDataObject) {\n    adaptableblotter.AdaptableBlotterStore.TheStore.subscribe(() => {\n        if (demoDataObject.themeName !== adaptableblotter.AdaptableBlotterStore.TheStore.getState().Theme.CurrentTheme) {\n            demoDataObject.themeName = adaptableblotter.AdaptableBlotterStore.TheStore.getState().Theme.CurrentTheme;\n            if (demoDataObject.themeName === \"Dark Theme\" || demoDataObject.themeName === \"Cyborg\" || demoDataObject.themeName === \"Darkly\" || demoDataObject.themeName === \"Superhero\") {\n                grid.addProperties(darkTheme);\n            } else {\n                grid.addProperties(lightTheme);\n            }\n        }\n    });\n}\n\nfunction areArraysEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    return arr1.every(x => arr2.indexOf(x) !== -1);\n}\n\nmodule.exports.hypergridAddRow = hypergridAddRow;\nmodule.exports.hypergridUpdateRowFromDataSource = hypergridUpdateRowFromDataSource;\nmodule.exports.createGrid = createGrid;\nmodule.exports.initAdaptableBlotter = initAdaptableBlotter;\nmodule.exports.DemoDataObject = DemoDataObject;\nmodule.exports.maximizeWidgetWhenABPopupVisible = maximizeWidgetWhenABPopupVisible;\n// module.exports.publishInstrumentExpressionWhenChanged = publishInstrumentExpressionWhenChanged;\nmodule.exports.publishQuickSearchWhenChanged = publishQuickSearchWhenChanged;\nmodule.exports.hypergridThemeChangeWhenAbChange = hypergridThemeChangeWhenAbChange;\nmodule.exports.publishSymbolWhenSelectionChanged = publishSymbolWhenSelectionChanged;\nmodule.exports.setEmittersWhenSelectionChanged = setEmittersWhenSelectionChanged;","name":"node_modules/babel-loader/lib/index.js??ref--9!C:/code/finsemble-adaptableblotterdemo/src/demohelper.js","sourceMap":{"version":3,"sources":["C:\\code\\finsemble-adaptableblotterdemo\\src\\demohelper.js"],"names":["adaptableblotterhypergrid","require","hypergrid","newRowTimer","newRowList","lightTheme","font","fontBold","color","backgroundColor","altbackground","foregroundSelectionColor","backgroundSelectionColor","columnHeaderFont","columnHeaderColor","columnHeaderBackgroundColor","columnHeaderForegroundSelectionColor","columnHeaderBackgroundSelectionColor","rowHeaderFont","rowHeaderColor","rowHeaderBackgroundColor","rowHeaderForegroundSelectionColor","rowHeaderBackgroundSelectionColor","backgroundColor2","lineColor","voffset","scrollbarHoverOver","scrollbarHoverOff","scrollingEnabled","fixedRowAlign","fixedColAlign","cellPadding","gridLinesH","gridLinesV","defaultRowHeight","defaultFixedRowHeight","showRowNumbers","editorActivationKeys","columnAutosizing","readOnly","darkTheme","hypergridAddRow","grid","blotter","newRow","setInterval","gridHasCurrentEditValue","length","forEach","trade","behavior","dataModel","addRow","ReindexAndRepaint","push","hypergridUpdateRowFromDataSource","updatedRow","primaryKeyColumn","primaryKeyValue","row","dataSource","findRow","column","allColumns","name","createGrid","data","blotterType","schema","getSchema","addProperties","editOnKeydown","renderFalsy","localization","add","NumberFormatter","style","currency","maximumFractionDigits","shortDateOptions","year","month","day","DateFormatter","dateTimeoptions","hour","minute","second","hour12","positionColumns","priceColumns","tradeColumns","columns","p","header","capitalize","string","test","toLowerCase","replace","replacer","trim","a","b","c","toUpperCase","initAdaptableBlotter","blotterId","primaryKey","adaptableblotter","AdaptableBlotter","vendorGrid","userName","enableAuditLog","enableRemoteConfigServer","predefinedConfig","adaptableBlotterContainer","origgetCell","getCell","config","declaredRendererName","isDataRow","y","dataCell","isColumnReadonly","field","call","DemoDataObject","constructor","popupState","didMaximizeForPopup","currentInstrumentExpression","currentQuickSearch","currentTheme","currentSelectedSymbol","maximizeWidgetWhenABPopupVisible","demoDataObject","AdaptableBlotterStore","TheStore","subscribe","getState","Popup","ScreenPopup","ShowPopup","FSBL","Clients","WindowClient","windowState","maximize","restore","publishQuickSearchWhenChanged","QuickSearch","QuickSearchText","alert","LinkerClient","publish","dataType","publishSymbolWhenSelectionChanged","addEventListener","e","detail","selections","rowIndex","firstSelectedCell","getRow","getActiveColumns","x","symbol","instrumentId","setEmittersWhenSelectionChanged","DataTransferClient","setEmitters","emitters","type","selectedCells","JSON","stringify","getSelectedCells","Selection","hypergridThemeChangeWhenAbChange","themeName","Theme","CurrentTheme","areArraysEqual","arr1","arr2","every","indexOf","module","exports"],"mappings":"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","file":"demohelper.js","sourceRoot":"C:/Users/adaptabletools/AppData/Local/OpenFin","sourcesContent":["\"use strict\";\r\n\r\nvar adaptableblotterhypergrid = require('adaptableblotter/dist/adaptableblotterhypergrid-bundle.min');\r\nvar hypergrid = require('fin-hypergrid');\r\n\r\nlet newRowTimer;\r\nlet newRowList = [];\r\n\r\nlet lightTheme = {\r\n    font: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\r\n    fontBold: 'bold 12px Helvetica Neue, Helvetica, Arial, sans-serif',\r\n    color: '#003f59',\r\n    backgroundColor: 'white',\r\n    altbackground: '#e6f2f8',\r\n    foregroundSelectionColor: 'white',\r\n    backgroundSelectionColor: 'rgba(13, 106, 146, 0.5)',\r\n\r\n    columnHeaderFont: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\r\n    columnHeaderColor: '#00435e',\r\n    columnHeaderBackgroundColor: '#d9ecf5',\r\n    columnHeaderForegroundSelectionColor: 'rgb(25, 25, 25)',\r\n    columnHeaderBackgroundSelectionColor: 'rgb(255, 220, 97)',\r\n\r\n    rowHeaderFont: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\r\n    rowHeaderColor: '#00435e',\r\n    rowHeaderBackgroundColor: '#d9ecf5',\r\n    rowHeaderForegroundSelectionColor: 'rgb(25, 25, 25)',\r\n    rowHeaderBackgroundSelectionColor: 'rgb(255, 220, 97)',\r\n\r\n    backgroundColor2: 'rgb(201, 201, 201)',\r\n    lineColor: '#bbdceb',\r\n    voffset: 0,\r\n    scrollbarHoverOver: 'visible',\r\n    scrollbarHoverOff: 'visible',\r\n    scrollingEnabled: true,\r\n\r\n    fixedRowAlign: 'center',\r\n    fixedColAlign: 'center',\r\n    cellPadding: 15,\r\n    gridLinesH: false,\r\n    gridLinesV: true,\r\n\r\n    defaultRowHeight: 30,\r\n    defaultFixedRowHeight: 15,\r\n    showRowNumbers: false,\r\n    editorActivationKeys: ['alt', 'esc'],\r\n    columnAutosizing: true,\r\n    readOnly: false\r\n};\r\n\r\nlet darkTheme = {\r\n    font: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\r\n    color: '#ffffff',\r\n    backgroundColor: '#403E3E',\r\n    altbackground: '#302E2E',\r\n    foregroundSelectionColor: '#ffffff',\r\n    backgroundSelectionColor: '#546465',\r\n\r\n    columnHeaderFont: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\r\n    columnHeaderColor: 'white',\r\n    columnHeaderBackgroundColor: '#07071E',\r\n    columnHeaderForegroundSelectionColor: 'white',\r\n    columnHeaderBackgroundSelectionColor: '#3D77FE',\r\n\r\n    rowHeaderFont: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\r\n    rowHeaderColor: 'white',\r\n    rowHeaderBackgroundColor: '#07071E',\r\n    rowHeaderForegroundSelectionColor: 'white',\r\n    rowHeaderBackgroundSelectionColor: '#3D77FE',\r\n\r\n    backgroundColor2: 'rgb(201, 201, 201)',\r\n    lineColor: 'rgb(199, 199, 199)',\r\n    voffset: 0,\r\n    scrollbarHoverOver: 'visible',\r\n    scrollbarHoverOff: 'visible',\r\n    scrollingEnabled: true,\r\n\r\n    fixedRowAlign: 'center',\r\n    fixedColAlign: 'center',\r\n    cellPadding: 15,\r\n    gridLinesH: false,\r\n    gridLinesV: false,\r\n\r\n    defaultRowHeight: 30,\r\n    defaultFixedRowHeight: 15,\r\n    showRowNumbers: false,\r\n    editorActivationKeys: ['alt', 'esc'],\r\n    columnAutosizing: true,\r\n    readOnly: false\r\n};\r\n\r\nfunction hypergridAddRow(grid, blotter, newRow) {\r\n    if (!newRowTimer) {\r\n        //we just want to avoid the data going out of index when editing it. \r\n        newRowTimer = setInterval(() => {\r\n            if (!blotter.gridHasCurrentEditValue() && newRowList.length > 0) {\r\n                newRowList.forEach(trade => grid.behavior.dataModel.addRow(trade));\r\n                newRowList.length = 0;\r\n                blotter.ReindexAndRepaint();\r\n            }\r\n        }, 500);\r\n    }\r\n    newRowList.push(newRow);\r\n}\r\n\r\nfunction hypergridUpdateRowFromDataSource(grid, blotter, updatedRow, primaryKeyColumn) {\r\n    let primaryKeyValue = updatedRow[primaryKeyColumn];\r\n    let row = grid.behavior.dataModel.dataSource.findRow(primaryKeyColumn, primaryKeyValue);\r\n    for (let column of grid.behavior.allColumns) {\r\n        row[column.name] = updatedRow[column.name];\r\n    }\r\n    //if not editing we refresh the grid\r\n    if (!blotter.gridHasCurrentEditValue()) {\r\n        blotter.ReindexAndRepaint();\r\n    }\r\n}\r\n\r\nfunction createGrid(data, blotterType) {\r\n    var grid = new hypergrid('#gridcontainer', { data: data, schema: getSchema(data, blotterType) });\r\n    grid.addProperties({ editOnKeydown: false });\r\n    //Set to `true` to render `0` and `false`. Otherwise these value appear as blank cells\r\n    grid.addProperties({ renderFalsy: true });\r\n    grid.localization.add('USDCurrencyFormat', new grid.localization.NumberFormatter('en-US', {\r\n        style: 'currency',\r\n        currency: 'USD',\r\n        maximumFractionDigits: 0\r\n    }));\r\n    grid.localization.add('PriceFormat', new grid.localization.NumberFormatter('en-US', {\r\n        maximumFractionDigits: 4\r\n    }));\r\n\r\n    var shortDateOptions = { year: 'numeric', month: 'long', day: 'numeric' };\r\n    grid.localization.add('shortDateFormat', new grid.localization.DateFormatter('en-EN', shortDateOptions));\r\n    let dateTimeoptions = {\r\n        year: 'numeric', month: 'numeric', day: 'numeric',\r\n        hour: 'numeric', minute: 'numeric', second: 'numeric',\r\n        hour12: false\r\n    };\r\n    grid.localization.add('dateTimeFormat', new grid.localization.DateFormatter('en-EN', dateTimeoptions));\r\n    return grid;\r\n}\r\n\r\nfunction getSchema(data, blotterType) {\r\n    var positionColumns = [\r\n        \"instrumentId\",\r\n        \"position\",\r\n        \"currency\",\r\n        \"currentPrice\",\r\n        \"closingPrice\",\r\n        \"pnl\"\r\n    ];\r\n    var priceColumns = [\r\n        \"instrumentId\",\r\n        \"price\",\r\n        \"bidOfferSpread\",\r\n        \"bid\",\r\n        \"ask\",\r\n        \"closingPrice\",\r\n        \"changeOnDay\",\r\n        \"bloombergBid\",\r\n        \"bloombergAsk\",\r\n    ];\r\n    var tradeColumns = [\r\n        \"tradeId\",\r\n        \"instrumentId\",\r\n        \"instrumentName\",\r\n        \"notional\",\r\n        \"deskId\",\r\n        \"counterparty\",\r\n        \"currency\",\r\n        \"country\",\r\n        \"changeOnYear\",\r\n        \"price\",\r\n        \"moodysRating\",\r\n        \"fitchRating\",\r\n        \"sandpRating\",\r\n        \"tradeDate\",\r\n        \"settlementDate\",\r\n        \"lastUpdated\",\r\n        \"lastUpdatedBy\"\r\n    ];\r\n    var columns;\r\n    switch (blotterType) {\r\n        case \"trade\":\r\n            columns = tradeColumns;\r\n            break;\r\n        case \"position\":\r\n            columns = positionColumns;\r\n            break;\r\n        case \"price\":\r\n            columns = priceColumns;\r\n            break;\r\n    }\r\n    var schema = [];\r\n    for (var p of columns) {\r\n        schema.push({ name: p, header: capitalize(p) });\r\n    }\r\n    return schema;\r\n}\r\nfunction capitalize(string) {\r\n    return (/[a-z]/.test(string) ? string : string.toLowerCase())\r\n        .replace(/[\\s\\-_]*([^\\s\\-_])([^\\s\\-_]+)/g, replacer)\r\n        .replace(/[A-Z]/g, ' $&')\r\n        .trim();\r\n}\r\nfunction replacer(a, b, c) {\r\n    return b.toUpperCase() + c;\r\n}\r\n\r\nfunction initAdaptableBlotter(grid, blotterId, primaryKey) {\r\n    let adaptableblotter = new adaptableblotterhypergrid.AdaptableBlotter({\r\n        blotterId: blotterId,\r\n        primaryKey: primaryKey,\r\n        vendorGrid: grid,\r\n        userName: \"Jonathan\",\r\n        enableAuditLog: false,\r\n        enableRemoteConfigServer: false,\r\n        predefinedConfig: \"defaultConfig.json\",\r\n        adaptableBlotterContainer: \"adaptableblottercontainer\"\r\n    });\r\n\r\n    let origgetCell = grid.behavior.dataModel.getCell;\r\n    grid.behavior.dataModel.getCell = (config, declaredRendererName) => {\r\n        if (config.isDataRow) {\r\n            var y = config.dataCell.y;\r\n            if (y % 2) {\r\n                config.backgroundColor = config.altbackground;\r\n            }\r\n            if (!adaptableblotter.isColumnReadonly(config.field)) {\r\n                config.font = lightTheme.fontBold;\r\n            }\r\n        }\r\n        return origgetCell.call(grid.behavior.dataModel, config, declaredRendererName);\r\n    };\r\n\r\n    grid.addProperties(lightTheme);\r\n    return adaptableblotter;\r\n}\r\n\r\nclass DemoDataObject {\r\n    constructor() {\r\n        this.popupState = null;\r\n        this.didMaximizeForPopup = false;\r\n        this.currentInstrumentExpression = null;\r\n        this.currentQuickSearch = null;\r\n        this.currentTheme = \"\";\r\n        this.currentSelectedSymbol = \"\"\r\n    }\r\n}\r\n\r\nfunction maximizeWidgetWhenABPopupVisible(adaptableblotter, demoDataObject) {\r\n    adaptableblotter.AdaptableBlotterStore.TheStore.subscribe(() => {\r\n        if (demoDataObject.popupState !== adaptableblotter.AdaptableBlotterStore.TheStore.getState().Popup) {\r\n            demoDataObject.popupState = adaptableblotter.AdaptableBlotterStore.TheStore.getState().Popup;\r\n            if (demoDataObject.popupState.ScreenPopup.ShowPopup === true &&\r\n                FSBL.Clients.WindowClient.windowState !== \"maximized\") {\r\n                demoDataObject.didMaximizeForPopup = true;\r\n                FSBL.Clients.WindowClient.maximize();\r\n            }\r\n            else if (demoDataObject.popupState.ScreenPopup.ShowPopup === false &&\r\n                demoDataObject.didMaximizeForPopup) {\r\n                FSBL.Clients.WindowClient.restore();\r\n                demoDataObject.didMaximizeForPopup = false;\r\n            }\r\n        }\r\n    });\r\n}\r\n// function publishInstrumentExpressionWhenChanged(adaptableblotter, demoDataObject) {\r\n//     adaptableblotter.AdaptableBlotterStore.TheStore.subscribe(() => {\r\n//         //we first check that the state update concerns the filters\r\n//         if (adaptableblotter.AdaptableBlotterStore.TheStore.getState().Filter.ColumnFilters !== demoDataObject.currentFilters) {\r\n//             demoDataObject.currentFilters = adaptableblotter.AdaptableBlotterStore.TheStore.getState().Filter.ColumnFilters;\r\n//             //we get the expression for the column instrumentId\r\n//             let localInstrumentIdExpression = demoDataObject.currentFilters.find(x => x.ColumnId === \"instrumentId\");\r\n//             if (localInstrumentIdExpression) {\r\n//                 if (demoDataObject.currentInstrumentExpression) {\r\n//                     let localColumnValues = localInstrumentIdExpression.Filter.ColumnDisplayValuesExpressions.find(x => x.ColumnName === \"instrumentId\");\r\n//                     let localColumnValuesArray = localColumnValues ? localColumnValues.ColumnValues : [];\r\n//                     let localUserFilterUids = localInstrumentIdExpression.Filter.UserFilters.find(x => x.ColumnName === \"instrumentId\");\r\n//                     let localuserFilterUidsArray = localUserFilterUids ? localUserFilterUids.UserFilterUids : [];\r\n\r\n//                     let currentColumnValues = demoDataObject.currentInstrumentExpression.Filter.ColumnDisplayValuesExpressions.find(x => x.ColumnName === \"instrumentId\");\r\n//                     let currentColumnValuesArray = currentColumnValues ? currentColumnValues.ColumnValues : [];\r\n//                     let currentUserFilterUids = demoDataObject.currentInstrumentExpression.Filter.UserFilters.find(x => x.ColumnName === \"instrumentId\");\r\n//                     let currentuserFilterUidsArray = currentUserFilterUids ? currentUserFilterUids.UserFilterUids : [];\r\n\r\n//                     demoDataObject.currentInstrumentExpression = localInstrumentIdExpression;\r\n//                     if (!areArraysEqual(localColumnValuesArray, currentColumnValuesArray) ||\r\n//                         !areArraysEqual(localuserFilterUidsArray, currentuserFilterUidsArray)) {\r\n//                         FSBL.Clients.LinkerClient.publish({ dataType: \"instrumentExpression\", data: demoDataObject.currentInstrumentExpression });\r\n//                     }\r\n//                 }\r\n//                 else {\r\n//                     demoDataObject.currentInstrumentExpression = localInstrumentIdExpression;\r\n//                     FSBL.Clients.LinkerClient.publish({ dataType: \"instrumentExpression\", data: demoDataObject.currentInstrumentExpression });\r\n//                 }\r\n//             }\r\n//             else if (demoDataObject.currentInstrumentExpression) {\r\n//                 demoDataObject.currentInstrumentExpression = null;\r\n//                 FSBL.Clients.LinkerClient.publish({ dataType: \"instrumentExpression\", data: null });\r\n//             }\r\n//         }\r\n//     });\r\n// }\r\n\r\nfunction publishQuickSearchWhenChanged(adaptableblotter, demoDataObject) {\r\n    adaptableblotter.AdaptableBlotterStore.TheStore.subscribe(() => {\r\n        //we first check that the state update concerns the filters\r\n        if (adaptableblotter.AdaptableBlotterStore.TheStore.getState().QuickSearch.QuickSearchText !== demoDataObject.currentQuickSearch) {\r\n          alert(\"qu changed\")\r\n            demoDataObject.currentQuickSearch = adaptableblotter.AdaptableBlotterStore.TheStore.getState().QuickSearch.QuickSearchText;\r\n            FSBL.Clients.LinkerClient.publish({ dataType: \"quickSearch\", data: demoDataObject.currentQuickSearch });\r\n        }\r\n    });\r\n}\r\n\r\nfunction publishSymbolWhenSelectionChanged(grid, demoDataObject) {\r\n    grid.addEventListener('fin-selection-changed', (e) => {\r\n\r\n        if (e.detail.selections.length === 0) {\r\n            //no selection\r\n            demoDataObject.currentSelectedSymbol = \"\";\r\n            FSBL.Clients.LinkerClient.publish({ dataType: \"symbol\", data: \"\" });\r\n            return;\r\n        }\r\n\r\n        //get the first selected cell of the selections\r\n        let rowIndex = e.detail.selections[0].firstSelectedCell.y;\r\n        let row = grid.behavior.dataModel.dataSource.getRow(rowIndex);\r\n        let column = grid.behavior.getActiveColumns()[e.detail.selections[0].firstSelectedCell.x];\r\n        if (column.name === \"instrumentId\") {\r\n            let symbol = row.instrumentId;\r\n            demoDataObject.currentSelectedSymbol = symbol;\r\n            //we set the current quicksearch as well as we do not want to set the quicksearch when we select a cell\r\n            demoDataObject.currentQuickSearch = symbol;\r\n            FSBL.Clients.LinkerClient.publish({ dataType: \"symbol\", data: symbol });\r\n        }\r\n    });\r\n}\r\n\r\nfunction setEmittersWhenSelectionChanged(grid, adaptableblotter) {\r\n    grid.addEventListener('fin-selection-changed', () => {\r\n        FSBL.Clients.DataTransferClient.setEmitters({\r\n            emitters: [\r\n                {\r\n                    type: \"adaptableblotter.selectedcells\",\r\n                    data: { selectedCells: JSON.stringify(adaptableblotter.getSelectedCells().Selection) }\r\n                }\r\n            ]\r\n        })\r\n    });\r\n}\r\n\r\nfunction hypergridThemeChangeWhenAbChange(adaptableblotter, grid, demoDataObject) {\r\n    adaptableblotter.AdaptableBlotterStore.TheStore.subscribe(() => {\r\n        if (demoDataObject.themeName !== adaptableblotter.AdaptableBlotterStore.TheStore.getState().Theme.CurrentTheme) {\r\n            demoDataObject.themeName = adaptableblotter.AdaptableBlotterStore.TheStore.getState().Theme.CurrentTheme;\r\n            if (demoDataObject.themeName === \"Dark Theme\" ||\r\n                demoDataObject.themeName === \"Cyborg\" ||\r\n                demoDataObject.themeName === \"Darkly\" ||\r\n                demoDataObject.themeName === \"Superhero\") {\r\n                grid.addProperties(darkTheme);\r\n            }\r\n            else {\r\n                grid.addProperties(lightTheme);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction areArraysEqual(arr1, arr2) {\r\n    if (arr1.length !== arr2.length) {\r\n        return false;\r\n    }\r\n    return arr1.every(x => arr2.indexOf(x) !== -1);\r\n}\r\n\r\nmodule.exports.hypergridAddRow = hypergridAddRow;\r\nmodule.exports.hypergridUpdateRowFromDataSource = hypergridUpdateRowFromDataSource;\r\nmodule.exports.createGrid = createGrid;\r\nmodule.exports.initAdaptableBlotter = initAdaptableBlotter;\r\nmodule.exports.DemoDataObject = DemoDataObject;\r\nmodule.exports.maximizeWidgetWhenABPopupVisible = maximizeWidgetWhenABPopupVisible;\r\n// module.exports.publishInstrumentExpressionWhenChanged = publishInstrumentExpressionWhenChanged;\r\nmodule.exports.publishQuickSearchWhenChanged = publishQuickSearchWhenChanged;\r\nmodule.exports.hypergridThemeChangeWhenAbChange = hypergridThemeChangeWhenAbChange;\r\nmodule.exports.publishSymbolWhenSelectionChanged = publishSymbolWhenSelectionChanged;\r\nmodule.exports.setEmittersWhenSelectionChanged = setEmittersWhenSelectionChanged;"]}}},"hash":"c1e828958e48414e3b1fc593d1f62cdd","dependencyBlock":{"type":"DependenciesBlock","dependencies":[{"type":"ConstDependency","expression":"","range":[0,13],"loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":13}}},{"type":"CommonJsRequireDependency","request":"adaptableblotter/dist/adaptableblotterhypergrid-bundle.min","range":[55,115],"loc":{"start":{"line":3,"column":32},"end":{"line":3,"column":101}}},{"type":"RequireHeaderDependency","range":[47,54],"loc":{"start":{"line":3,"column":32},"end":{"line":3,"column":101}}},{"type":"CommonJsRequireDependency","request":"fin-hypergrid","range":[142,157],"loc":{"start":{"line":4,"column":16},"end":{"line":4,"column":40}}},{"type":"RequireHeaderDependency","range":[134,141],"loc":{"start":{"line":4,"column":16},"end":{"line":4,"column":40}}}],"variables":[],"blocks":[]},"source":{"_cachedSource":{"source":{"type":"ReplaceSource","replacements":[[142,156,"73",3],[134,140,"__webpack_require__",4],[55,114,"68",1],[47,53,"__webpack_require__",2],[0,12,"",0]]},"hash":"c1e828958e48414e3b1fc593d1f62cdd"}}}{"type":"NormalModule","constructor":{"request":"node_modules/babel-loader/lib/index.js??ref--9!src/demohelper.js","userRequest":"src/demohelper.js","rawRequest":"../../demohelper","loaders":[{"loader":"node_modules/babel-loader/lib/index.js","ident":"ref--9","options":{"cacheDirectory":"./.babel_cache/","presets":["react","stage-1"]}}],"resource":"src/demohelper.js","parser":{"type":"Parser"}},"identifier":"node_modules/babel-loader/lib/index.js??ref--9!src/demohelper.js","assigned":{"issuer":"node_modules/babel-loader/lib/index.js??ref--9!src/components/blotterreceiver/blotterreceiver.js","useSourceMap":true},"build":{"built":true,"buildTimestamp":1533762986267,"cacheable":true,"meta":{},"assets":[],"fileDependencies":["src/demohelper.js"],"contextDependencies":[],"strict":true,"warnings":[],"errors":[],"_source":{"type":"SourceMapSource","value":"\"use strict\";\n\nvar adaptableblotterhypergrid = require('adaptableblotter/dist/adaptableblotterhypergrid-bundle.min');\nvar hypergrid = require('fin-hypergrid');\n\nlet newRowTimer;\nlet newRowList = [];\n\nlet lightTheme = {\n    font: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\n    fontBold: 'bold 12px Helvetica Neue, Helvetica, Arial, sans-serif',\n    color: '#003f59',\n    backgroundColor: 'white',\n    altbackground: '#e6f2f8',\n    foregroundSelectionColor: 'white',\n    backgroundSelectionColor: 'rgba(13, 106, 146, 0.5)',\n\n    columnHeaderFont: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\n    columnHeaderColor: '#00435e',\n    columnHeaderBackgroundColor: '#d9ecf5',\n    columnHeaderForegroundSelectionColor: 'rgb(25, 25, 25)',\n    columnHeaderBackgroundSelectionColor: 'rgb(255, 220, 97)',\n\n    rowHeaderFont: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\n    rowHeaderColor: '#00435e',\n    rowHeaderBackgroundColor: '#d9ecf5',\n    rowHeaderForegroundSelectionColor: 'rgb(25, 25, 25)',\n    rowHeaderBackgroundSelectionColor: 'rgb(255, 220, 97)',\n\n    backgroundColor2: 'rgb(201, 201, 201)',\n    lineColor: '#bbdceb',\n    voffset: 0,\n    scrollbarHoverOver: 'visible',\n    scrollbarHoverOff: 'visible',\n    scrollingEnabled: true,\n\n    fixedRowAlign: 'center',\n    fixedColAlign: 'center',\n    cellPadding: 15,\n    gridLinesH: false,\n    gridLinesV: true,\n\n    defaultRowHeight: 30,\n    defaultFixedRowHeight: 15,\n    showRowNumbers: false,\n    editorActivationKeys: ['alt', 'esc'],\n    columnAutosizing: true,\n    readOnly: false\n};\n\nlet darkTheme = {\n    font: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\n    color: '#ffffff',\n    backgroundColor: '#403E3E',\n    altbackground: '#302E2E',\n    foregroundSelectionColor: '#ffffff',\n    backgroundSelectionColor: '#546465',\n\n    columnHeaderFont: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\n    columnHeaderColor: 'white',\n    columnHeaderBackgroundColor: '#07071E',\n    columnHeaderForegroundSelectionColor: 'white',\n    columnHeaderBackgroundSelectionColor: '#3D77FE',\n\n    rowHeaderFont: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\n    rowHeaderColor: 'white',\n    rowHeaderBackgroundColor: '#07071E',\n    rowHeaderForegroundSelectionColor: 'white',\n    rowHeaderBackgroundSelectionColor: '#3D77FE',\n\n    backgroundColor2: 'rgb(201, 201, 201)',\n    lineColor: 'rgb(199, 199, 199)',\n    voffset: 0,\n    scrollbarHoverOver: 'visible',\n    scrollbarHoverOff: 'visible',\n    scrollingEnabled: true,\n\n    fixedRowAlign: 'center',\n    fixedColAlign: 'center',\n    cellPadding: 15,\n    gridLinesH: false,\n    gridLinesV: false,\n\n    defaultRowHeight: 30,\n    defaultFixedRowHeight: 15,\n    showRowNumbers: false,\n    editorActivationKeys: ['alt', 'esc'],\n    columnAutosizing: true,\n    readOnly: false\n};\n\nfunction hypergridAddRow(grid, blotter, newRow) {\n    if (!newRowTimer) {\n        //we just want to avoid the data going out of index when editing it. \n        newRowTimer = setInterval(() => {\n            if (!blotter.gridHasCurrentEditValue() && newRowList.length > 0) {\n                newRowList.forEach(trade => grid.behavior.dataModel.addRow(trade));\n                newRowList.length = 0;\n                blotter.ReindexAndRepaint();\n            }\n        }, 500);\n    }\n    newRowList.push(newRow);\n}\n\nfunction hypergridUpdateRowFromDataSource(grid, blotter, updatedRow, primaryKeyColumn) {\n    let primaryKeyValue = updatedRow[primaryKeyColumn];\n    let row = grid.behavior.dataModel.dataSource.findRow(primaryKeyColumn, primaryKeyValue);\n    for (let column of grid.behavior.allColumns) {\n        row[column.name] = updatedRow[column.name];\n    }\n    //if not editing we refresh the grid\n    if (!blotter.gridHasCurrentEditValue()) {\n        blotter.ReindexAndRepaint();\n    }\n}\n\nfunction createGrid(data, blotterType) {\n    var grid = new hypergrid('#gridcontainer', { data: data, schema: getSchema(data, blotterType) });\n    grid.addProperties({ editOnKeydown: false });\n    //Set to `true` to render `0` and `false`. Otherwise these value appear as blank cells\n    grid.addProperties({ renderFalsy: true });\n    grid.localization.add('USDCurrencyFormat', new grid.localization.NumberFormatter('en-US', {\n        style: 'currency',\n        currency: 'USD',\n        maximumFractionDigits: 0\n    }));\n    grid.localization.add('PriceFormat', new grid.localization.NumberFormatter('en-US', {\n        maximumFractionDigits: 4\n    }));\n\n    var shortDateOptions = { year: 'numeric', month: 'long', day: 'numeric' };\n    grid.localization.add('shortDateFormat', new grid.localization.DateFormatter('en-EN', shortDateOptions));\n    let dateTimeoptions = {\n        year: 'numeric', month: 'numeric', day: 'numeric',\n        hour: 'numeric', minute: 'numeric', second: 'numeric',\n        hour12: false\n    };\n    grid.localization.add('dateTimeFormat', new grid.localization.DateFormatter('en-EN', dateTimeoptions));\n    return grid;\n}\n\nfunction getSchema(data, blotterType) {\n    var positionColumns = [\"instrumentId\", \"position\", \"currency\", \"currentPrice\", \"closingPrice\", \"pnl\"];\n    var priceColumns = [\"instrumentId\", \"price\", \"bidOfferSpread\", \"bid\", \"ask\", \"closingPrice\", \"changeOnDay\", \"bloombergBid\", \"bloombergAsk\"];\n    var tradeColumns = [\"tradeId\", \"instrumentId\", \"instrumentName\", \"notional\", \"deskId\", \"counterparty\", \"currency\", \"country\", \"changeOnYear\", \"price\", \"moodysRating\", \"fitchRating\", \"sandpRating\", \"tradeDate\", \"settlementDate\", \"lastUpdated\", \"lastUpdatedBy\"];\n    var columns;\n    switch (blotterType) {\n        case \"trade\":\n            columns = tradeColumns;\n            break;\n        case \"position\":\n            columns = positionColumns;\n            break;\n        case \"price\":\n            columns = priceColumns;\n            break;\n    }\n    var schema = [];\n    for (var p of columns) {\n        schema.push({ name: p, header: capitalize(p) });\n    }\n    return schema;\n}\nfunction capitalize(string) {\n    return (/[a-z]/.test(string) ? string : string.toLowerCase()).replace(/[\\s\\-_]*([^\\s\\-_])([^\\s\\-_]+)/g, replacer).replace(/[A-Z]/g, ' $&').trim();\n}\nfunction replacer(a, b, c) {\n    return b.toUpperCase() + c;\n}\n\nfunction initAdaptableBlotter(grid, blotterId, primaryKey) {\n    let adaptableblotter = new adaptableblotterhypergrid.AdaptableBlotter({\n        blotterId: blotterId,\n        primaryKey: primaryKey,\n        vendorGrid: grid,\n        userName: \"Jonathan\",\n        enableAuditLog: false,\n        enableRemoteConfigServer: false,\n        predefinedConfig: \"defaultConfig.json\",\n        adaptableBlotterContainer: \"adaptableblottercontainer\"\n    });\n\n    let origgetCell = grid.behavior.dataModel.getCell;\n    grid.behavior.dataModel.getCell = (config, declaredRendererName) => {\n        if (config.isDataRow) {\n            var y = config.dataCell.y;\n            if (y % 2) {\n                config.backgroundColor = config.altbackground;\n            }\n            if (!adaptableblotter.isColumnReadonly(config.field)) {\n                config.font = lightTheme.fontBold;\n            }\n        }\n        return origgetCell.call(grid.behavior.dataModel, config, declaredRendererName);\n    };\n\n    grid.addProperties(lightTheme);\n    return adaptableblotter;\n}\n\nclass DemoDataObject {\n    constructor() {\n        this.popupState = null;\n        this.didMaximizeForPopup = false;\n        this.currentInstrumentExpression = null;\n        this.currentQuickSearch = null;\n        this.currentTheme = \"\";\n        this.currentSelectedSymbol = \"\";\n    }\n}\n\nfunction maximizeWidgetWhenABPopupVisible(adaptableblotter, demoDataObject) {\n    adaptableblotter.AdaptableBlotterStore.TheStore.subscribe(() => {\n        if (demoDataObject.popupState !== adaptableblotter.AdaptableBlotterStore.TheStore.getState().Popup) {\n            demoDataObject.popupState = adaptableblotter.AdaptableBlotterStore.TheStore.getState().Popup;\n            if (demoDataObject.popupState.ScreenPopup.ShowPopup === true && FSBL.Clients.WindowClient.windowState !== \"maximized\") {\n                demoDataObject.didMaximizeForPopup = true;\n                FSBL.Clients.WindowClient.maximize();\n            } else if (demoDataObject.popupState.ScreenPopup.ShowPopup === false && demoDataObject.didMaximizeForPopup) {\n                FSBL.Clients.WindowClient.restore();\n                demoDataObject.didMaximizeForPopup = false;\n            }\n        }\n    });\n}\n// function publishInstrumentExpressionWhenChanged(adaptableblotter, demoDataObject) {\n//     adaptableblotter.AdaptableBlotterStore.TheStore.subscribe(() => {\n//         //we first check that the state update concerns the filters\n//         if (adaptableblotter.AdaptableBlotterStore.TheStore.getState().Filter.ColumnFilters !== demoDataObject.currentFilters) {\n//             demoDataObject.currentFilters = adaptableblotter.AdaptableBlotterStore.TheStore.getState().Filter.ColumnFilters;\n//             //we get the expression for the column instrumentId\n//             let localInstrumentIdExpression = demoDataObject.currentFilters.find(x => x.ColumnId === \"instrumentId\");\n//             if (localInstrumentIdExpression) {\n//                 if (demoDataObject.currentInstrumentExpression) {\n//                     let localColumnValues = localInstrumentIdExpression.Filter.ColumnDisplayValuesExpressions.find(x => x.ColumnName === \"instrumentId\");\n//                     let localColumnValuesArray = localColumnValues ? localColumnValues.ColumnValues : [];\n//                     let localUserFilterUids = localInstrumentIdExpression.Filter.UserFilters.find(x => x.ColumnName === \"instrumentId\");\n//                     let localuserFilterUidsArray = localUserFilterUids ? localUserFilterUids.UserFilterUids : [];\n\n//                     let currentColumnValues = demoDataObject.currentInstrumentExpression.Filter.ColumnDisplayValuesExpressions.find(x => x.ColumnName === \"instrumentId\");\n//                     let currentColumnValuesArray = currentColumnValues ? currentColumnValues.ColumnValues : [];\n//                     let currentUserFilterUids = demoDataObject.currentInstrumentExpression.Filter.UserFilters.find(x => x.ColumnName === \"instrumentId\");\n//                     let currentuserFilterUidsArray = currentUserFilterUids ? currentUserFilterUids.UserFilterUids : [];\n\n//                     demoDataObject.currentInstrumentExpression = localInstrumentIdExpression;\n//                     if (!areArraysEqual(localColumnValuesArray, currentColumnValuesArray) ||\n//                         !areArraysEqual(localuserFilterUidsArray, currentuserFilterUidsArray)) {\n//                         FSBL.Clients.LinkerClient.publish({ dataType: \"instrumentExpression\", data: demoDataObject.currentInstrumentExpression });\n//                     }\n//                 }\n//                 else {\n//                     demoDataObject.currentInstrumentExpression = localInstrumentIdExpression;\n//                     FSBL.Clients.LinkerClient.publish({ dataType: \"instrumentExpression\", data: demoDataObject.currentInstrumentExpression });\n//                 }\n//             }\n//             else if (demoDataObject.currentInstrumentExpression) {\n//                 demoDataObject.currentInstrumentExpression = null;\n//                 FSBL.Clients.LinkerClient.publish({ dataType: \"instrumentExpression\", data: null });\n//             }\n//         }\n//     });\n// }\n\nfunction publishQuickSearchWhenChanged(adaptableblotter, demoDataObject) {\n    adaptableblotter.AdaptableBlotterStore.TheStore.subscribe(() => {\n        //we first check that the state update concerns the filters\n        if (adaptableblotter.AdaptableBlotterStore.TheStore.getState().QuickSearch.QuickSearchText !== demoDataObject.currentQuickSearch) {\n            demoDataObject.currentQuickSearch = adaptableblotter.AdaptableBlotterStore.TheStore.getState().QuickSearch.QuickSearchText;\n            FSBL.Clients.LinkerClient.publish({ dataType: \"quickSearch\", data: demoDataObject.currentQuickSearch });\n        }\n    });\n}\n\nfunction publishSymbolWhenSelectionChanged(grid, demoDataObject) {\n    grid.addEventListener('fin-selection-changed', e => {\n\n        if (e.detail.selections.length === 0) {\n            //no selection\n            demoDataObject.currentSelectedSymbol = \"\";\n            FSBL.Clients.LinkerClient.publish({ dataType: \"symbol\", data: \"\" });\n            return;\n        }\n\n        //get the first selected cell of the selections\n        let rowIndex = e.detail.selections[0].firstSelectedCell.y;\n        let row = grid.behavior.dataModel.dataSource.getRow(rowIndex);\n        let column = grid.behavior.getActiveColumns()[e.detail.selections[0].firstSelectedCell.x];\n        if (column.name === \"instrumentId\") {\n            let symbol = row.instrumentId;\n            demoDataObject.currentSelectedSymbol = symbol;\n            //we set the current quicksearch as well as we do not want to set the quicksearch when we select a cell\n            demoDataObject.currentQuickSearch = symbol;\n            FSBL.Clients.LinkerClient.publish({ dataType: \"symbol\", data: symbol });\n        }\n    });\n}\n\nfunction setEmittersWhenSelectionChanged(grid, adaptableblotter) {\n    grid.addEventListener('fin-selection-changed', () => {\n        FSBL.Clients.DataTransferClient.setEmitters({\n            emitters: [{\n                type: \"adaptableblotter.selectedcells\",\n                data: { selectedCells: JSON.stringify(adaptableblotter.getSelectedCells().Selection) }\n            }]\n        });\n    });\n}\n\nfunction hypergridThemeChangeWhenAbChange(adaptableblotter, grid, demoDataObject) {\n    adaptableblotter.AdaptableBlotterStore.TheStore.subscribe(() => {\n        if (demoDataObject.themeName !== adaptableblotter.AdaptableBlotterStore.TheStore.getState().Theme.CurrentTheme) {\n            demoDataObject.themeName = adaptableblotter.AdaptableBlotterStore.TheStore.getState().Theme.CurrentTheme;\n            if (demoDataObject.themeName === \"Dark Theme\" || demoDataObject.themeName === \"Cyborg\" || demoDataObject.themeName === \"Darkly\" || demoDataObject.themeName === \"Superhero\") {\n                grid.addProperties(darkTheme);\n            } else {\n                grid.addProperties(lightTheme);\n            }\n        }\n    });\n}\n\nfunction areArraysEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    return arr1.every(x => arr2.indexOf(x) !== -1);\n}\n\nmodule.exports.hypergridAddRow = hypergridAddRow;\nmodule.exports.hypergridUpdateRowFromDataSource = hypergridUpdateRowFromDataSource;\nmodule.exports.createGrid = createGrid;\nmodule.exports.initAdaptableBlotter = initAdaptableBlotter;\nmodule.exports.DemoDataObject = DemoDataObject;\nmodule.exports.maximizeWidgetWhenABPopupVisible = maximizeWidgetWhenABPopupVisible;\n// module.exports.publishInstrumentExpressionWhenChanged = publishInstrumentExpressionWhenChanged;\nmodule.exports.publishQuickSearchWhenChanged = publishQuickSearchWhenChanged;\nmodule.exports.hypergridThemeChangeWhenAbChange = hypergridThemeChangeWhenAbChange;\nmodule.exports.publishSymbolWhenSelectionChanged = publishSymbolWhenSelectionChanged;\nmodule.exports.setEmittersWhenSelectionChanged = setEmittersWhenSelectionChanged;","name":"node_modules/babel-loader/lib/index.js??ref--9!C:/code/finsemble-adaptableblotterdemo/src/demohelper.js","sourceMap":{"version":3,"sources":["C:\\code\\finsemble-adaptableblotterdemo\\src\\demohelper.js"],"names":["adaptableblotterhypergrid","require","hypergrid","newRowTimer","newRowList","lightTheme","font","fontBold","color","backgroundColor","altbackground","foregroundSelectionColor","backgroundSelectionColor","columnHeaderFont","columnHeaderColor","columnHeaderBackgroundColor","columnHeaderForegroundSelectionColor","columnHeaderBackgroundSelectionColor","rowHeaderFont","rowHeaderColor","rowHeaderBackgroundColor","rowHeaderForegroundSelectionColor","rowHeaderBackgroundSelectionColor","backgroundColor2","lineColor","voffset","scrollbarHoverOver","scrollbarHoverOff","scrollingEnabled","fixedRowAlign","fixedColAlign","cellPadding","gridLinesH","gridLinesV","defaultRowHeight","defaultFixedRowHeight","showRowNumbers","editorActivationKeys","columnAutosizing","readOnly","darkTheme","hypergridAddRow","grid","blotter","newRow","setInterval","gridHasCurrentEditValue","length","forEach","trade","behavior","dataModel","addRow","ReindexAndRepaint","push","hypergridUpdateRowFromDataSource","updatedRow","primaryKeyColumn","primaryKeyValue","row","dataSource","findRow","column","allColumns","name","createGrid","data","blotterType","schema","getSchema","addProperties","editOnKeydown","renderFalsy","localization","add","NumberFormatter","style","currency","maximumFractionDigits","shortDateOptions","year","month","day","DateFormatter","dateTimeoptions","hour","minute","second","hour12","positionColumns","priceColumns","tradeColumns","columns","p","header","capitalize","string","test","toLowerCase","replace","replacer","trim","a","b","c","toUpperCase","initAdaptableBlotter","blotterId","primaryKey","adaptableblotter","AdaptableBlotter","vendorGrid","userName","enableAuditLog","enableRemoteConfigServer","predefinedConfig","adaptableBlotterContainer","origgetCell","getCell","config","declaredRendererName","isDataRow","y","dataCell","isColumnReadonly","field","call","DemoDataObject","constructor","popupState","didMaximizeForPopup","currentInstrumentExpression","currentQuickSearch","currentTheme","currentSelectedSymbol","maximizeWidgetWhenABPopupVisible","demoDataObject","AdaptableBlotterStore","TheStore","subscribe","getState","Popup","ScreenPopup","ShowPopup","FSBL","Clients","WindowClient","windowState","maximize","restore","publishQuickSearchWhenChanged","QuickSearch","QuickSearchText","LinkerClient","publish","dataType","publishSymbolWhenSelectionChanged","addEventListener","e","detail","selections","rowIndex","firstSelectedCell","getRow","getActiveColumns","x","symbol","instrumentId","setEmittersWhenSelectionChanged","DataTransferClient","setEmitters","emitters","type","selectedCells","JSON","stringify","getSelectedCells","Selection","hypergridThemeChangeWhenAbChange","themeName","Theme","CurrentTheme","areArraysEqual","arr1","arr2","every","indexOf","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,4BAA4BC,QAAQ,4DAAR,CAAhC;AACA,IAAIC,YAAYD,QAAQ,eAAR,CAAhB;;AAEA,IAAIE,WAAJ;AACA,IAAIC,aAAa,EAAjB;;AAEA,IAAIC,aAAa;AACbC,UAAM,mDADO;AAEbC,cAAU,wDAFG;AAGbC,WAAO,SAHM;AAIbC,qBAAiB,OAJJ;AAKbC,mBAAe,SALF;AAMbC,8BAA0B,OANb;AAObC,8BAA0B,yBAPb;;AASbC,sBAAkB,mDATL;AAUbC,uBAAmB,SAVN;AAWbC,iCAA6B,SAXhB;AAYbC,0CAAsC,iBAZzB;AAabC,0CAAsC,mBAbzB;;AAebC,mBAAe,mDAfF;AAgBbC,oBAAgB,SAhBH;AAiBbC,8BAA0B,SAjBb;AAkBbC,uCAAmC,iBAlBtB;AAmBbC,uCAAmC,mBAnBtB;;AAqBbC,sBAAkB,oBArBL;AAsBbC,eAAW,SAtBE;AAuBbC,aAAS,CAvBI;AAwBbC,wBAAoB,SAxBP;AAyBbC,uBAAmB,SAzBN;AA0BbC,sBAAkB,IA1BL;;AA4BbC,mBAAe,QA5BF;AA6BbC,mBAAe,QA7BF;AA8BbC,iBAAa,EA9BA;AA+BbC,gBAAY,KA/BC;AAgCbC,gBAAY,IAhCC;;AAkCbC,sBAAkB,EAlCL;AAmCbC,2BAAuB,EAnCV;AAoCbC,oBAAgB,KApCH;AAqCbC,0BAAsB,CAAC,KAAD,EAAQ,KAAR,CArCT;AAsCbC,sBAAkB,IAtCL;AAuCbC,cAAU;AAvCG,CAAjB;;AA0CA,IAAIC,YAAY;AACZlC,UAAM,mDADM;AAEZE,WAAO,SAFK;AAGZC,qBAAiB,SAHL;AAIZC,mBAAe,SAJH;AAKZC,8BAA0B,SALd;AAMZC,8BAA0B,SANd;;AAQZC,sBAAkB,mDARN;AASZC,uBAAmB,OATP;AAUZC,iCAA6B,SAVjB;AAWZC,0CAAsC,OAX1B;AAYZC,0CAAsC,SAZ1B;;AAcZC,mBAAe,mDAdH;AAeZC,oBAAgB,OAfJ;AAgBZC,8BAA0B,SAhBd;AAiBZC,uCAAmC,OAjBvB;AAkBZC,uCAAmC,SAlBvB;;AAoBZC,sBAAkB,oBApBN;AAqBZC,eAAW,oBArBC;AAsBZC,aAAS,CAtBG;AAuBZC,wBAAoB,SAvBR;AAwBZC,uBAAmB,SAxBP;AAyBZC,sBAAkB,IAzBN;;AA2BZC,mBAAe,QA3BH;AA4BZC,mBAAe,QA5BH;AA6BZC,iBAAa,EA7BD;AA8BZC,gBAAY,KA9BA;AA+BZC,gBAAY,KA/BA;;AAiCZC,sBAAkB,EAjCN;AAkCZC,2BAAuB,EAlCX;AAmCZC,oBAAgB,KAnCJ;AAoCZC,0BAAsB,CAAC,KAAD,EAAQ,KAAR,CApCV;AAqCZC,sBAAkB,IArCN;AAsCZC,cAAU;AAtCE,CAAhB;;AAyCA,SAASE,eAAT,CAAyBC,IAAzB,EAA+BC,OAA/B,EAAwCC,MAAxC,EAAgD;AAC5C,QAAI,CAACzC,WAAL,EAAkB;AACd;AACAA,sBAAc0C,YAAY,MAAM;AAC5B,gBAAI,CAACF,QAAQG,uBAAR,EAAD,IAAsC1C,WAAW2C,MAAX,GAAoB,CAA9D,EAAiE;AAC7D3C,2BAAW4C,OAAX,CAAmBC,SAASP,KAAKQ,QAAL,CAAcC,SAAd,CAAwBC,MAAxB,CAA+BH,KAA/B,CAA5B;AACA7C,2BAAW2C,MAAX,GAAoB,CAApB;AACAJ,wBAAQU,iBAAR;AACH;AACJ,SANa,EAMX,GANW,CAAd;AAOH;AACDjD,eAAWkD,IAAX,CAAgBV,MAAhB;AACH;;AAED,SAASW,gCAAT,CAA0Cb,IAA1C,EAAgDC,OAAhD,EAAyDa,UAAzD,EAAqEC,gBAArE,EAAuF;AACnF,QAAIC,kBAAkBF,WAAWC,gBAAX,CAAtB;AACA,QAAIE,MAAMjB,KAAKQ,QAAL,CAAcC,SAAd,CAAwBS,UAAxB,CAAmCC,OAAnC,CAA2CJ,gBAA3C,EAA6DC,eAA7D,CAAV;AACA,SAAK,IAAII,MAAT,IAAmBpB,KAAKQ,QAAL,CAAca,UAAjC,EAA6C;AACzCJ,YAAIG,OAAOE,IAAX,IAAmBR,WAAWM,OAAOE,IAAlB,CAAnB;AACH;AACD;AACA,QAAI,CAACrB,QAAQG,uBAAR,EAAL,EAAwC;AACpCH,gBAAQU,iBAAR;AACH;AACJ;;AAED,SAASY,UAAT,CAAoBC,IAApB,EAA0BC,WAA1B,EAAuC;AACnC,QAAIzB,OAAO,IAAIxC,SAAJ,CAAc,gBAAd,EAAgC,EAAEgE,MAAMA,IAAR,EAAcE,QAAQC,UAAUH,IAAV,EAAgBC,WAAhB,CAAtB,EAAhC,CAAX;AACAzB,SAAK4B,aAAL,CAAmB,EAAEC,eAAe,KAAjB,EAAnB;AACA;AACA7B,SAAK4B,aAAL,CAAmB,EAAEE,aAAa,IAAf,EAAnB;AACA9B,SAAK+B,YAAL,CAAkBC,GAAlB,CAAsB,mBAAtB,EAA2C,IAAIhC,KAAK+B,YAAL,CAAkBE,eAAtB,CAAsC,OAAtC,EAA+C;AACtFC,eAAO,UAD+E;AAEtFC,kBAAU,KAF4E;AAGtFC,+BAAuB;AAH+D,KAA/C,CAA3C;AAKApC,SAAK+B,YAAL,CAAkBC,GAAlB,CAAsB,aAAtB,EAAqC,IAAIhC,KAAK+B,YAAL,CAAkBE,eAAtB,CAAsC,OAAtC,EAA+C;AAChFG,+BAAuB;AADyD,KAA/C,CAArC;;AAIA,QAAIC,mBAAmB,EAAEC,MAAM,SAAR,EAAmBC,OAAO,MAA1B,EAAkCC,KAAK,SAAvC,EAAvB;AACAxC,SAAK+B,YAAL,CAAkBC,GAAlB,CAAsB,iBAAtB,EAAyC,IAAIhC,KAAK+B,YAAL,CAAkBU,aAAtB,CAAoC,OAApC,EAA6CJ,gBAA7C,CAAzC;AACA,QAAIK,kBAAkB;AAClBJ,cAAM,SADY,EACDC,OAAO,SADN,EACiBC,KAAK,SADtB;AAElBG,cAAM,SAFY,EAEDC,QAAQ,SAFP,EAEkBC,QAAQ,SAF1B;AAGlBC,gBAAQ;AAHU,KAAtB;AAKA9C,SAAK+B,YAAL,CAAkBC,GAAlB,CAAsB,gBAAtB,EAAwC,IAAIhC,KAAK+B,YAAL,CAAkBU,aAAtB,CAAoC,OAApC,EAA6CC,eAA7C,CAAxC;AACA,WAAO1C,IAAP;AACH;;AAED,SAAS2B,SAAT,CAAmBH,IAAnB,EAAyBC,WAAzB,EAAsC;AAClC,QAAIsB,kBAAkB,CAClB,cADkB,EAElB,UAFkB,EAGlB,UAHkB,EAIlB,cAJkB,EAKlB,cALkB,EAMlB,KANkB,CAAtB;AAQA,QAAIC,eAAe,CACf,cADe,EAEf,OAFe,EAGf,gBAHe,EAIf,KAJe,EAKf,KALe,EAMf,cANe,EAOf,aAPe,EAQf,cARe,EASf,cATe,CAAnB;AAWA,QAAIC,eAAe,CACf,SADe,EAEf,cAFe,EAGf,gBAHe,EAIf,UAJe,EAKf,QALe,EAMf,cANe,EAOf,UAPe,EAQf,SARe,EASf,cATe,EAUf,OAVe,EAWf,cAXe,EAYf,aAZe,EAaf,aAbe,EAcf,WAde,EAef,gBAfe,EAgBf,aAhBe,EAiBf,eAjBe,CAAnB;AAmBA,QAAIC,OAAJ;AACA,YAAQzB,WAAR;AACI,aAAK,OAAL;AACIyB,sBAAUD,YAAV;AACA;AACJ,aAAK,UAAL;AACIC,sBAAUH,eAAV;AACA;AACJ,aAAK,OAAL;AACIG,sBAAUF,YAAV;AACA;AATR;AAWA,QAAItB,SAAS,EAAb;AACA,SAAK,IAAIyB,CAAT,IAAcD,OAAd,EAAuB;AACnBxB,eAAOd,IAAP,CAAY,EAAEU,MAAM6B,CAAR,EAAWC,QAAQC,WAAWF,CAAX,CAAnB,EAAZ;AACH;AACD,WAAOzB,MAAP;AACH;AACD,SAAS2B,UAAT,CAAoBC,MAApB,EAA4B;AACxB,WAAO,CAAC,QAAQC,IAAR,CAAaD,MAAb,IAAuBA,MAAvB,GAAgCA,OAAOE,WAAP,EAAjC,EACFC,OADE,CACM,gCADN,EACwCC,QADxC,EAEFD,OAFE,CAEM,QAFN,EAEgB,KAFhB,EAGFE,IAHE,EAAP;AAIH;AACD,SAASD,QAAT,CAAkBE,CAAlB,EAAqBC,CAArB,EAAwBC,CAAxB,EAA2B;AACvB,WAAOD,EAAEE,WAAF,KAAkBD,CAAzB;AACH;;AAED,SAASE,oBAAT,CAA8BhE,IAA9B,EAAoCiE,SAApC,EAA+CC,UAA/C,EAA2D;AACvD,QAAIC,mBAAmB,IAAI7G,0BAA0B8G,gBAA9B,CAA+C;AAClEH,mBAAWA,SADuD;AAElEC,oBAAYA,UAFsD;AAGlEG,oBAAYrE,IAHsD;AAIlEsE,kBAAU,UAJwD;AAKlEC,wBAAgB,KALkD;AAMlEC,kCAA0B,KANwC;AAOlEC,0BAAkB,oBAPgD;AAQlEC,mCAA2B;AARuC,KAA/C,CAAvB;;AAWA,QAAIC,cAAc3E,KAAKQ,QAAL,CAAcC,SAAd,CAAwBmE,OAA1C;AACA5E,SAAKQ,QAAL,CAAcC,SAAd,CAAwBmE,OAAxB,GAAkC,CAACC,MAAD,EAASC,oBAAT,KAAkC;AAChE,YAAID,OAAOE,SAAX,EAAsB;AAClB,gBAAIC,IAAIH,OAAOI,QAAP,CAAgBD,CAAxB;AACA,gBAAIA,IAAI,CAAR,EAAW;AACPH,uBAAO9G,eAAP,GAAyB8G,OAAO7G,aAAhC;AACH;AACD,gBAAI,CAACmG,iBAAiBe,gBAAjB,CAAkCL,OAAOM,KAAzC,CAAL,EAAsD;AAClDN,uBAAOjH,IAAP,GAAcD,WAAWE,QAAzB;AACH;AACJ;AACD,eAAO8G,YAAYS,IAAZ,CAAiBpF,KAAKQ,QAAL,CAAcC,SAA/B,EAA0CoE,MAA1C,EAAkDC,oBAAlD,CAAP;AACH,KAXD;;AAaA9E,SAAK4B,aAAL,CAAmBjE,UAAnB;AACA,WAAOwG,gBAAP;AACH;;AAED,MAAMkB,cAAN,CAAqB;AACjBC,kBAAc;AACV,aAAKC,UAAL,GAAkB,IAAlB;AACA,aAAKC,mBAAL,GAA2B,KAA3B;AACA,aAAKC,2BAAL,GAAmC,IAAnC;AACA,aAAKC,kBAAL,GAA0B,IAA1B;AACA,aAAKC,YAAL,GAAoB,EAApB;AACA,aAAKC,qBAAL,GAA6B,EAA7B;AACH;AARgB;;AAWrB,SAASC,gCAAT,CAA0C1B,gBAA1C,EAA4D2B,cAA5D,EAA4E;AACxE3B,qBAAiB4B,qBAAjB,CAAuCC,QAAvC,CAAgDC,SAAhD,CAA0D,MAAM;AAC5D,YAAIH,eAAeP,UAAf,KAA8BpB,iBAAiB4B,qBAAjB,CAAuCC,QAAvC,CAAgDE,QAAhD,GAA2DC,KAA7F,EAAoG;AAChGL,2BAAeP,UAAf,GAA4BpB,iBAAiB4B,qBAAjB,CAAuCC,QAAvC,CAAgDE,QAAhD,GAA2DC,KAAvF;AACA,gBAAIL,eAAeP,UAAf,CAA0Ba,WAA1B,CAAsCC,SAAtC,KAAoD,IAApD,IACAC,KAAKC,OAAL,CAAaC,YAAb,CAA0BC,WAA1B,KAA0C,WAD9C,EAC2D;AACvDX,+BAAeN,mBAAf,GAAqC,IAArC;AACAc,qBAAKC,OAAL,CAAaC,YAAb,CAA0BE,QAA1B;AACH,aAJD,MAKK,IAAIZ,eAAeP,UAAf,CAA0Ba,WAA1B,CAAsCC,SAAtC,KAAoD,KAApD,IACLP,eAAeN,mBADd,EACmC;AACpCc,qBAAKC,OAAL,CAAaC,YAAb,CAA0BG,OAA1B;AACAb,+BAAeN,mBAAf,GAAqC,KAArC;AACH;AACJ;AACJ,KAdD;AAeH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASoB,6BAAT,CAAuCzC,gBAAvC,EAAyD2B,cAAzD,EAAyE;AACrE3B,qBAAiB4B,qBAAjB,CAAuCC,QAAvC,CAAgDC,SAAhD,CAA0D,MAAM;AAC5D;AACA,YAAI9B,iBAAiB4B,qBAAjB,CAAuCC,QAAvC,CAAgDE,QAAhD,GAA2DW,WAA3D,CAAuEC,eAAvE,KAA2FhB,eAAeJ,kBAA9G,EAAkI;AAC9HI,2BAAeJ,kBAAf,GAAoCvB,iBAAiB4B,qBAAjB,CAAuCC,QAAvC,CAAgDE,QAAhD,GAA2DW,WAA3D,CAAuEC,eAA3G;AACAR,iBAAKC,OAAL,CAAaQ,YAAb,CAA0BC,OAA1B,CAAkC,EAAEC,UAAU,aAAZ,EAA2BzF,MAAMsE,eAAeJ,kBAAhD,EAAlC;AACH;AACJ,KAND;AAOH;;AAED,SAASwB,iCAAT,CAA2ClH,IAA3C,EAAiD8F,cAAjD,EAAiE;AAC7D9F,SAAKmH,gBAAL,CAAsB,uBAAtB,EAAgDC,CAAD,IAAO;;AAElD,YAAIA,EAAEC,MAAF,CAASC,UAAT,CAAoBjH,MAApB,KAA+B,CAAnC,EAAsC;AAClC;AACAyF,2BAAeF,qBAAf,GAAuC,EAAvC;AACAU,iBAAKC,OAAL,CAAaQ,YAAb,CAA0BC,OAA1B,CAAkC,EAAEC,UAAU,QAAZ,EAAsBzF,MAAM,EAA5B,EAAlC;AACA;AACH;;AAED;AACA,YAAI+F,WAAWH,EAAEC,MAAF,CAASC,UAAT,CAAoB,CAApB,EAAuBE,iBAAvB,CAAyCxC,CAAxD;AACA,YAAI/D,MAAMjB,KAAKQ,QAAL,CAAcC,SAAd,CAAwBS,UAAxB,CAAmCuG,MAAnC,CAA0CF,QAA1C,CAAV;AACA,YAAInG,SAASpB,KAAKQ,QAAL,CAAckH,gBAAd,GAAiCN,EAAEC,MAAF,CAASC,UAAT,CAAoB,CAApB,EAAuBE,iBAAvB,CAAyCG,CAA1E,CAAb;AACA,YAAIvG,OAAOE,IAAP,KAAgB,cAApB,EAAoC;AAChC,gBAAIsG,SAAS3G,IAAI4G,YAAjB;AACA/B,2BAAeF,qBAAf,GAAuCgC,MAAvC;AACA;AACA9B,2BAAeJ,kBAAf,GAAoCkC,MAApC;AACAtB,iBAAKC,OAAL,CAAaQ,YAAb,CAA0BC,OAA1B,CAAkC,EAAEC,UAAU,QAAZ,EAAsBzF,MAAMoG,MAA5B,EAAlC;AACH;AACJ,KApBD;AAqBH;;AAED,SAASE,+BAAT,CAAyC9H,IAAzC,EAA+CmE,gBAA/C,EAAiE;AAC7DnE,SAAKmH,gBAAL,CAAsB,uBAAtB,EAA+C,MAAM;AACjDb,aAAKC,OAAL,CAAawB,kBAAb,CAAgCC,WAAhC,CAA4C;AACxCC,sBAAU,CACN;AACIC,sBAAM,gCADV;AAEI1G,sBAAM,EAAE2G,eAAeC,KAAKC,SAAL,CAAelE,iBAAiBmE,gBAAjB,GAAoCC,SAAnD,CAAjB;AAFV,aADM;AAD8B,SAA5C;AAQH,KATD;AAUH;;AAED,SAASC,gCAAT,CAA0CrE,gBAA1C,EAA4DnE,IAA5D,EAAkE8F,cAAlE,EAAkF;AAC9E3B,qBAAiB4B,qBAAjB,CAAuCC,QAAvC,CAAgDC,SAAhD,CAA0D,MAAM;AAC5D,YAAIH,eAAe2C,SAAf,KAA6BtE,iBAAiB4B,qBAAjB,CAAuCC,QAAvC,CAAgDE,QAAhD,GAA2DwC,KAA3D,CAAiEC,YAAlG,EAAgH;AAC5G7C,2BAAe2C,SAAf,GAA2BtE,iBAAiB4B,qBAAjB,CAAuCC,QAAvC,CAAgDE,QAAhD,GAA2DwC,KAA3D,CAAiEC,YAA5F;AACA,gBAAI7C,eAAe2C,SAAf,KAA6B,YAA7B,IACA3C,eAAe2C,SAAf,KAA6B,QAD7B,IAEA3C,eAAe2C,SAAf,KAA6B,QAF7B,IAGA3C,eAAe2C,SAAf,KAA6B,WAHjC,EAG8C;AAC1CzI,qBAAK4B,aAAL,CAAmB9B,SAAnB;AACH,aALD,MAMK;AACDE,qBAAK4B,aAAL,CAAmBjE,UAAnB;AACH;AACJ;AACJ,KAbD;AAcH;;AAED,SAASiL,cAAT,CAAwBC,IAAxB,EAA8BC,IAA9B,EAAoC;AAChC,QAAID,KAAKxI,MAAL,KAAgByI,KAAKzI,MAAzB,EAAiC;AAC7B,eAAO,KAAP;AACH;AACD,WAAOwI,KAAKE,KAAL,CAAWpB,KAAKmB,KAAKE,OAAL,CAAarB,CAAb,MAAoB,CAAC,CAArC,CAAP;AACH;;AAEDsB,OAAOC,OAAP,CAAenJ,eAAf,GAAiCA,eAAjC;AACAkJ,OAAOC,OAAP,CAAerI,gCAAf,GAAkDA,gCAAlD;AACAoI,OAAOC,OAAP,CAAe3H,UAAf,GAA4BA,UAA5B;AACA0H,OAAOC,OAAP,CAAelF,oBAAf,GAAsCA,oBAAtC;AACAiF,OAAOC,OAAP,CAAe7D,cAAf,GAAgCA,cAAhC;AACA4D,OAAOC,OAAP,CAAerD,gCAAf,GAAkDA,gCAAlD;AACA;AACAoD,OAAOC,OAAP,CAAetC,6BAAf,GAA+CA,6BAA/C;AACAqC,OAAOC,OAAP,CAAeV,gCAAf,GAAkDA,gCAAlD;AACAS,OAAOC,OAAP,CAAehC,iCAAf,GAAmDA,iCAAnD;AACA+B,OAAOC,OAAP,CAAepB,+BAAf,GAAiDA,+BAAjD","file":"demohelper.js","sourceRoot":"C:/Users/adaptabletools/AppData/Local/OpenFin","sourcesContent":["\"use strict\";\r\n\r\nvar adaptableblotterhypergrid = require('adaptableblotter/dist/adaptableblotterhypergrid-bundle.min');\r\nvar hypergrid = require('fin-hypergrid');\r\n\r\nlet newRowTimer;\r\nlet newRowList = [];\r\n\r\nlet lightTheme = {\r\n    font: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\r\n    fontBold: 'bold 12px Helvetica Neue, Helvetica, Arial, sans-serif',\r\n    color: '#003f59',\r\n    backgroundColor: 'white',\r\n    altbackground: '#e6f2f8',\r\n    foregroundSelectionColor: 'white',\r\n    backgroundSelectionColor: 'rgba(13, 106, 146, 0.5)',\r\n\r\n    columnHeaderFont: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\r\n    columnHeaderColor: '#00435e',\r\n    columnHeaderBackgroundColor: '#d9ecf5',\r\n    columnHeaderForegroundSelectionColor: 'rgb(25, 25, 25)',\r\n    columnHeaderBackgroundSelectionColor: 'rgb(255, 220, 97)',\r\n\r\n    rowHeaderFont: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\r\n    rowHeaderColor: '#00435e',\r\n    rowHeaderBackgroundColor: '#d9ecf5',\r\n    rowHeaderForegroundSelectionColor: 'rgb(25, 25, 25)',\r\n    rowHeaderBackgroundSelectionColor: 'rgb(255, 220, 97)',\r\n\r\n    backgroundColor2: 'rgb(201, 201, 201)',\r\n    lineColor: '#bbdceb',\r\n    voffset: 0,\r\n    scrollbarHoverOver: 'visible',\r\n    scrollbarHoverOff: 'visible',\r\n    scrollingEnabled: true,\r\n\r\n    fixedRowAlign: 'center',\r\n    fixedColAlign: 'center',\r\n    cellPadding: 15,\r\n    gridLinesH: false,\r\n    gridLinesV: true,\r\n\r\n    defaultRowHeight: 30,\r\n    defaultFixedRowHeight: 15,\r\n    showRowNumbers: false,\r\n    editorActivationKeys: ['alt', 'esc'],\r\n    columnAutosizing: true,\r\n    readOnly: false\r\n};\r\n\r\nlet darkTheme = {\r\n    font: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\r\n    color: '#ffffff',\r\n    backgroundColor: '#403E3E',\r\n    altbackground: '#302E2E',\r\n    foregroundSelectionColor: '#ffffff',\r\n    backgroundSelectionColor: '#546465',\r\n\r\n    columnHeaderFont: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\r\n    columnHeaderColor: 'white',\r\n    columnHeaderBackgroundColor: '#07071E',\r\n    columnHeaderForegroundSelectionColor: 'white',\r\n    columnHeaderBackgroundSelectionColor: '#3D77FE',\r\n\r\n    rowHeaderFont: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\r\n    rowHeaderColor: 'white',\r\n    rowHeaderBackgroundColor: '#07071E',\r\n    rowHeaderForegroundSelectionColor: 'white',\r\n    rowHeaderBackgroundSelectionColor: '#3D77FE',\r\n\r\n    backgroundColor2: 'rgb(201, 201, 201)',\r\n    lineColor: 'rgb(199, 199, 199)',\r\n    voffset: 0,\r\n    scrollbarHoverOver: 'visible',\r\n    scrollbarHoverOff: 'visible',\r\n    scrollingEnabled: true,\r\n\r\n    fixedRowAlign: 'center',\r\n    fixedColAlign: 'center',\r\n    cellPadding: 15,\r\n    gridLinesH: false,\r\n    gridLinesV: false,\r\n\r\n    defaultRowHeight: 30,\r\n    defaultFixedRowHeight: 15,\r\n    showRowNumbers: false,\r\n    editorActivationKeys: ['alt', 'esc'],\r\n    columnAutosizing: true,\r\n    readOnly: false\r\n};\r\n\r\nfunction hypergridAddRow(grid, blotter, newRow) {\r\n    if (!newRowTimer) {\r\n        //we just want to avoid the data going out of index when editing it. \r\n        newRowTimer = setInterval(() => {\r\n            if (!blotter.gridHasCurrentEditValue() && newRowList.length > 0) {\r\n                newRowList.forEach(trade => grid.behavior.dataModel.addRow(trade));\r\n                newRowList.length = 0;\r\n                blotter.ReindexAndRepaint();\r\n            }\r\n        }, 500);\r\n    }\r\n    newRowList.push(newRow);\r\n}\r\n\r\nfunction hypergridUpdateRowFromDataSource(grid, blotter, updatedRow, primaryKeyColumn) {\r\n    let primaryKeyValue = updatedRow[primaryKeyColumn];\r\n    let row = grid.behavior.dataModel.dataSource.findRow(primaryKeyColumn, primaryKeyValue);\r\n    for (let column of grid.behavior.allColumns) {\r\n        row[column.name] = updatedRow[column.name];\r\n    }\r\n    //if not editing we refresh the grid\r\n    if (!blotter.gridHasCurrentEditValue()) {\r\n        blotter.ReindexAndRepaint();\r\n    }\r\n}\r\n\r\nfunction createGrid(data, blotterType) {\r\n    var grid = new hypergrid('#gridcontainer', { data: data, schema: getSchema(data, blotterType) });\r\n    grid.addProperties({ editOnKeydown: false });\r\n    //Set to `true` to render `0` and `false`. Otherwise these value appear as blank cells\r\n    grid.addProperties({ renderFalsy: true });\r\n    grid.localization.add('USDCurrencyFormat', new grid.localization.NumberFormatter('en-US', {\r\n        style: 'currency',\r\n        currency: 'USD',\r\n        maximumFractionDigits: 0\r\n    }));\r\n    grid.localization.add('PriceFormat', new grid.localization.NumberFormatter('en-US', {\r\n        maximumFractionDigits: 4\r\n    }));\r\n\r\n    var shortDateOptions = { year: 'numeric', month: 'long', day: 'numeric' };\r\n    grid.localization.add('shortDateFormat', new grid.localization.DateFormatter('en-EN', shortDateOptions));\r\n    let dateTimeoptions = {\r\n        year: 'numeric', month: 'numeric', day: 'numeric',\r\n        hour: 'numeric', minute: 'numeric', second: 'numeric',\r\n        hour12: false\r\n    };\r\n    grid.localization.add('dateTimeFormat', new grid.localization.DateFormatter('en-EN', dateTimeoptions));\r\n    return grid;\r\n}\r\n\r\nfunction getSchema(data, blotterType) {\r\n    var positionColumns = [\r\n        \"instrumentId\",\r\n        \"position\",\r\n        \"currency\",\r\n        \"currentPrice\",\r\n        \"closingPrice\",\r\n        \"pnl\"\r\n    ];\r\n    var priceColumns = [\r\n        \"instrumentId\",\r\n        \"price\",\r\n        \"bidOfferSpread\",\r\n        \"bid\",\r\n        \"ask\",\r\n        \"closingPrice\",\r\n        \"changeOnDay\",\r\n        \"bloombergBid\",\r\n        \"bloombergAsk\",\r\n    ];\r\n    var tradeColumns = [\r\n        \"tradeId\",\r\n        \"instrumentId\",\r\n        \"instrumentName\",\r\n        \"notional\",\r\n        \"deskId\",\r\n        \"counterparty\",\r\n        \"currency\",\r\n        \"country\",\r\n        \"changeOnYear\",\r\n        \"price\",\r\n        \"moodysRating\",\r\n        \"fitchRating\",\r\n        \"sandpRating\",\r\n        \"tradeDate\",\r\n        \"settlementDate\",\r\n        \"lastUpdated\",\r\n        \"lastUpdatedBy\"\r\n    ];\r\n    var columns;\r\n    switch (blotterType) {\r\n        case \"trade\":\r\n            columns = tradeColumns;\r\n            break;\r\n        case \"position\":\r\n            columns = positionColumns;\r\n            break;\r\n        case \"price\":\r\n            columns = priceColumns;\r\n            break;\r\n    }\r\n    var schema = [];\r\n    for (var p of columns) {\r\n        schema.push({ name: p, header: capitalize(p) });\r\n    }\r\n    return schema;\r\n}\r\nfunction capitalize(string) {\r\n    return (/[a-z]/.test(string) ? string : string.toLowerCase())\r\n        .replace(/[\\s\\-_]*([^\\s\\-_])([^\\s\\-_]+)/g, replacer)\r\n        .replace(/[A-Z]/g, ' $&')\r\n        .trim();\r\n}\r\nfunction replacer(a, b, c) {\r\n    return b.toUpperCase() + c;\r\n}\r\n\r\nfunction initAdaptableBlotter(grid, blotterId, primaryKey) {\r\n    let adaptableblotter = new adaptableblotterhypergrid.AdaptableBlotter({\r\n        blotterId: blotterId,\r\n        primaryKey: primaryKey,\r\n        vendorGrid: grid,\r\n        userName: \"Jonathan\",\r\n        enableAuditLog: false,\r\n        enableRemoteConfigServer: false,\r\n        predefinedConfig: \"defaultConfig.json\",\r\n        adaptableBlotterContainer: \"adaptableblottercontainer\"\r\n    });\r\n\r\n    let origgetCell = grid.behavior.dataModel.getCell;\r\n    grid.behavior.dataModel.getCell = (config, declaredRendererName) => {\r\n        if (config.isDataRow) {\r\n            var y = config.dataCell.y;\r\n            if (y % 2) {\r\n                config.backgroundColor = config.altbackground;\r\n            }\r\n            if (!adaptableblotter.isColumnReadonly(config.field)) {\r\n                config.font = lightTheme.fontBold;\r\n            }\r\n        }\r\n        return origgetCell.call(grid.behavior.dataModel, config, declaredRendererName);\r\n    };\r\n\r\n    grid.addProperties(lightTheme);\r\n    return adaptableblotter;\r\n}\r\n\r\nclass DemoDataObject {\r\n    constructor() {\r\n        this.popupState = null;\r\n        this.didMaximizeForPopup = false;\r\n        this.currentInstrumentExpression = null;\r\n        this.currentQuickSearch = null;\r\n        this.currentTheme = \"\";\r\n        this.currentSelectedSymbol = \"\"\r\n    }\r\n}\r\n\r\nfunction maximizeWidgetWhenABPopupVisible(adaptableblotter, demoDataObject) {\r\n    adaptableblotter.AdaptableBlotterStore.TheStore.subscribe(() => {\r\n        if (demoDataObject.popupState !== adaptableblotter.AdaptableBlotterStore.TheStore.getState().Popup) {\r\n            demoDataObject.popupState = adaptableblotter.AdaptableBlotterStore.TheStore.getState().Popup;\r\n            if (demoDataObject.popupState.ScreenPopup.ShowPopup === true &&\r\n                FSBL.Clients.WindowClient.windowState !== \"maximized\") {\r\n                demoDataObject.didMaximizeForPopup = true;\r\n                FSBL.Clients.WindowClient.maximize();\r\n            }\r\n            else if (demoDataObject.popupState.ScreenPopup.ShowPopup === false &&\r\n                demoDataObject.didMaximizeForPopup) {\r\n                FSBL.Clients.WindowClient.restore();\r\n                demoDataObject.didMaximizeForPopup = false;\r\n            }\r\n        }\r\n    });\r\n}\r\n// function publishInstrumentExpressionWhenChanged(adaptableblotter, demoDataObject) {\r\n//     adaptableblotter.AdaptableBlotterStore.TheStore.subscribe(() => {\r\n//         //we first check that the state update concerns the filters\r\n//         if (adaptableblotter.AdaptableBlotterStore.TheStore.getState().Filter.ColumnFilters !== demoDataObject.currentFilters) {\r\n//             demoDataObject.currentFilters = adaptableblotter.AdaptableBlotterStore.TheStore.getState().Filter.ColumnFilters;\r\n//             //we get the expression for the column instrumentId\r\n//             let localInstrumentIdExpression = demoDataObject.currentFilters.find(x => x.ColumnId === \"instrumentId\");\r\n//             if (localInstrumentIdExpression) {\r\n//                 if (demoDataObject.currentInstrumentExpression) {\r\n//                     let localColumnValues = localInstrumentIdExpression.Filter.ColumnDisplayValuesExpressions.find(x => x.ColumnName === \"instrumentId\");\r\n//                     let localColumnValuesArray = localColumnValues ? localColumnValues.ColumnValues : [];\r\n//                     let localUserFilterUids = localInstrumentIdExpression.Filter.UserFilters.find(x => x.ColumnName === \"instrumentId\");\r\n//                     let localuserFilterUidsArray = localUserFilterUids ? localUserFilterUids.UserFilterUids : [];\r\n\r\n//                     let currentColumnValues = demoDataObject.currentInstrumentExpression.Filter.ColumnDisplayValuesExpressions.find(x => x.ColumnName === \"instrumentId\");\r\n//                     let currentColumnValuesArray = currentColumnValues ? currentColumnValues.ColumnValues : [];\r\n//                     let currentUserFilterUids = demoDataObject.currentInstrumentExpression.Filter.UserFilters.find(x => x.ColumnName === \"instrumentId\");\r\n//                     let currentuserFilterUidsArray = currentUserFilterUids ? currentUserFilterUids.UserFilterUids : [];\r\n\r\n//                     demoDataObject.currentInstrumentExpression = localInstrumentIdExpression;\r\n//                     if (!areArraysEqual(localColumnValuesArray, currentColumnValuesArray) ||\r\n//                         !areArraysEqual(localuserFilterUidsArray, currentuserFilterUidsArray)) {\r\n//                         FSBL.Clients.LinkerClient.publish({ dataType: \"instrumentExpression\", data: demoDataObject.currentInstrumentExpression });\r\n//                     }\r\n//                 }\r\n//                 else {\r\n//                     demoDataObject.currentInstrumentExpression = localInstrumentIdExpression;\r\n//                     FSBL.Clients.LinkerClient.publish({ dataType: \"instrumentExpression\", data: demoDataObject.currentInstrumentExpression });\r\n//                 }\r\n//             }\r\n//             else if (demoDataObject.currentInstrumentExpression) {\r\n//                 demoDataObject.currentInstrumentExpression = null;\r\n//                 FSBL.Clients.LinkerClient.publish({ dataType: \"instrumentExpression\", data: null });\r\n//             }\r\n//         }\r\n//     });\r\n// }\r\n\r\nfunction publishQuickSearchWhenChanged(adaptableblotter, demoDataObject) {\r\n    adaptableblotter.AdaptableBlotterStore.TheStore.subscribe(() => {\r\n        //we first check that the state update concerns the filters\r\n        if (adaptableblotter.AdaptableBlotterStore.TheStore.getState().QuickSearch.QuickSearchText !== demoDataObject.currentQuickSearch) {\r\n            demoDataObject.currentQuickSearch = adaptableblotter.AdaptableBlotterStore.TheStore.getState().QuickSearch.QuickSearchText;\r\n            FSBL.Clients.LinkerClient.publish({ dataType: \"quickSearch\", data: demoDataObject.currentQuickSearch });\r\n        }\r\n    });\r\n}\r\n\r\nfunction publishSymbolWhenSelectionChanged(grid, demoDataObject) {\r\n    grid.addEventListener('fin-selection-changed', (e) => {\r\n\r\n        if (e.detail.selections.length === 0) {\r\n            //no selection\r\n            demoDataObject.currentSelectedSymbol = \"\";\r\n            FSBL.Clients.LinkerClient.publish({ dataType: \"symbol\", data: \"\" });\r\n            return;\r\n        }\r\n\r\n        //get the first selected cell of the selections\r\n        let rowIndex = e.detail.selections[0].firstSelectedCell.y;\r\n        let row = grid.behavior.dataModel.dataSource.getRow(rowIndex);\r\n        let column = grid.behavior.getActiveColumns()[e.detail.selections[0].firstSelectedCell.x];\r\n        if (column.name === \"instrumentId\") {\r\n            let symbol = row.instrumentId;\r\n            demoDataObject.currentSelectedSymbol = symbol;\r\n            //we set the current quicksearch as well as we do not want to set the quicksearch when we select a cell\r\n            demoDataObject.currentQuickSearch = symbol;\r\n            FSBL.Clients.LinkerClient.publish({ dataType: \"symbol\", data: symbol });\r\n        }\r\n    });\r\n}\r\n\r\nfunction setEmittersWhenSelectionChanged(grid, adaptableblotter) {\r\n    grid.addEventListener('fin-selection-changed', () => {\r\n        FSBL.Clients.DataTransferClient.setEmitters({\r\n            emitters: [\r\n                {\r\n                    type: \"adaptableblotter.selectedcells\",\r\n                    data: { selectedCells: JSON.stringify(adaptableblotter.getSelectedCells().Selection) }\r\n                }\r\n            ]\r\n        })\r\n    });\r\n}\r\n\r\nfunction hypergridThemeChangeWhenAbChange(adaptableblotter, grid, demoDataObject) {\r\n    adaptableblotter.AdaptableBlotterStore.TheStore.subscribe(() => {\r\n        if (demoDataObject.themeName !== adaptableblotter.AdaptableBlotterStore.TheStore.getState().Theme.CurrentTheme) {\r\n            demoDataObject.themeName = adaptableblotter.AdaptableBlotterStore.TheStore.getState().Theme.CurrentTheme;\r\n            if (demoDataObject.themeName === \"Dark Theme\" ||\r\n                demoDataObject.themeName === \"Cyborg\" ||\r\n                demoDataObject.themeName === \"Darkly\" ||\r\n                demoDataObject.themeName === \"Superhero\") {\r\n                grid.addProperties(darkTheme);\r\n            }\r\n            else {\r\n                grid.addProperties(lightTheme);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction areArraysEqual(arr1, arr2) {\r\n    if (arr1.length !== arr2.length) {\r\n        return false;\r\n    }\r\n    return arr1.every(x => arr2.indexOf(x) !== -1);\r\n}\r\n\r\nmodule.exports.hypergridAddRow = hypergridAddRow;\r\nmodule.exports.hypergridUpdateRowFromDataSource = hypergridUpdateRowFromDataSource;\r\nmodule.exports.createGrid = createGrid;\r\nmodule.exports.initAdaptableBlotter = initAdaptableBlotter;\r\nmodule.exports.DemoDataObject = DemoDataObject;\r\nmodule.exports.maximizeWidgetWhenABPopupVisible = maximizeWidgetWhenABPopupVisible;\r\n// module.exports.publishInstrumentExpressionWhenChanged = publishInstrumentExpressionWhenChanged;\r\nmodule.exports.publishQuickSearchWhenChanged = publishQuickSearchWhenChanged;\r\nmodule.exports.hypergridThemeChangeWhenAbChange = hypergridThemeChangeWhenAbChange;\r\nmodule.exports.publishSymbolWhenSelectionChanged = publishSymbolWhenSelectionChanged;\r\nmodule.exports.setEmittersWhenSelectionChanged = setEmittersWhenSelectionChanged;"]}}},"hash":"4da64b7b82614cd70452a8c82e9ce55a","dependencyBlock":{"type":"DependenciesBlock","dependencies":[{"type":"ConstDependency","expression":"","range":[0,13],"loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":13}}},{"type":"CommonJsRequireDependency","request":"adaptableblotter/dist/adaptableblotterhypergrid-bundle.min","range":[55,115],"loc":{"start":{"line":3,"column":32},"end":{"line":3,"column":101}}},{"type":"RequireHeaderDependency","range":[47,54],"loc":{"start":{"line":3,"column":32},"end":{"line":3,"column":101}}},{"type":"CommonJsRequireDependency","request":"fin-hypergrid","range":[142,157],"loc":{"start":{"line":4,"column":16},"end":{"line":4,"column":40}}},{"type":"RequireHeaderDependency","range":[134,141],"loc":{"start":{"line":4,"column":16},"end":{"line":4,"column":40}}}],"variables":[],"blocks":[]},"source":{"_cachedSource":{"source":{"type":"ReplaceSource","replacements":[[142,156,"73",3],[134,140,"__webpack_require__",4],[55,114,"68",1],[47,53,"__webpack_require__",2],[0,12,"",0]]},"hash":"4da64b7b82614cd70452a8c82e9ce55a"}}}{"type":"NormalModule","constructor":{"request":"node_modules/babel-loader/lib/index.js??ref--9!src/demohelper.js","userRequest":"src/demohelper.js","rawRequest":"../../demohelper","loaders":[{"loader":"node_modules/babel-loader/lib/index.js","ident":"ref--9","options":{"cacheDirectory":"./.babel_cache/","presets":["react","stage-1"]}}],"resource":"src/demohelper.js","parser":{"type":"Parser"}},"identifier":"node_modules/babel-loader/lib/index.js??ref--9!src/demohelper.js","assigned":{"issuer":"node_modules/babel-loader/lib/index.js??ref--9!src/components/blotterreceiver/blotterreceiver.js","useSourceMap":true},"build":{"built":true,"buildTimestamp":1533763749595,"cacheable":true,"meta":{},"assets":[],"fileDependencies":["src/demohelper.js"],"contextDependencies":[],"strict":true,"warnings":[],"errors":[],"_source":{"type":"SourceMapSource","value":"\"use strict\";\n\nvar adaptableblotterhypergrid = require('adaptableblotter/dist/adaptableblotterhypergrid-bundle.min');\nvar hypergrid = require('fin-hypergrid');\n\nlet newRowTimer;\nlet newRowList = [];\n\nlet lightTheme = {\n    font: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\n    fontBold: 'bold 12px Helvetica Neue, Helvetica, Arial, sans-serif',\n    color: '#003f59',\n    backgroundColor: 'white',\n    altbackground: '#e6f2f8',\n    foregroundSelectionColor: 'white',\n    backgroundSelectionColor: 'rgba(13, 106, 146, 0.5)',\n\n    columnHeaderFont: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\n    columnHeaderColor: '#00435e',\n    columnHeaderBackgroundColor: '#d9ecf5',\n    columnHeaderForegroundSelectionColor: 'rgb(25, 25, 25)',\n    columnHeaderBackgroundSelectionColor: 'rgb(255, 220, 97)',\n\n    rowHeaderFont: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\n    rowHeaderColor: '#00435e',\n    rowHeaderBackgroundColor: '#d9ecf5',\n    rowHeaderForegroundSelectionColor: 'rgb(25, 25, 25)',\n    rowHeaderBackgroundSelectionColor: 'rgb(255, 220, 97)',\n\n    backgroundColor2: 'rgb(201, 201, 201)',\n    lineColor: '#bbdceb',\n    voffset: 0,\n    scrollbarHoverOver: 'visible',\n    scrollbarHoverOff: 'visible',\n    scrollingEnabled: true,\n\n    fixedRowAlign: 'center',\n    fixedColAlign: 'center',\n    cellPadding: 15,\n    gridLinesH: false,\n    gridLinesV: true,\n\n    defaultRowHeight: 30,\n    defaultFixedRowHeight: 15,\n    showRowNumbers: false,\n    editorActivationKeys: ['alt', 'esc'],\n    columnAutosizing: true,\n    readOnly: false\n};\n\nlet darkTheme = {\n    font: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\n    color: '#ffffff',\n    backgroundColor: '#403E3E',\n    altbackground: '#302E2E',\n    foregroundSelectionColor: '#ffffff',\n    backgroundSelectionColor: '#546465',\n\n    columnHeaderFont: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\n    columnHeaderColor: 'white',\n    columnHeaderBackgroundColor: '#07071E',\n    columnHeaderForegroundSelectionColor: 'white',\n    columnHeaderBackgroundSelectionColor: '#3D77FE',\n\n    rowHeaderFont: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\n    rowHeaderColor: 'white',\n    rowHeaderBackgroundColor: '#07071E',\n    rowHeaderForegroundSelectionColor: 'white',\n    rowHeaderBackgroundSelectionColor: '#3D77FE',\n\n    backgroundColor2: 'rgb(201, 201, 201)',\n    lineColor: 'rgb(199, 199, 199)',\n    voffset: 0,\n    scrollbarHoverOver: 'visible',\n    scrollbarHoverOff: 'visible',\n    scrollingEnabled: true,\n\n    fixedRowAlign: 'center',\n    fixedColAlign: 'center',\n    cellPadding: 15,\n    gridLinesH: false,\n    gridLinesV: false,\n\n    defaultRowHeight: 30,\n    defaultFixedRowHeight: 15,\n    showRowNumbers: false,\n    editorActivationKeys: ['alt', 'esc'],\n    columnAutosizing: true,\n    readOnly: false\n};\n\nfunction hypergridAddRow(grid, blotter, newRow) {\n    if (!newRowTimer) {\n        //we just want to avoid the data going out of index when editing it. \n        newRowTimer = setInterval(() => {\n            if (!blotter.gridHasCurrentEditValue() && newRowList.length > 0) {\n                newRowList.forEach(trade => grid.behavior.dataModel.addRow(trade));\n                newRowList.length = 0;\n                blotter.ReindexAndRepaint();\n            }\n        }, 500);\n    }\n    newRowList.push(newRow);\n}\n\nfunction hypergridUpdateRowFromDataSource(grid, blotter, updatedRow, primaryKeyColumn) {\n    let primaryKeyValue = updatedRow[primaryKeyColumn];\n    let row = grid.behavior.dataModel.dataSource.findRow(primaryKeyColumn, primaryKeyValue);\n    for (let column of grid.behavior.allColumns) {\n        row[column.name] = updatedRow[column.name];\n    }\n    //if not editing we refresh the grid\n    if (!blotter.gridHasCurrentEditValue()) {\n        blotter.ReindexAndRepaint();\n    }\n}\n\nfunction createGrid(data, blotterType) {\n    var grid = new hypergrid('#gridcontainer', { data: data, schema: getSchema(data, blotterType) });\n    grid.addProperties({ editOnKeydown: false });\n    //Set to `true` to render `0` and `false`. Otherwise these value appear as blank cells\n    grid.addProperties({ renderFalsy: true });\n    grid.localization.add('USDCurrencyFormat', new grid.localization.NumberFormatter('en-US', {\n        style: 'currency',\n        currency: 'USD',\n        maximumFractionDigits: 0\n    }));\n    grid.localization.add('PriceFormat', new grid.localization.NumberFormatter('en-US', {\n        maximumFractionDigits: 4\n    }));\n\n    var shortDateOptions = { year: 'numeric', month: 'long', day: 'numeric' };\n    grid.localization.add('shortDateFormat', new grid.localization.DateFormatter('en-EN', shortDateOptions));\n    let dateTimeoptions = {\n        year: 'numeric', month: 'numeric', day: 'numeric',\n        hour: 'numeric', minute: 'numeric', second: 'numeric',\n        hour12: false\n    };\n    grid.localization.add('dateTimeFormat', new grid.localization.DateFormatter('en-EN', dateTimeoptions));\n    return grid;\n}\n\nfunction getSchema(data, blotterType) {\n    var positionColumns = [\"instrumentId\", \"position\", \"currency\", \"currentPrice\", \"closingPrice\", \"pnl\"];\n    var priceColumns = [\"instrumentId\", \"price\", \"bidOfferSpread\", \"bid\", \"ask\", \"closingPrice\", \"changeOnDay\", \"bloombergBid\", \"bloombergAsk\"];\n    var tradeColumns = [\"tradeId\", \"instrumentId\", \"instrumentName\", \"notional\", \"deskId\", \"counterparty\", \"currency\", \"country\", \"changeOnYear\", \"price\", \"moodysRating\", \"fitchRating\", \"sandpRating\", \"tradeDate\", \"settlementDate\", \"lastUpdated\", \"lastUpdatedBy\"];\n    var columns;\n    switch (blotterType) {\n        case \"trade\":\n            columns = tradeColumns;\n            break;\n        case \"position\":\n            columns = positionColumns;\n            break;\n        case \"price\":\n            columns = priceColumns;\n            break;\n    }\n    var schema = [];\n    for (var p of columns) {\n        schema.push({ name: p, header: capitalize(p) });\n    }\n    return schema;\n}\nfunction capitalize(string) {\n    return (/[a-z]/.test(string) ? string : string.toLowerCase()).replace(/[\\s\\-_]*([^\\s\\-_])([^\\s\\-_]+)/g, replacer).replace(/[A-Z]/g, ' $&').trim();\n}\nfunction replacer(a, b, c) {\n    return b.toUpperCase() + c;\n}\n\nfunction initAdaptableBlotter(grid, blotterId, primaryKey) {\n    let adaptableblotter = new adaptableblotterhypergrid.AdaptableBlotter({\n        blotterId: blotterId,\n        primaryKey: primaryKey,\n        vendorGrid: grid,\n        userName: \"Jonathan\",\n        enableAuditLog: false,\n        enableRemoteConfigServer: false,\n        predefinedConfig: \"defaultConfig.json\",\n        adaptableBlotterContainer: \"adaptableblottercontainer\"\n    });\n\n    let origgetCell = grid.behavior.dataModel.getCell;\n    grid.behavior.dataModel.getCell = (config, declaredRendererName) => {\n        if (config.isDataRow) {\n            var y = config.dataCell.y;\n            if (y % 2) {\n                config.backgroundColor = config.altbackground;\n            }\n            if (!adaptableblotter.isColumnReadonly(config.field)) {\n                config.font = lightTheme.fontBold;\n            }\n        }\n        return origgetCell.call(grid.behavior.dataModel, config, declaredRendererName);\n    };\n\n    grid.addProperties(lightTheme);\n    return adaptableblotter;\n}\n\nclass DemoDataObject {\n    constructor() {\n        this.popupState = null;\n        this.didMaximizeForPopup = false;\n        this.currentInstrumentExpression = null;\n        this.currentQuickSearch = null;\n        this.currentTheme = \"\";\n        this.currentSelectedSymbol = \"\";\n    }\n}\n\nfunction maximizeWidgetWhenABPopupVisible(adaptableblotter, demoDataObject) {\n    adaptableblotter.AdaptableBlotterStore.TheStore.subscribe(() => {\n        if (demoDataObject.popupState !== adaptableblotter.AdaptableBlotterStore.TheStore.getState().Popup) {\n            demoDataObject.popupState = adaptableblotter.AdaptableBlotterStore.TheStore.getState().Popup;\n            if (demoDataObject.popupState.ScreenPopup.ShowPopup === true && FSBL.Clients.WindowClient.windowState !== \"maximized\") {\n                demoDataObject.didMaximizeForPopup = true;\n                FSBL.Clients.WindowClient.maximize();\n            } else if (demoDataObject.popupState.ScreenPopup.ShowPopup === false && demoDataObject.didMaximizeForPopup) {\n                FSBL.Clients.WindowClient.restore();\n                demoDataObject.didMaximizeForPopup = false;\n            }\n        }\n    });\n}\n// function publishInstrumentExpressionWhenChanged(adaptableblotter, demoDataObject) {\n//     adaptableblotter.AdaptableBlotterStore.TheStore.subscribe(() => {\n//         //we first check that the state update concerns the filters\n//         if (adaptableblotter.AdaptableBlotterStore.TheStore.getState().Filter.ColumnFilters !== demoDataObject.currentFilters) {\n//             demoDataObject.currentFilters = adaptableblotter.AdaptableBlotterStore.TheStore.getState().Filter.ColumnFilters;\n//             //we get the expression for the column instrumentId\n//             let localInstrumentIdExpression = demoDataObject.currentFilters.find(x => x.ColumnId === \"instrumentId\");\n//             if (localInstrumentIdExpression) {\n//                 if (demoDataObject.currentInstrumentExpression) {\n//                     let localColumnValues = localInstrumentIdExpression.Filter.ColumnDisplayValuesExpressions.find(x => x.ColumnName === \"instrumentId\");\n//                     let localColumnValuesArray = localColumnValues ? localColumnValues.ColumnValues : [];\n//                     let localUserFilterUids = localInstrumentIdExpression.Filter.UserFilters.find(x => x.ColumnName === \"instrumentId\");\n//                     let localuserFilterUidsArray = localUserFilterUids ? localUserFilterUids.UserFilterUids : [];\n\n//                     let currentColumnValues = demoDataObject.currentInstrumentExpression.Filter.ColumnDisplayValuesExpressions.find(x => x.ColumnName === \"instrumentId\");\n//                     let currentColumnValuesArray = currentColumnValues ? currentColumnValues.ColumnValues : [];\n//                     let currentUserFilterUids = demoDataObject.currentInstrumentExpression.Filter.UserFilters.find(x => x.ColumnName === \"instrumentId\");\n//                     let currentuserFilterUidsArray = currentUserFilterUids ? currentUserFilterUids.UserFilterUids : [];\n\n//                     demoDataObject.currentInstrumentExpression = localInstrumentIdExpression;\n//                     if (!areArraysEqual(localColumnValuesArray, currentColumnValuesArray) ||\n//                         !areArraysEqual(localuserFilterUidsArray, currentuserFilterUidsArray)) {\n//                         FSBL.Clients.LinkerClient.publish({ dataType: \"instrumentExpression\", data: demoDataObject.currentInstrumentExpression });\n//                     }\n//                 }\n//                 else {\n//                     demoDataObject.currentInstrumentExpression = localInstrumentIdExpression;\n//                     FSBL.Clients.LinkerClient.publish({ dataType: \"instrumentExpression\", data: demoDataObject.currentInstrumentExpression });\n//                 }\n//             }\n//             else if (demoDataObject.currentInstrumentExpression) {\n//                 demoDataObject.currentInstrumentExpression = null;\n//                 FSBL.Clients.LinkerClient.publish({ dataType: \"instrumentExpression\", data: null });\n//             }\n//         }\n//     });\n// }\n\nfunction publishQuickSearchWhenChanged(adaptableblotter, demoDataObject) {\n    adaptableblotter.AdaptableBlotterStore.TheStore.subscribe(() => {\n        //we first check that the state update concerns the filters\n        if (adaptableblotter.AdaptableBlotterStore.TheStore.getState().QuickSearch.QuickSearchText !== demoDataObject.currentQuickSearch) {\n            demoDataObject.currentQuickSearch = adaptableblotter.AdaptableBlotterStore.TheStore.getState().QuickSearch.QuickSearchText;\n            FSBL.Clients.LinkerClient.publish({ dataType: \"quickSearch\", data: demoDataObject.currentQuickSearch });\n        }\n    });\n}\n\nfunction publishSymbolWhenSelectionChanged(grid, demoDataObject) {\n    grid.addEventListener('fin-selection-changed', e => {\n\n        if (e.detail.selections.length === 0) {\n            //no selection\n            demoDataObject.currentSelectedSymbol = \"\";\n            FSBL.Clients.LinkerClient.publish({ dataType: \"symbol\", data: \"\" });\n            return;\n        }\n\n        //get the first selected cell of the selections\n        let rowIndex = e.detail.selections[0].firstSelectedCell.y;\n        let row = grid.behavior.dataModel.dataSource.getRow(rowIndex);\n        let column = grid.behavior.getActiveColumns()[e.detail.selections[0].firstSelectedCell.x];\n        if (column.name === \"instrumentId\") {\n            let symbol = row.instrumentId;\n            demoDataObject.currentSelectedSymbol = symbol;\n            //we set the current quicksearch as well as we do not want to set the quicksearch when we select a cell\n            demoDataObject.currentQuickSearch = symbol;\n            FSBL.Clients.LinkerClient.publish({ dataType: \"symbol\", data: symbol });\n        }\n    });\n}\n\nfunction setEmittersWhenSelectionChanged(grid, adaptableblotter) {\n    grid.addEventListener('fin-selection-changed', () => {\n        FSBL.Clients.DataTransferClient.setEmitters({\n            emitters: [{\n                type: \"adaptableblotter.selectedcells\",\n                data: { selectedCells: JSON.stringify(adaptableblotterblotter.AdaptableBlotterStore.TheStore.getState().Grid.SelectedCellInfo.Selection) }\n            }]\n        });\n    });\n}\n\nfunction hypergridThemeChangeWhenAbChange(adaptableblotter, grid, demoDataObject) {\n    adaptableblotter.AdaptableBlotterStore.TheStore.subscribe(() => {\n        if (demoDataObject.themeName !== adaptableblotter.AdaptableBlotterStore.TheStore.getState().Theme.CurrentTheme) {\n            demoDataObject.themeName = adaptableblotter.AdaptableBlotterStore.TheStore.getState().Theme.CurrentTheme;\n            if (demoDataObject.themeName === \"Dark Theme\" || demoDataObject.themeName === \"Cyborg\" || demoDataObject.themeName === \"Darkly\" || demoDataObject.themeName === \"Superhero\") {\n                grid.addProperties(darkTheme);\n            } else {\n                grid.addProperties(lightTheme);\n            }\n        }\n    });\n}\n\nfunction areArraysEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    return arr1.every(x => arr2.indexOf(x) !== -1);\n}\n\nmodule.exports.hypergridAddRow = hypergridAddRow;\nmodule.exports.hypergridUpdateRowFromDataSource = hypergridUpdateRowFromDataSource;\nmodule.exports.createGrid = createGrid;\nmodule.exports.initAdaptableBlotter = initAdaptableBlotter;\nmodule.exports.DemoDataObject = DemoDataObject;\nmodule.exports.maximizeWidgetWhenABPopupVisible = maximizeWidgetWhenABPopupVisible;\n// module.exports.publishInstrumentExpressionWhenChanged = publishInstrumentExpressionWhenChanged;\nmodule.exports.publishQuickSearchWhenChanged = publishQuickSearchWhenChanged;\nmodule.exports.hypergridThemeChangeWhenAbChange = hypergridThemeChangeWhenAbChange;\nmodule.exports.publishSymbolWhenSelectionChanged = publishSymbolWhenSelectionChanged;\nmodule.exports.setEmittersWhenSelectionChanged = setEmittersWhenSelectionChanged;","name":"node_modules/babel-loader/lib/index.js??ref--9!C:/code/finsemble-adaptableblotterdemo/src/demohelper.js","sourceMap":{"version":3,"sources":["C:\\code\\finsemble-adaptableblotterdemo\\src\\demohelper.js"],"names":["adaptableblotterhypergrid","require","hypergrid","newRowTimer","newRowList","lightTheme","font","fontBold","color","backgroundColor","altbackground","foregroundSelectionColor","backgroundSelectionColor","columnHeaderFont","columnHeaderColor","columnHeaderBackgroundColor","columnHeaderForegroundSelectionColor","columnHeaderBackgroundSelectionColor","rowHeaderFont","rowHeaderColor","rowHeaderBackgroundColor","rowHeaderForegroundSelectionColor","rowHeaderBackgroundSelectionColor","backgroundColor2","lineColor","voffset","scrollbarHoverOver","scrollbarHoverOff","scrollingEnabled","fixedRowAlign","fixedColAlign","cellPadding","gridLinesH","gridLinesV","defaultRowHeight","defaultFixedRowHeight","showRowNumbers","editorActivationKeys","columnAutosizing","readOnly","darkTheme","hypergridAddRow","grid","blotter","newRow","setInterval","gridHasCurrentEditValue","length","forEach","trade","behavior","dataModel","addRow","ReindexAndRepaint","push","hypergridUpdateRowFromDataSource","updatedRow","primaryKeyColumn","primaryKeyValue","row","dataSource","findRow","column","allColumns","name","createGrid","data","blotterType","schema","getSchema","addProperties","editOnKeydown","renderFalsy","localization","add","NumberFormatter","style","currency","maximumFractionDigits","shortDateOptions","year","month","day","DateFormatter","dateTimeoptions","hour","minute","second","hour12","positionColumns","priceColumns","tradeColumns","columns","p","header","capitalize","string","test","toLowerCase","replace","replacer","trim","a","b","c","toUpperCase","initAdaptableBlotter","blotterId","primaryKey","adaptableblotter","AdaptableBlotter","vendorGrid","userName","enableAuditLog","enableRemoteConfigServer","predefinedConfig","adaptableBlotterContainer","origgetCell","getCell","config","declaredRendererName","isDataRow","y","dataCell","isColumnReadonly","field","call","DemoDataObject","constructor","popupState","didMaximizeForPopup","currentInstrumentExpression","currentQuickSearch","currentTheme","currentSelectedSymbol","maximizeWidgetWhenABPopupVisible","demoDataObject","AdaptableBlotterStore","TheStore","subscribe","getState","Popup","ScreenPopup","ShowPopup","FSBL","Clients","WindowClient","windowState","maximize","restore","publishQuickSearchWhenChanged","QuickSearch","QuickSearchText","LinkerClient","publish","dataType","publishSymbolWhenSelectionChanged","addEventListener","e","detail","selections","rowIndex","firstSelectedCell","getRow","getActiveColumns","x","symbol","instrumentId","setEmittersWhenSelectionChanged","DataTransferClient","setEmitters","emitters","type","selectedCells","JSON","stringify","adaptableblotterblotter","Grid","SelectedCellInfo","Selection","hypergridThemeChangeWhenAbChange","themeName","Theme","CurrentTheme","areArraysEqual","arr1","arr2","every","indexOf","module","exports"],"mappings":"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","file":"demohelper.js","sourceRoot":"C:/Users/adaptabletools/AppData/Local/OpenFin","sourcesContent":["\"use strict\";\r\n\r\nvar adaptableblotterhypergrid = require('adaptableblotter/dist/adaptableblotterhypergrid-bundle.min');\r\nvar hypergrid = require('fin-hypergrid');\r\n\r\nlet newRowTimer;\r\nlet newRowList = [];\r\n\r\nlet lightTheme = {\r\n    font: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\r\n    fontBold: 'bold 12px Helvetica Neue, Helvetica, Arial, sans-serif',\r\n    color: '#003f59',\r\n    backgroundColor: 'white',\r\n    altbackground: '#e6f2f8',\r\n    foregroundSelectionColor: 'white',\r\n    backgroundSelectionColor: 'rgba(13, 106, 146, 0.5)',\r\n\r\n    columnHeaderFont: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\r\n    columnHeaderColor: '#00435e',\r\n    columnHeaderBackgroundColor: '#d9ecf5',\r\n    columnHeaderForegroundSelectionColor: 'rgb(25, 25, 25)',\r\n    columnHeaderBackgroundSelectionColor: 'rgb(255, 220, 97)',\r\n\r\n    rowHeaderFont: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\r\n    rowHeaderColor: '#00435e',\r\n    rowHeaderBackgroundColor: '#d9ecf5',\r\n    rowHeaderForegroundSelectionColor: 'rgb(25, 25, 25)',\r\n    rowHeaderBackgroundSelectionColor: 'rgb(255, 220, 97)',\r\n\r\n    backgroundColor2: 'rgb(201, 201, 201)',\r\n    lineColor: '#bbdceb',\r\n    voffset: 0,\r\n    scrollbarHoverOver: 'visible',\r\n    scrollbarHoverOff: 'visible',\r\n    scrollingEnabled: true,\r\n\r\n    fixedRowAlign: 'center',\r\n    fixedColAlign: 'center',\r\n    cellPadding: 15,\r\n    gridLinesH: false,\r\n    gridLinesV: true,\r\n\r\n    defaultRowHeight: 30,\r\n    defaultFixedRowHeight: 15,\r\n    showRowNumbers: false,\r\n    editorActivationKeys: ['alt', 'esc'],\r\n    columnAutosizing: true,\r\n    readOnly: false\r\n};\r\n\r\nlet darkTheme = {\r\n    font: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\r\n    color: '#ffffff',\r\n    backgroundColor: '#403E3E',\r\n    altbackground: '#302E2E',\r\n    foregroundSelectionColor: '#ffffff',\r\n    backgroundSelectionColor: '#546465',\r\n\r\n    columnHeaderFont: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\r\n    columnHeaderColor: 'white',\r\n    columnHeaderBackgroundColor: '#07071E',\r\n    columnHeaderForegroundSelectionColor: 'white',\r\n    columnHeaderBackgroundSelectionColor: '#3D77FE',\r\n\r\n    rowHeaderFont: '12px Helvetica Neue, Helvetica, Arial, sans-serif',\r\n    rowHeaderColor: 'white',\r\n    rowHeaderBackgroundColor: '#07071E',\r\n    rowHeaderForegroundSelectionColor: 'white',\r\n    rowHeaderBackgroundSelectionColor: '#3D77FE',\r\n\r\n    backgroundColor2: 'rgb(201, 201, 201)',\r\n    lineColor: 'rgb(199, 199, 199)',\r\n    voffset: 0,\r\n    scrollbarHoverOver: 'visible',\r\n    scrollbarHoverOff: 'visible',\r\n    scrollingEnabled: true,\r\n\r\n    fixedRowAlign: 'center',\r\n    fixedColAlign: 'center',\r\n    cellPadding: 15,\r\n    gridLinesH: false,\r\n    gridLinesV: false,\r\n\r\n    defaultRowHeight: 30,\r\n    defaultFixedRowHeight: 15,\r\n    showRowNumbers: false,\r\n    editorActivationKeys: ['alt', 'esc'],\r\n    columnAutosizing: true,\r\n    readOnly: false\r\n};\r\n\r\nfunction hypergridAddRow(grid, blotter, newRow) {\r\n    if (!newRowTimer) {\r\n        //we just want to avoid the data going out of index when editing it. \r\n        newRowTimer = setInterval(() => {\r\n            if (!blotter.gridHasCurrentEditValue() && newRowList.length > 0) {\r\n                newRowList.forEach(trade => grid.behavior.dataModel.addRow(trade));\r\n                newRowList.length = 0;\r\n                blotter.ReindexAndRepaint();\r\n            }\r\n        }, 500);\r\n    }\r\n    newRowList.push(newRow);\r\n}\r\n\r\nfunction hypergridUpdateRowFromDataSource(grid, blotter, updatedRow, primaryKeyColumn) {\r\n    let primaryKeyValue = updatedRow[primaryKeyColumn];\r\n    let row = grid.behavior.dataModel.dataSource.findRow(primaryKeyColumn, primaryKeyValue);\r\n    for (let column of grid.behavior.allColumns) {\r\n        row[column.name] = updatedRow[column.name];\r\n    }\r\n    //if not editing we refresh the grid\r\n    if (!blotter.gridHasCurrentEditValue()) {\r\n        blotter.ReindexAndRepaint();\r\n    }\r\n}\r\n\r\nfunction createGrid(data, blotterType) {\r\n    var grid = new hypergrid('#gridcontainer', { data: data, schema: getSchema(data, blotterType) });\r\n    grid.addProperties({ editOnKeydown: false });\r\n    //Set to `true` to render `0` and `false`. Otherwise these value appear as blank cells\r\n    grid.addProperties({ renderFalsy: true });\r\n    grid.localization.add('USDCurrencyFormat', new grid.localization.NumberFormatter('en-US', {\r\n        style: 'currency',\r\n        currency: 'USD',\r\n        maximumFractionDigits: 0\r\n    }));\r\n    grid.localization.add('PriceFormat', new grid.localization.NumberFormatter('en-US', {\r\n        maximumFractionDigits: 4\r\n    }));\r\n\r\n    var shortDateOptions = { year: 'numeric', month: 'long', day: 'numeric' };\r\n    grid.localization.add('shortDateFormat', new grid.localization.DateFormatter('en-EN', shortDateOptions));\r\n    let dateTimeoptions = {\r\n        year: 'numeric', month: 'numeric', day: 'numeric',\r\n        hour: 'numeric', minute: 'numeric', second: 'numeric',\r\n        hour12: false\r\n    };\r\n    grid.localization.add('dateTimeFormat', new grid.localization.DateFormatter('en-EN', dateTimeoptions));\r\n    return grid;\r\n}\r\n\r\nfunction getSchema(data, blotterType) {\r\n    var positionColumns = [\r\n        \"instrumentId\",\r\n        \"position\",\r\n        \"currency\",\r\n        \"currentPrice\",\r\n        \"closingPrice\",\r\n        \"pnl\"\r\n    ];\r\n    var priceColumns = [\r\n        \"instrumentId\",\r\n        \"price\",\r\n        \"bidOfferSpread\",\r\n        \"bid\",\r\n        \"ask\",\r\n        \"closingPrice\",\r\n        \"changeOnDay\",\r\n        \"bloombergBid\",\r\n        \"bloombergAsk\",\r\n    ];\r\n    var tradeColumns = [\r\n        \"tradeId\",\r\n        \"instrumentId\",\r\n        \"instrumentName\",\r\n        \"notional\",\r\n        \"deskId\",\r\n        \"counterparty\",\r\n        \"currency\",\r\n        \"country\",\r\n        \"changeOnYear\",\r\n        \"price\",\r\n        \"moodysRating\",\r\n        \"fitchRating\",\r\n        \"sandpRating\",\r\n        \"tradeDate\",\r\n        \"settlementDate\",\r\n        \"lastUpdated\",\r\n        \"lastUpdatedBy\"\r\n    ];\r\n    var columns;\r\n    switch (blotterType) {\r\n        case \"trade\":\r\n            columns = tradeColumns;\r\n            break;\r\n        case \"position\":\r\n            columns = positionColumns;\r\n            break;\r\n        case \"price\":\r\n            columns = priceColumns;\r\n            break;\r\n    }\r\n    var schema = [];\r\n    for (var p of columns) {\r\n        schema.push({ name: p, header: capitalize(p) });\r\n    }\r\n    return schema;\r\n}\r\nfunction capitalize(string) {\r\n    return (/[a-z]/.test(string) ? string : string.toLowerCase())\r\n        .replace(/[\\s\\-_]*([^\\s\\-_])([^\\s\\-_]+)/g, replacer)\r\n        .replace(/[A-Z]/g, ' $&')\r\n        .trim();\r\n}\r\nfunction replacer(a, b, c) {\r\n    return b.toUpperCase() + c;\r\n}\r\n\r\nfunction initAdaptableBlotter(grid, blotterId, primaryKey) {\r\n    let adaptableblotter = new adaptableblotterhypergrid.AdaptableBlotter({\r\n        blotterId: blotterId,\r\n        primaryKey: primaryKey,\r\n        vendorGrid: grid,\r\n        userName: \"Jonathan\",\r\n        enableAuditLog: false,\r\n        enableRemoteConfigServer: false,\r\n        predefinedConfig: \"defaultConfig.json\",\r\n        adaptableBlotterContainer: \"adaptableblottercontainer\"\r\n    });\r\n\r\n    let origgetCell = grid.behavior.dataModel.getCell;\r\n    grid.behavior.dataModel.getCell = (config, declaredRendererName) => {\r\n        if (config.isDataRow) {\r\n            var y = config.dataCell.y;\r\n            if (y % 2) {\r\n                config.backgroundColor = config.altbackground;\r\n            }\r\n            if (!adaptableblotter.isColumnReadonly(config.field)) {\r\n                config.font = lightTheme.fontBold;\r\n            }\r\n        }\r\n        return origgetCell.call(grid.behavior.dataModel, config, declaredRendererName);\r\n    };\r\n\r\n    grid.addProperties(lightTheme);\r\n    return adaptableblotter;\r\n}\r\n\r\nclass DemoDataObject {\r\n    constructor() {\r\n        this.popupState = null;\r\n        this.didMaximizeForPopup = false;\r\n        this.currentInstrumentExpression = null;\r\n        this.currentQuickSearch = null;\r\n        this.currentTheme = \"\";\r\n        this.currentSelectedSymbol = \"\"\r\n    }\r\n}\r\n\r\nfunction maximizeWidgetWhenABPopupVisible(adaptableblotter, demoDataObject) {\r\n    adaptableblotter.AdaptableBlotterStore.TheStore.subscribe(() => {\r\n        if (demoDataObject.popupState !== adaptableblotter.AdaptableBlotterStore.TheStore.getState().Popup) {\r\n            demoDataObject.popupState = adaptableblotter.AdaptableBlotterStore.TheStore.getState().Popup;\r\n            if (demoDataObject.popupState.ScreenPopup.ShowPopup === true &&\r\n                FSBL.Clients.WindowClient.windowState !== \"maximized\") {\r\n                demoDataObject.didMaximizeForPopup = true;\r\n                FSBL.Clients.WindowClient.maximize();\r\n            }\r\n            else if (demoDataObject.popupState.ScreenPopup.ShowPopup === false &&\r\n                demoDataObject.didMaximizeForPopup) {\r\n                FSBL.Clients.WindowClient.restore();\r\n                demoDataObject.didMaximizeForPopup = false;\r\n            }\r\n        }\r\n    });\r\n}\r\n// function publishInstrumentExpressionWhenChanged(adaptableblotter, demoDataObject) {\r\n//     adaptableblotter.AdaptableBlotterStore.TheStore.subscribe(() => {\r\n//         //we first check that the state update concerns the filters\r\n//         if (adaptableblotter.AdaptableBlotterStore.TheStore.getState().Filter.ColumnFilters !== demoDataObject.currentFilters) {\r\n//             demoDataObject.currentFilters = adaptableblotter.AdaptableBlotterStore.TheStore.getState().Filter.ColumnFilters;\r\n//             //we get the expression for the column instrumentId\r\n//             let localInstrumentIdExpression = demoDataObject.currentFilters.find(x => x.ColumnId === \"instrumentId\");\r\n//             if (localInstrumentIdExpression) {\r\n//                 if (demoDataObject.currentInstrumentExpression) {\r\n//                     let localColumnValues = localInstrumentIdExpression.Filter.ColumnDisplayValuesExpressions.find(x => x.ColumnName === \"instrumentId\");\r\n//                     let localColumnValuesArray = localColumnValues ? localColumnValues.ColumnValues : [];\r\n//                     let localUserFilterUids = localInstrumentIdExpression.Filter.UserFilters.find(x => x.ColumnName === \"instrumentId\");\r\n//                     let localuserFilterUidsArray = localUserFilterUids ? localUserFilterUids.UserFilterUids : [];\r\n\r\n//                     let currentColumnValues = demoDataObject.currentInstrumentExpression.Filter.ColumnDisplayValuesExpressions.find(x => x.ColumnName === \"instrumentId\");\r\n//                     let currentColumnValuesArray = currentColumnValues ? currentColumnValues.ColumnValues : [];\r\n//                     let currentUserFilterUids = demoDataObject.currentInstrumentExpression.Filter.UserFilters.find(x => x.ColumnName === \"instrumentId\");\r\n//                     let currentuserFilterUidsArray = currentUserFilterUids ? currentUserFilterUids.UserFilterUids : [];\r\n\r\n//                     demoDataObject.currentInstrumentExpression = localInstrumentIdExpression;\r\n//                     if (!areArraysEqual(localColumnValuesArray, currentColumnValuesArray) ||\r\n//                         !areArraysEqual(localuserFilterUidsArray, currentuserFilterUidsArray)) {\r\n//                         FSBL.Clients.LinkerClient.publish({ dataType: \"instrumentExpression\", data: demoDataObject.currentInstrumentExpression });\r\n//                     }\r\n//                 }\r\n//                 else {\r\n//                     demoDataObject.currentInstrumentExpression = localInstrumentIdExpression;\r\n//                     FSBL.Clients.LinkerClient.publish({ dataType: \"instrumentExpression\", data: demoDataObject.currentInstrumentExpression });\r\n//                 }\r\n//             }\r\n//             else if (demoDataObject.currentInstrumentExpression) {\r\n//                 demoDataObject.currentInstrumentExpression = null;\r\n//                 FSBL.Clients.LinkerClient.publish({ dataType: \"instrumentExpression\", data: null });\r\n//             }\r\n//         }\r\n//     });\r\n// }\r\n\r\nfunction publishQuickSearchWhenChanged(adaptableblotter, demoDataObject) {\r\n    adaptableblotter.AdaptableBlotterStore.TheStore.subscribe(() => {\r\n        //we first check that the state update concerns the filters\r\n        if (adaptableblotter.AdaptableBlotterStore.TheStore.getState().QuickSearch.QuickSearchText !== demoDataObject.currentQuickSearch) {\r\n            demoDataObject.currentQuickSearch = adaptableblotter.AdaptableBlotterStore.TheStore.getState().QuickSearch.QuickSearchText;\r\n            FSBL.Clients.LinkerClient.publish({ dataType: \"quickSearch\", data: demoDataObject.currentQuickSearch });\r\n        }\r\n    });\r\n}\r\n\r\nfunction publishSymbolWhenSelectionChanged(grid, demoDataObject) {\r\n    grid.addEventListener('fin-selection-changed', (e) => {\r\n\r\n        if (e.detail.selections.length === 0) {\r\n            //no selection\r\n            demoDataObject.currentSelectedSymbol = \"\";\r\n            FSBL.Clients.LinkerClient.publish({ dataType: \"symbol\", data: \"\" });\r\n            return;\r\n        }\r\n\r\n        //get the first selected cell of the selections\r\n        let rowIndex = e.detail.selections[0].firstSelectedCell.y;\r\n        let row = grid.behavior.dataModel.dataSource.getRow(rowIndex);\r\n        let column = grid.behavior.getActiveColumns()[e.detail.selections[0].firstSelectedCell.x];\r\n        if (column.name === \"instrumentId\") {\r\n            let symbol = row.instrumentId;\r\n            demoDataObject.currentSelectedSymbol = symbol;\r\n            //we set the current quicksearch as well as we do not want to set the quicksearch when we select a cell\r\n            demoDataObject.currentQuickSearch = symbol;\r\n            FSBL.Clients.LinkerClient.publish({ dataType: \"symbol\", data: symbol });\r\n        }\r\n    });\r\n}\r\n\r\nfunction setEmittersWhenSelectionChanged(grid, adaptableblotter) {\r\n    grid.addEventListener('fin-selection-changed', () => {\r\n        FSBL.Clients.DataTransferClient.setEmitters({\r\n            emitters: [\r\n                {\r\n                    type: \"adaptableblotter.selectedcells\",\r\n                    data: { selectedCells: JSON.stringify(adaptableblotterblotter.AdaptableBlotterStore.TheStore.getState().Grid.SelectedCellInfo.Selection) }\r\n                }\r\n            ]\r\n        })\r\n    });\r\n}\r\n\r\nfunction hypergridThemeChangeWhenAbChange(adaptableblotter, grid, demoDataObject) {\r\n    adaptableblotter.AdaptableBlotterStore.TheStore.subscribe(() => {\r\n        if (demoDataObject.themeName !== adaptableblotter.AdaptableBlotterStore.TheStore.getState().Theme.CurrentTheme) {\r\n            demoDataObject.themeName = adaptableblotter.AdaptableBlotterStore.TheStore.getState().Theme.CurrentTheme;\r\n            if (demoDataObject.themeName === \"Dark Theme\" ||\r\n                demoDataObject.themeName === \"Cyborg\" ||\r\n                demoDataObject.themeName === \"Darkly\" ||\r\n                demoDataObject.themeName === \"Superhero\") {\r\n                grid.addProperties(darkTheme);\r\n            }\r\n            else {\r\n                grid.addProperties(lightTheme);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction areArraysEqual(arr1, arr2) {\r\n    if (arr1.length !== arr2.length) {\r\n        return false;\r\n    }\r\n    return arr1.every(x => arr2.indexOf(x) !== -1);\r\n}\r\n\r\nmodule.exports.hypergridAddRow = hypergridAddRow;\r\nmodule.exports.hypergridUpdateRowFromDataSource = hypergridUpdateRowFromDataSource;\r\nmodule.exports.createGrid = createGrid;\r\nmodule.exports.initAdaptableBlotter = initAdaptableBlotter;\r\nmodule.exports.DemoDataObject = DemoDataObject;\r\nmodule.exports.maximizeWidgetWhenABPopupVisible = maximizeWidgetWhenABPopupVisible;\r\n// module.exports.publishInstrumentExpressionWhenChanged = publishInstrumentExpressionWhenChanged;\r\nmodule.exports.publishQuickSearchWhenChanged = publishQuickSearchWhenChanged;\r\nmodule.exports.hypergridThemeChangeWhenAbChange = hypergridThemeChangeWhenAbChange;\r\nmodule.exports.publishSymbolWhenSelectionChanged = publishSymbolWhenSelectionChanged;\r\nmodule.exports.setEmittersWhenSelectionChanged = setEmittersWhenSelectionChanged;"]}}},"hash":"1067bb5f74096556d1be29830d87941b","dependencyBlock":{"type":"DependenciesBlock","dependencies":[{"type":"ConstDependency","expression":"","range":[0,13],"loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":13}}},{"type":"CommonJsRequireDependency","request":"adaptableblotter/dist/adaptableblotterhypergrid-bundle.min","range":[55,115],"loc":{"start":{"line":3,"column":32},"end":{"line":3,"column":101}}},{"type":"RequireHeaderDependency","range":[47,54],"loc":{"start":{"line":3,"column":32},"end":{"line":3,"column":101}}},{"type":"CommonJsRequireDependency","request":"fin-hypergrid","range":[142,157],"loc":{"start":{"line":4,"column":16},"end":{"line":4,"column":40}}},{"type":"RequireHeaderDependency","range":[134,141],"loc":{"start":{"line":4,"column":16},"end":{"line":4,"column":40}}}],"variables":[],"blocks":[]},"source":{"_cachedSource":{"source":{"type":"ReplaceSource","replacements":[[142,156,"73",3],[134,140,"__webpack_require__",4],[55,114,"68",1],[47,53,"__webpack_require__",2],[0,12,"",0]]},"hash":"1067bb5f74096556d1be29830d87941b"}}}